# Generated from C:/Users/harip/Desktop/SQL-vs/antlr-saphana/Hana.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,560,5525,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,1,0,4,0,854,8,0,11,0,12,0,855,
        1,1,5,1,859,8,1,10,1,12,1,862,9,1,1,1,1,1,1,2,5,2,867,8,2,10,2,12,
        2,870,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,879,8,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,895,8,6,1,6,1,6,3,
        6,899,8,6,1,6,1,6,1,6,3,6,904,8,6,1,6,1,6,1,6,3,6,909,8,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,3,6,918,8,6,3,6,920,8,6,1,6,1,6,1,6,1,6,3,
        6,926,8,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,3,8,937,8,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,953,8,9,1,
        9,1,9,3,9,957,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,967,8,9,1,
        9,1,9,1,9,1,9,1,9,3,9,974,8,9,1,9,1,9,1,9,1,9,1,9,3,9,981,8,9,1,
        9,1,9,1,9,1,9,1,9,3,9,988,8,9,1,9,1,9,1,9,3,9,993,8,9,1,10,1,10,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,1004,8,12,10,12,12,12,1007,
        9,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,3,15,1022,8,15,1,15,3,15,1025,8,15,1,16,3,16,1028,8,16,1,16,
        1,16,1,16,3,16,1033,8,16,1,17,1,17,1,17,1,17,5,17,1039,8,17,10,17,
        12,17,1042,9,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,5,22,1056,8,22,10,22,12,22,1059,9,22,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,3,24,1069,8,24,1,25,1,25,3,25,1073,8,25,1,
        25,1,25,3,25,1077,8,25,1,25,1,25,3,25,1081,8,25,1,25,3,25,1084,8,
        25,1,26,1,26,1,26,3,26,1089,8,26,1,27,1,27,1,27,3,27,1094,8,27,1,
        28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,5,29,1106,8,29,10,
        29,12,29,1109,9,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,3,31,
        1119,8,31,1,31,1,31,1,32,1,32,1,32,5,32,1126,8,32,10,32,12,32,1129,
        9,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,3,36,1146,8,36,1,37,1,37,1,37,3,37,1151,8,37,1,38,
        4,38,1154,8,38,11,38,12,38,1155,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,40,1,40,1,40,5,40,1168,8,40,10,40,12,40,1171,9,40,1,41,1,41,
        1,41,1,41,3,41,1177,8,41,1,42,4,42,1180,8,42,11,42,12,42,1181,1,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1192,8,43,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1203,8,44,1,45,1,45,1,45,1,
        45,3,45,1209,8,45,1,45,3,45,1212,8,45,1,45,3,45,1215,8,45,1,45,3,
        45,1218,8,45,1,46,1,46,1,46,3,46,1223,8,46,1,47,1,47,1,47,3,47,1228,
        8,47,1,47,1,47,1,48,1,48,3,48,1234,8,48,1,48,3,48,1237,8,48,1,48,
        1,48,1,49,1,49,3,49,1243,8,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,5,53,1261,8,53,10,53,
        12,53,1264,9,53,1,53,3,53,1267,8,53,1,53,3,53,1270,8,53,1,53,3,53,
        1273,8,53,1,53,3,53,1276,8,53,1,53,3,53,1279,8,53,1,53,1,53,1,53,
        1,53,1,54,1,54,1,54,1,54,1,54,5,54,1290,8,54,10,54,12,54,1293,9,
        54,1,54,3,54,1296,8,54,1,54,3,54,1299,8,54,1,54,3,54,1302,8,54,1,
        55,1,55,1,55,5,55,1307,8,55,10,55,12,55,1310,9,55,1,55,3,55,1313,
        8,55,1,55,3,55,1316,8,55,1,55,3,55,1319,8,55,1,56,1,56,3,56,1323,
        8,56,1,56,3,56,1326,8,56,1,56,3,56,1329,8,56,1,56,3,56,1332,8,56,
        1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,3,57,1342,8,57,1,57,1,57,
        1,57,1,57,1,57,3,57,1349,8,57,3,57,1351,8,57,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1366,8,58,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1378,8,59,1,60,
        1,60,1,60,1,60,1,60,1,60,3,60,1386,8,60,1,60,3,60,1389,8,60,1,60,
        1,60,1,61,1,61,1,61,3,61,1396,8,61,1,61,1,61,1,62,1,62,1,62,1,62,
        1,62,1,62,1,63,1,63,1,63,5,63,1409,8,63,10,63,12,63,1412,9,63,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,1421,8,64,10,64,12,64,1424,
        9,64,1,64,1,64,1,65,1,65,1,65,5,65,1431,8,65,10,65,12,65,1434,9,
        65,1,66,1,66,1,66,3,66,1439,8,66,1,67,1,67,1,67,1,67,1,67,1,67,1,
        67,1,67,3,67,1449,8,67,1,68,3,68,1452,8,68,1,68,3,68,1455,8,68,1,
        68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,5,72,1474,8,72,10,72,12,72,1477,9,72,1,72,1,72,
        3,72,1481,8,72,1,73,1,73,3,73,1485,8,73,1,74,1,74,1,74,1,74,1,74,
        1,74,3,74,1493,8,74,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1501,8,75,
        1,75,1,75,1,75,3,75,1506,8,75,1,75,3,75,1509,8,75,3,75,1511,8,75,
        1,76,3,76,1514,8,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,3,77,1523,
        8,77,1,77,3,77,1526,8,77,1,78,3,78,1529,8,78,1,78,1,78,3,78,1533,
        8,78,1,78,3,78,1536,8,78,1,78,1,78,1,78,1,78,5,78,1542,8,78,10,78,
        12,78,1545,9,78,1,78,1,78,3,78,1549,8,78,1,78,5,78,1552,8,78,10,
        78,12,78,1555,9,78,1,79,1,79,1,79,1,79,3,79,1561,8,79,1,80,1,80,
        1,80,1,81,1,81,1,81,1,81,1,81,3,81,1571,8,81,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,5,83,1587,8,83,
        10,83,12,83,1590,9,83,1,83,1,83,1,84,1,84,3,84,1596,8,84,1,85,1,
        85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,1606,8,86,1,87,1,87,1,87,1,
        87,1,87,1,87,5,87,1614,8,87,10,87,12,87,1617,9,87,1,87,1,87,1,87,
        1,87,3,87,1623,8,87,1,87,5,87,1626,8,87,10,87,12,87,1629,9,87,1,
        87,1,87,1,87,3,87,1634,8,87,1,88,1,88,1,88,1,88,1,88,1,88,5,88,1642,
        8,88,10,88,12,88,1645,9,88,1,88,1,88,3,88,1649,8,88,1,88,1,88,1,
        88,1,88,1,88,3,88,1656,8,88,1,88,5,88,1659,8,88,10,88,12,88,1662,
        9,88,1,88,1,88,1,88,3,88,1667,8,88,1,89,3,89,1670,8,89,1,89,3,89,
        1673,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,5,89,1688,8,89,10,89,12,89,1691,9,89,1,89,1,89,3,89,1695,
        8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1704,8,89,1,89,5,89,
        1707,8,89,10,89,12,89,1710,9,89,1,89,1,89,1,89,3,89,1715,8,89,1,
        90,3,90,1718,8,90,1,90,1,90,1,91,1,91,1,91,3,91,1725,8,91,1,91,3,
        91,1728,8,91,1,92,1,92,1,92,1,92,1,93,3,93,1735,8,93,1,93,4,93,1738,
        8,93,11,93,12,93,1739,1,93,1,93,3,93,1744,8,93,1,94,1,94,1,94,3,
        94,1749,8,94,1,95,1,95,1,95,3,95,1754,8,95,1,96,1,96,1,96,1,96,1,
        96,1,96,5,96,1762,8,96,10,96,12,96,1765,9,96,1,96,1,96,1,96,3,96,
        1770,8,96,1,97,1,97,1,97,1,97,1,97,1,97,5,97,1778,8,97,10,97,12,
        97,1781,9,97,1,97,1,97,3,97,1785,8,97,1,97,1,97,1,97,1,97,1,97,3,
        97,1792,8,97,1,97,1,97,1,97,1,97,3,97,1798,8,97,1,97,1,97,3,97,1802,
        8,97,1,98,3,98,1805,8,98,1,98,3,98,1808,8,98,1,98,1,98,1,98,1,98,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,1823,8,98,10,98,
        12,98,1826,9,98,1,98,1,98,3,98,1830,8,98,1,98,1,98,1,98,1,98,1,98,
        1,98,3,98,1838,8,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,
        1,100,1,100,5,100,1850,8,100,10,100,12,100,1853,9,100,1,100,1,100,
        1,101,1,101,3,101,1859,8,101,1,102,1,102,1,102,1,103,1,103,1,103,
        1,103,1,103,5,103,1869,8,103,10,103,12,103,1872,9,103,1,103,1,103,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,3,104,1892,8,104,1,105,1,105,1,105,
        1,105,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,
        3,108,1908,8,108,1,109,1,109,1,109,1,109,1,110,1,110,1,110,3,110,
        1917,8,110,1,110,1,110,1,110,3,110,1922,8,110,1,110,1,110,3,110,
        1926,8,110,1,110,3,110,1929,8,110,1,111,1,111,1,111,1,111,1,111,
        1,111,5,111,1937,8,111,10,111,12,111,1940,9,111,1,111,1,111,1,112,
        1,112,1,112,1,112,1,112,5,112,1949,8,112,10,112,12,112,1952,9,112,
        1,112,1,112,1,112,3,112,1957,8,112,1,112,1,112,1,113,1,113,1,113,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1972,8,114,
        1,115,1,115,3,115,1976,8,115,1,115,1,115,1,115,3,115,1981,8,115,
        1,115,3,115,1984,8,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,3,116,1997,8,116,1,116,1,116,3,116,2001,
        8,116,1,116,1,116,1,117,1,117,1,117,1,117,1,117,1,117,5,117,2011,
        8,117,10,117,12,117,2014,9,117,1,117,1,117,3,117,2018,8,117,1,117,
        1,117,3,117,2022,8,117,1,117,1,117,3,117,2026,8,117,1,117,1,117,
        1,118,1,118,3,118,2032,8,118,1,118,3,118,2035,8,118,1,118,3,118,
        2038,8,118,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,1,120,1,120,3,120,2065,8,120,1,120,1,120,4,120,
        2069,8,120,11,120,12,120,2070,1,120,1,120,3,120,2075,8,120,1,120,
        1,120,1,121,1,121,3,121,2081,8,121,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,5,122,2091,8,122,10,122,12,122,2094,9,122,1,122,
        1,122,1,122,1,122,1,122,1,122,3,122,2102,8,122,3,122,2104,8,122,
        1,122,1,122,1,123,1,123,3,123,2110,8,123,1,123,1,123,3,123,2114,
        8,123,1,123,3,123,2117,8,123,1,124,1,124,1,124,1,124,1,124,1,125,
        1,125,3,125,2126,8,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,
        1,126,1,126,3,126,2137,8,126,1,126,1,126,3,126,2141,8,126,1,126,
        3,126,2144,8,126,1,127,1,127,3,127,2148,8,127,1,127,1,127,1,127,
        1,128,1,128,1,128,3,128,2156,8,128,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,3,128,2165,8,128,1,129,1,129,1,129,1,130,1,130,1,130,
        1,130,4,130,2174,8,130,11,130,12,130,2175,1,131,1,131,1,131,1,131,
        1,131,1,131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
        1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
        1,132,1,132,1,132,3,132,2207,8,132,1,133,1,133,3,133,2211,8,133,
        1,133,1,133,1,133,1,134,1,134,3,134,2218,8,134,1,134,1,134,3,134,
        2222,8,134,1,135,1,135,3,135,2226,8,135,1,135,1,135,3,135,2230,8,
        135,1,136,1,136,1,136,1,137,1,137,1,137,1,137,1,137,5,137,2240,8,
        137,10,137,12,137,2243,9,137,1,137,3,137,2246,8,137,1,137,1,137,
        1,137,1,138,1,138,1,138,1,138,1,138,1,139,1,139,1,139,1,140,3,140,
        2260,8,140,1,140,1,140,1,140,1,140,3,140,2266,8,140,1,140,1,140,
        1,140,1,140,1,140,3,140,2273,8,140,1,141,1,141,1,141,3,141,2278,
        8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,2288,
        8,141,1,141,1,141,1,141,1,141,3,141,2294,8,141,3,141,2296,8,141,
        1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,2305,8,142,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2315,8,143,1,143,
        1,143,1,143,3,143,2320,8,143,1,144,1,144,1,144,1,144,1,144,1,145,
        1,145,1,146,1,146,1,147,1,147,1,148,1,148,3,148,2335,8,148,1,149,
        1,149,3,149,2339,8,149,1,150,3,150,2342,8,150,1,150,1,150,3,150,
        2346,8,150,1,151,1,151,1,151,3,151,2351,8,151,1,151,1,151,3,151,
        2355,8,151,1,152,1,152,4,152,2359,8,152,11,152,12,152,2360,1,153,
        1,153,1,153,1,153,5,153,2367,8,153,10,153,12,153,2370,9,153,1,153,
        1,153,1,153,1,154,3,154,2376,8,154,1,154,4,154,2379,8,154,11,154,
        12,154,2380,3,154,2383,8,154,1,154,1,154,1,155,3,155,2388,8,155,
        1,155,4,155,2391,8,155,11,155,12,155,2392,1,155,1,155,1,156,1,156,
        1,156,1,156,3,156,2401,8,156,1,157,1,157,1,157,1,157,1,157,3,157,
        2408,8,157,1,157,1,157,3,157,2412,8,157,1,157,3,157,2415,8,157,1,
        158,1,158,1,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,3,159,2429,8,159,1,160,1,160,1,160,1,160,3,160,2435,8,160,
        1,161,1,161,1,161,1,162,1,162,1,162,3,162,2443,8,162,1,163,1,163,
        1,163,1,163,1,163,1,163,5,163,2451,8,163,10,163,12,163,2454,9,163,
        1,163,1,163,1,163,1,163,1,163,1,163,5,163,2462,8,163,10,163,12,163,
        2465,9,163,3,163,2467,8,163,1,164,1,164,1,164,1,164,1,164,3,164,
        2474,8,164,1,164,3,164,2477,8,164,1,165,1,165,1,165,1,165,1,165,
        3,165,2484,8,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
        1,166,3,166,2495,8,166,1,166,1,166,1,166,1,166,3,166,2501,8,166,
        1,166,1,166,3,166,2505,8,166,1,167,1,167,1,167,1,167,1,167,1,167,
        5,167,2513,8,167,10,167,12,167,2516,9,167,3,167,2518,8,167,1,167,
        1,167,1,168,1,168,3,168,2524,8,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,3,168,2535,8,168,3,168,2537,8,168,3,168,
        2539,8,168,1,168,3,168,2542,8,168,1,169,1,169,3,169,2546,8,169,1,
        169,3,169,2549,8,169,1,170,1,170,3,170,2553,8,170,1,170,1,170,3,
        170,2557,8,170,1,170,1,170,1,170,3,170,2562,8,170,1,171,1,171,1,
        171,1,172,1,172,1,172,1,172,1,172,1,172,3,172,2573,8,172,1,172,1,
        172,3,172,2577,8,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,2585,
        8,172,1,173,3,173,2588,8,173,1,173,1,173,1,173,5,173,2593,8,173,
        10,173,12,173,2596,9,173,1,174,1,174,1,174,1,174,5,174,2602,8,174,
        10,174,12,174,2605,9,174,1,175,1,175,1,175,1,175,1,175,5,175,2612,
        8,175,10,175,12,175,2615,9,175,1,175,1,175,3,175,2619,8,175,1,175,
        1,175,1,175,1,175,3,175,2625,8,175,1,175,1,175,3,175,2629,8,175,
        1,175,3,175,2632,8,175,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
        2640,8,176,1,176,3,176,2643,8,176,1,176,1,176,3,176,2647,8,176,1,
        176,1,176,3,176,2651,8,176,1,176,1,176,1,176,3,176,2656,8,176,1,
        176,3,176,2659,8,176,1,176,1,176,3,176,2663,8,176,1,176,1,176,3,
        176,2667,8,176,5,176,2669,8,176,10,176,12,176,2672,9,176,1,176,1,
        176,1,176,1,177,1,177,1,177,1,177,5,177,2681,8,177,10,177,12,177,
        2684,9,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,178,1,178,
        5,178,2695,8,178,10,178,12,178,2698,9,178,1,179,1,179,3,179,2702,
        8,179,1,179,1,179,3,179,2706,8,179,1,179,1,179,1,180,1,180,1,180,
        1,180,1,180,3,180,2715,8,180,1,181,1,181,3,181,2719,8,181,1,181,
        1,181,1,181,1,181,5,181,2725,8,181,10,181,12,181,2728,9,181,3,181,
        2730,8,181,1,181,3,181,2733,8,181,1,181,1,181,3,181,2737,8,181,1,
        181,3,181,2740,8,181,1,181,3,181,2743,8,181,1,181,3,181,2746,8,181,
        1,182,1,182,3,182,2750,8,182,1,183,1,183,1,183,1,184,1,184,1,184,
        1,184,1,184,3,184,2760,8,184,1,185,1,185,1,185,5,185,2765,8,185,
        10,185,12,185,2768,9,185,1,186,1,186,5,186,2772,8,186,10,186,12,
        186,2775,9,186,1,186,1,186,3,186,2779,8,186,1,187,1,187,1,187,3,
        187,2784,8,187,1,187,1,187,1,187,5,187,2789,8,187,10,187,12,187,
        2792,9,187,1,187,1,187,1,187,3,187,2797,8,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,3,187,2807,8,187,3,187,2809,8,187,
        1,187,5,187,2812,8,187,10,187,12,187,2815,9,187,1,187,3,187,2818,
        8,187,1,187,3,187,2821,8,187,1,187,1,187,3,187,2825,8,187,1,187,
        3,187,2828,8,187,3,187,2830,8,187,1,188,3,188,2833,8,188,1,188,3,
        188,2836,8,188,1,188,1,188,3,188,2840,8,188,1,188,1,188,1,188,3,
        188,2845,8,188,1,188,1,188,5,188,2849,8,188,10,188,12,188,2852,9,
        188,1,189,1,189,1,189,1,190,1,190,1,190,1,190,1,190,5,190,2862,8,
        190,10,190,12,190,2865,9,190,1,190,1,190,1,191,1,191,3,191,2871,
        8,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,
        5,192,2883,8,192,10,192,12,192,2886,9,192,3,192,2888,8,192,1,193,
        1,193,1,193,1,193,1,193,1,193,1,193,1,193,3,193,2898,8,193,1,194,
        1,194,3,194,2902,8,194,1,194,1,194,1,194,1,194,5,194,2908,8,194,
        10,194,12,194,2911,9,194,1,194,1,194,1,194,1,194,1,195,1,195,1,195,
        1,195,1,195,3,195,2922,8,195,1,196,1,196,1,196,1,196,1,196,1,196,
        5,196,2930,8,196,10,196,12,196,2933,9,196,1,196,1,196,3,196,2937,
        8,196,1,197,1,197,1,197,1,197,1,197,1,197,5,197,2945,8,197,10,197,
        12,197,2948,9,197,1,197,1,197,1,197,5,197,2953,8,197,10,197,12,197,
        2956,9,197,3,197,2958,8,197,1,197,1,197,1,198,1,198,3,198,2964,8,
        198,1,199,1,199,3,199,2968,8,199,1,200,1,200,1,200,3,200,2973,8,
        200,1,200,1,200,1,200,1,200,1,200,1,200,5,200,2981,8,200,10,200,
        12,200,2984,9,200,1,200,1,200,3,200,2988,8,200,1,200,1,200,1,200,
        1,200,1,201,1,201,1,201,1,201,1,201,5,201,2999,8,201,10,201,12,201,
        3002,9,201,1,201,1,201,1,202,1,202,1,202,1,202,1,202,5,202,3011,
        8,202,10,202,12,202,3014,9,202,1,202,1,202,3,202,3018,8,202,1,202,
        1,202,1,202,1,202,1,202,1,202,5,202,3026,8,202,10,202,12,202,3029,
        9,202,1,202,1,202,3,202,3033,8,202,3,202,3035,8,202,1,203,1,203,
        1,203,3,203,3040,8,203,1,203,1,203,3,203,3044,8,203,1,203,1,203,
        1,203,1,203,3,203,3050,8,203,1,203,1,203,3,203,3054,8,203,1,204,
        1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,205,5,205,3065,8,205,
        10,205,12,205,3068,9,205,1,205,3,205,3071,8,205,1,205,1,205,1,205,
        1,205,1,205,1,205,5,205,3079,8,205,10,205,12,205,3082,9,205,3,205,
        3084,8,205,3,205,3086,8,205,1,206,1,206,1,206,3,206,3091,8,206,1,
        207,1,207,1,207,1,207,1,207,5,207,3098,8,207,10,207,12,207,3101,
        9,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,5,208,3111,
        8,208,10,208,12,208,3114,9,208,1,208,1,208,1,209,1,209,1,209,3,209,
        3121,8,209,1,210,1,210,1,210,1,211,1,211,5,211,3128,8,211,10,211,
        12,211,3131,9,211,1,211,3,211,3134,8,211,1,211,5,211,3137,8,211,
        10,211,12,211,3140,9,211,1,211,1,211,1,212,1,212,1,212,1,212,1,212,
        1,212,3,212,3150,8,212,3,212,3152,8,212,1,213,1,213,1,213,1,213,
        1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,5,214,3166,8,214,
        10,214,12,214,3169,9,214,1,215,1,215,3,215,3173,8,215,1,215,1,215,
        5,215,3177,8,215,10,215,12,215,3180,9,215,1,215,1,215,1,216,3,216,
        3185,8,216,1,216,1,216,1,216,1,216,1,216,1,216,1,217,1,217,1,217,
        1,217,1,218,1,218,1,218,1,218,5,218,3201,8,218,10,218,12,218,3204,
        9,218,1,218,1,218,1,219,1,219,3,219,3210,8,219,1,220,3,220,3213,
        8,220,1,220,1,220,1,220,1,220,5,220,3219,8,220,10,220,12,220,3222,
        9,220,1,220,1,220,1,221,1,221,1,221,1,221,3,221,3230,8,221,3,221,
        3232,8,221,1,221,1,221,3,221,3236,8,221,1,221,3,221,3239,8,221,1,
        222,1,222,1,222,3,222,3244,8,222,3,222,3246,8,222,1,222,1,222,3,
        222,3250,8,222,1,222,1,222,1,222,1,223,1,223,1,224,1,224,1,224,1,
        224,1,224,3,224,3262,8,224,1,225,1,225,1,225,1,225,1,225,1,226,1,
        226,3,226,3271,8,226,1,226,1,226,1,226,1,226,5,226,3277,8,226,10,
        226,12,226,3280,9,226,1,227,1,227,3,227,3284,8,227,1,227,1,227,3,
        227,3288,8,227,1,228,1,228,1,228,3,228,3293,8,228,1,228,3,228,3296,
        8,228,1,229,1,229,1,229,1,229,5,229,3302,8,229,10,229,12,229,3305,
        9,229,1,230,1,230,1,230,1,230,1,230,3,230,3312,8,230,1,231,1,231,
        1,231,1,231,3,231,3318,8,231,1,231,3,231,3321,8,231,1,231,3,231,
        3324,8,231,1,232,1,232,1,232,1,232,5,232,3330,8,232,10,232,12,232,
        3333,9,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,3342,
        8,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,5,233,3352,
        8,233,10,233,12,233,3355,9,233,1,233,1,233,1,233,1,233,3,233,3361,
        8,233,1,234,1,234,3,234,3365,8,234,1,234,1,234,3,234,3369,8,234,
        1,234,3,234,3372,8,234,1,234,3,234,3375,8,234,1,235,1,235,1,235,
        3,235,3380,8,235,1,236,1,236,1,236,3,236,3385,8,236,1,236,3,236,
        3388,8,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,238,1,238,
        3,238,3399,8,238,1,239,1,239,1,239,3,239,3404,8,239,1,239,3,239,
        3407,8,239,1,239,3,239,3410,8,239,1,240,1,240,4,240,3414,8,240,11,
        240,12,240,3415,1,240,3,240,3419,8,240,1,240,1,240,1,241,1,241,3,
        241,3425,8,241,1,241,3,241,3428,8,241,1,242,3,242,3431,8,242,1,242,
        4,242,3434,8,242,11,242,12,242,3435,1,242,3,242,3439,8,242,1,243,
        1,243,1,243,1,243,4,243,3445,8,243,11,243,12,243,3446,1,244,1,244,
        4,244,3451,8,244,11,244,12,244,3452,1,245,1,245,1,245,1,245,1,245,
        1,245,5,245,3461,8,245,10,245,12,245,3464,9,245,1,245,1,245,3,245,
        3468,8,245,1,246,1,246,1,246,1,247,1,247,1,247,1,247,3,247,3477,
        8,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,3487,
        8,247,1,247,1,247,3,247,3491,8,247,3,247,3493,8,247,1,247,3,247,
        3496,8,247,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,5,248,
        3506,8,248,10,248,12,248,3509,9,248,1,248,3,248,3512,8,248,1,248,
        3,248,3515,8,248,1,249,1,249,1,249,1,249,1,250,1,250,1,250,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,5,251,3533,8,251,
        10,251,12,251,3536,9,251,1,251,1,251,3,251,3540,8,251,1,251,1,251,
        1,251,3,251,3545,8,251,1,252,1,252,1,252,1,252,1,252,3,252,3552,
        8,252,1,252,3,252,3555,8,252,1,253,1,253,1,253,1,253,1,253,5,253,
        3562,8,253,10,253,12,253,3565,9,253,1,253,1,253,1,253,1,253,3,253,
        3571,8,253,1,254,1,254,1,254,3,254,3576,8,254,1,255,1,255,3,255,
        3580,8,255,1,256,1,256,1,256,1,256,1,256,1,256,3,256,3588,8,256,
        1,256,1,256,1,256,1,256,3,256,3594,8,256,1,257,1,257,1,257,1,257,
        1,257,1,257,3,257,3602,8,257,1,257,3,257,3605,8,257,1,258,1,258,
        1,258,1,258,5,258,3611,8,258,10,258,12,258,3614,9,258,1,258,1,258,
        1,259,1,259,1,259,3,259,3621,8,259,1,259,3,259,3624,8,259,1,259,
        3,259,3627,8,259,1,260,1,260,1,260,1,261,1,261,1,261,1,261,3,261,
        3636,8,261,1,262,1,262,1,262,1,262,3,262,3642,8,262,1,262,1,262,
        1,262,1,262,3,262,3648,8,262,3,262,3650,8,262,1,263,1,263,1,263,
        1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,3,263,3663,8,263,
        3,263,3665,8,263,1,264,1,264,1,264,1,264,1,264,1,264,1,264,3,264,
        3674,8,264,3,264,3676,8,264,1,265,1,265,3,265,3680,8,265,1,265,1,
        265,1,265,1,265,3,265,3686,8,265,1,265,1,265,3,265,3690,8,265,1,
        266,1,266,1,266,1,266,1,266,1,267,1,267,1,267,1,267,1,267,1,268,
        1,268,3,268,3704,8,268,1,268,1,268,5,268,3708,8,268,10,268,12,268,
        3711,9,268,1,268,1,268,1,269,1,269,1,270,1,270,1,271,1,271,1,271,
        1,271,1,271,1,271,1,271,1,271,3,271,3727,8,271,1,271,1,271,1,271,
        1,271,1,271,1,271,5,271,3735,8,271,10,271,12,271,3738,9,271,1,272,
        1,272,1,272,1,272,1,272,1,272,3,272,3746,8,272,1,273,1,273,1,273,
        3,273,3751,8,273,1,273,1,273,3,273,3755,8,273,1,274,1,274,1,275,
        1,275,3,275,3761,8,275,1,275,1,275,1,275,1,275,1,275,1,276,1,276,
        3,276,3770,8,276,1,276,1,276,1,276,3,276,3775,8,276,1,277,3,277,
        3778,8,277,1,277,1,277,1,277,1,277,1,277,1,278,1,278,3,278,3787,
        8,278,1,278,1,278,1,278,1,278,3,278,3793,8,278,1,279,1,279,1,279,
        3,279,3798,8,279,1,279,1,279,1,280,1,280,1,280,5,280,3805,8,280,
        10,280,12,280,3808,9,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
        1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
        1,281,3,281,3829,8,281,1,281,3,281,3832,8,281,1,281,1,281,1,281,
        1,281,5,281,3838,8,281,10,281,12,281,3841,9,281,1,282,1,282,1,283,
        1,283,1,284,1,284,3,284,3849,8,284,1,285,1,285,1,285,1,285,1,285,
        1,285,1,285,1,285,1,285,1,285,1,285,5,285,3862,8,285,10,285,12,285,
        3865,9,285,1,285,1,285,3,285,3869,8,285,1,285,1,285,1,286,1,286,
        1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,5,286,3883,8,286,
        10,286,12,286,3886,9,286,1,286,1,286,3,286,3890,8,286,1,286,1,286,
        1,287,1,287,1,287,1,287,1,287,5,287,3899,8,287,10,287,12,287,3902,
        9,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
        1,288,1,288,1,288,1,288,1,288,3,288,3919,8,288,1,288,1,288,1,288,
        1,288,1,288,1,288,1,288,1,288,3,288,3929,8,288,1,288,3,288,3932,
        8,288,1,288,1,288,3,288,3936,8,288,1,289,1,289,1,290,1,290,1,291,
        1,291,1,291,1,291,3,291,3946,8,291,1,291,1,291,1,291,1,291,3,291,
        3952,8,291,1,292,1,292,1,292,1,292,5,292,3958,8,292,10,292,12,292,
        3961,9,292,3,292,3963,8,292,1,293,1,293,1,294,1,294,1,294,5,294,
        3970,8,294,10,294,12,294,3973,9,294,1,295,1,295,1,295,3,295,3978,
        8,295,1,296,1,296,1,296,3,296,3983,8,296,1,296,1,296,1,296,1,296,
        1,296,1,296,1,296,1,296,1,296,3,296,3994,8,296,1,296,1,296,3,296,
        3998,8,296,1,296,1,296,1,296,5,296,4003,8,296,10,296,12,296,4006,
        9,296,1,296,1,296,3,296,4010,8,296,5,296,4012,8,296,10,296,12,296,
        4015,9,296,1,297,1,297,1,297,3,297,4020,8,297,1,297,1,297,3,297,
        4024,8,297,1,298,1,298,1,299,1,299,1,299,1,299,5,299,4032,8,299,
        10,299,12,299,4035,9,299,1,300,1,300,1,300,1,300,1,300,1,300,3,300,
        4043,8,300,1,301,1,301,3,301,4047,8,301,1,301,1,301,1,301,1,301,
        1,301,1,301,1,301,3,301,4056,8,301,3,301,4058,8,301,3,301,4060,8,
        301,1,302,1,302,1,303,1,303,1,303,1,304,1,304,1,304,1,304,1,304,
        1,304,1,304,1,304,5,304,4075,8,304,10,304,12,304,4078,9,304,1,304,
        1,304,1,304,1,304,1,304,3,304,4085,8,304,1,305,1,305,1,305,1,305,
        1,306,1,306,1,306,1,306,5,306,4095,8,306,10,306,12,306,4098,9,306,
        1,307,1,307,1,308,1,308,1,308,5,308,4105,8,308,10,308,12,308,4108,
        9,308,1,309,1,309,1,309,5,309,4113,8,309,10,309,12,309,4116,9,309,
        1,310,1,310,1,310,1,310,1,310,1,310,3,310,4124,8,310,1,310,3,310,
        4127,8,310,1,311,1,311,1,311,1,311,1,311,3,311,4134,8,311,1,311,
        1,311,1,311,1,311,1,311,1,311,3,311,4142,8,311,1,311,1,311,1,311,
        1,311,1,311,3,311,4149,8,311,1,311,1,311,3,311,4153,8,311,1,312,
        1,312,1,312,1,312,1,312,3,312,4160,8,312,1,313,1,313,3,313,4164,
        8,313,1,313,1,313,1,313,3,313,4169,8,313,5,313,4171,8,313,10,313,
        12,313,4174,9,313,1,313,1,313,1,313,5,313,4179,8,313,10,313,12,313,
        4182,9,313,1,313,3,313,4185,8,313,1,314,1,314,1,314,1,314,1,314,
        3,314,4192,8,314,1,314,1,314,1,314,1,314,1,314,1,314,1,314,3,314,
        4201,8,314,1,315,1,315,1,315,1,316,1,316,1,317,1,317,1,317,1,317,
        1,317,5,317,4213,8,317,10,317,12,317,4216,9,317,1,317,1,317,1,317,
        1,317,1,317,1,317,1,317,1,317,5,317,4226,8,317,10,317,12,317,4229,
        9,317,1,317,1,317,3,317,4233,8,317,1,317,1,317,1,318,1,318,1,318,
        1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,
        1,318,1,318,1,318,1,318,3,318,4255,8,318,1,319,1,319,3,319,4259,
        8,319,1,320,3,320,4262,8,320,1,320,1,320,1,320,4,320,4267,8,320,
        11,320,12,320,4268,1,320,3,320,4272,8,320,1,320,1,320,3,320,4276,
        8,320,1,320,3,320,4279,8,320,1,321,1,321,1,321,1,321,1,321,3,321,
        4286,8,321,1,322,3,322,4289,8,322,1,322,1,322,4,322,4293,8,322,11,
        322,12,322,4294,1,322,3,322,4298,8,322,1,322,1,322,3,322,4302,8,
        322,1,322,3,322,4305,8,322,1,323,1,323,1,323,1,323,1,323,3,323,4312,
        8,323,1,324,1,324,1,324,3,324,4317,8,324,1,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,5,325,4329,8,325,10,325,12,325,
        4332,9,325,1,325,1,325,1,325,3,325,4337,8,325,3,325,4339,8,325,1,
        326,1,326,3,326,4343,8,326,1,327,1,327,1,327,1,327,5,327,4349,8,
        327,10,327,12,327,4352,9,327,1,328,1,328,1,328,1,328,1,328,1,328,
        1,328,1,328,1,328,3,328,4363,8,328,1,329,1,329,1,329,3,329,4368,
        8,329,1,329,1,329,1,329,3,329,4373,8,329,1,329,1,329,1,329,1,329,
        3,329,4379,8,329,1,329,3,329,4382,8,329,1,329,1,329,3,329,4386,8,
        329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,4396,8,
        329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,
        1,329,1,329,1,329,1,329,3,329,4412,8,329,1,329,1,329,3,329,4416,
        8,329,1,329,1,329,1,329,1,329,1,329,4,329,4423,8,329,11,329,12,329,
        4424,1,329,1,329,1,329,1,329,3,329,4431,8,329,1,329,1,329,1,329,
        1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,4445,
        8,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,5,329,4454,8,329,
        10,329,12,329,4457,9,329,1,329,3,329,4460,8,329,1,329,3,329,4463,
        8,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,4472,8,329,
        1,329,1,329,5,329,4476,8,329,10,329,12,329,4479,9,329,1,329,1,329,
        1,329,1,329,1,329,1,329,1,329,3,329,4488,8,329,1,329,1,329,1,329,
        1,329,1,329,1,329,3,329,4496,8,329,1,329,3,329,4499,8,329,1,329,
        3,329,4502,8,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,
        4511,8,329,1,329,1,329,1,329,3,329,4516,8,329,1,329,1,329,1,329,
        1,329,1,329,5,329,4523,8,329,10,329,12,329,4526,9,329,1,329,1,329,
        1,329,3,329,4531,8,329,1,329,1,329,1,329,3,329,4536,8,329,1,329,
        3,329,4539,8,329,1,329,1,329,1,329,3,329,4544,8,329,1,329,1,329,
        1,329,3,329,4549,8,329,5,329,4551,8,329,10,329,12,329,4554,9,329,
        1,329,1,329,1,329,3,329,4559,8,329,1,329,1,329,1,329,1,329,3,329,
        4565,8,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,4574,
        8,329,1,329,1,329,1,329,3,329,4579,8,329,1,329,1,329,1,329,1,329,
        1,329,1,329,3,329,4587,8,329,1,329,1,329,3,329,4591,8,329,1,329,
        1,329,1,329,3,329,4596,8,329,1,329,1,329,1,329,1,329,3,329,4602,
        8,329,1,329,1,329,1,329,1,329,1,329,3,329,4609,8,329,1,329,1,329,
        1,329,3,329,4614,8,329,1,329,1,329,1,329,1,329,1,329,3,329,4621,
        8,329,1,329,1,329,3,329,4625,8,329,1,329,1,329,1,329,3,329,4630,
        8,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,4638,8,329,1,329,
        3,329,4641,8,329,1,329,3,329,4644,8,329,1,329,3,329,4647,8,329,1,
        329,1,329,3,329,4651,8,329,1,329,1,329,1,329,3,329,4656,8,329,1,
        329,1,329,1,329,3,329,4661,8,329,1,329,1,329,3,329,4665,8,329,1,
        329,1,329,1,329,1,329,1,329,3,329,4672,8,329,1,329,1,329,1,329,3,
        329,4677,8,329,3,329,4679,8,329,1,330,1,330,1,331,1,331,1,332,1,
        332,1,333,1,333,1,333,3,333,4690,8,333,1,333,1,333,3,333,4694,8,
        333,3,333,4696,8,333,1,333,1,333,1,334,1,334,1,334,1,334,1,334,1,
        334,1,334,3,334,4707,8,334,1,335,1,335,1,336,1,336,1,336,1,336,1,
        336,1,336,1,336,3,336,4718,8,336,1,337,1,337,1,337,1,337,1,337,5,
        337,4725,8,337,10,337,12,337,4728,9,337,3,337,4730,8,337,1,338,1,
        338,3,338,4734,8,338,1,338,3,338,4737,8,338,1,338,1,338,3,338,4741,
        8,338,1,339,1,339,1,339,1,339,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,3,340,4754,8,340,1,341,1,341,1,341,3,341,4759,8,341,1,341,
        1,341,1,341,1,341,5,341,4765,8,341,10,341,12,341,4768,9,341,1,341,
        1,341,1,341,1,341,3,341,4774,8,341,1,342,1,342,1,342,3,342,4779,
        8,342,1,342,1,342,3,342,4783,8,342,1,342,1,342,1,342,3,342,4788,
        8,342,1,343,1,343,1,343,3,343,4793,8,343,1,343,3,343,4796,8,343,
        1,343,1,343,1,343,5,343,4801,8,343,10,343,12,343,4804,9,343,1,343,
        1,343,1,344,1,344,1,344,1,344,1,344,3,344,4813,8,344,1,344,1,344,
        1,344,1,344,5,344,4819,8,344,10,344,12,344,4822,9,344,1,344,3,344,
        4825,8,344,1,344,1,344,1,345,1,345,1,345,1,345,1,345,1,345,3,345,
        4835,8,345,1,345,3,345,4838,8,345,3,345,4840,8,345,1,346,1,346,1,
        346,1,347,1,347,1,347,1,347,1,347,3,347,4850,8,347,3,347,4852,8,
        347,1,348,1,348,1,348,1,348,3,348,4858,8,348,1,349,1,349,1,349,1,
        349,3,349,4864,8,349,3,349,4866,8,349,1,350,1,350,1,350,1,351,1,
        351,1,351,1,352,1,352,1,352,1,352,1,352,1,352,3,352,4880,8,352,3,
        352,4882,8,352,1,353,1,353,1,353,1,353,1,353,3,353,4889,8,353,1,
        353,3,353,4892,8,353,1,354,1,354,1,354,1,354,1,354,1,354,1,354,3,
        354,4901,8,354,1,355,1,355,1,355,1,355,1,355,1,355,1,355,3,355,4910,
        8,355,1,356,1,356,1,357,1,357,1,358,1,358,3,358,4918,8,358,1,358,
        1,358,1,359,3,359,4923,8,359,1,359,1,359,3,359,4927,8,359,1,359,
        3,359,4930,8,359,1,360,1,360,3,360,4934,8,360,1,361,1,361,1,362,
        1,362,1,362,3,362,4941,8,362,1,363,1,363,1,363,1,363,1,364,1,364,
        1,364,1,364,5,364,4951,8,364,10,364,12,364,4954,9,364,1,364,1,364,
        1,364,1,364,1,364,1,364,5,364,4962,8,364,10,364,12,364,4965,9,364,
        3,364,4967,8,364,1,365,1,365,3,365,4971,8,365,1,366,1,366,1,367,
        1,367,1,368,1,368,1,369,1,369,1,370,1,370,1,371,1,371,1,372,1,372,
        1,372,5,372,4988,8,372,10,372,12,372,4991,9,372,1,372,1,372,3,372,
        4995,8,372,1,373,1,373,1,374,1,374,1,374,3,374,5002,8,374,1,375,
        1,375,1,376,1,376,1,377,1,377,1,377,5,377,5011,8,377,10,377,12,377,
        5014,9,377,1,378,1,378,1,379,1,379,1,379,5,379,5021,8,379,10,379,
        12,379,5024,9,379,1,379,1,379,3,379,5028,8,379,1,380,1,380,1,381,
        1,381,1,381,5,381,5035,8,381,10,381,12,381,5038,9,381,1,382,1,382,
        1,382,5,382,5043,8,382,10,382,12,382,5046,9,382,1,383,1,383,1,383,
        5,383,5051,8,383,10,383,12,383,5054,9,383,1,384,1,384,1,384,3,384,
        5059,8,384,1,385,1,385,1,385,3,385,5064,8,385,1,385,1,385,1,386,
        1,386,1,386,3,386,5071,8,386,1,387,1,387,3,387,5075,8,387,1,387,
        1,387,1,387,3,387,5080,8,387,1,387,3,387,5083,8,387,1,388,1,388,
        1,389,1,389,3,389,5089,8,389,1,390,1,390,3,390,5093,8,390,1,391,
        1,391,1,391,3,391,5098,8,391,1,392,1,392,1,393,1,393,1,393,5,393,
        5105,8,393,10,393,12,393,5108,9,393,1,394,1,394,1,394,3,394,5113,
        8,394,1,394,1,394,1,394,3,394,5118,8,394,1,395,1,395,1,395,5,395,
        5123,8,395,10,395,12,395,5126,9,395,1,396,1,396,1,396,1,396,1,396,
        1,396,1,396,3,396,5135,8,396,1,397,1,397,3,397,5139,8,397,1,397,
        1,397,5,397,5143,8,397,10,397,12,397,5146,9,397,1,397,1,397,3,397,
        5150,8,397,1,398,1,398,1,398,3,398,5155,8,398,3,398,5157,8,398,1,
        398,1,398,1,398,3,398,5162,8,398,5,398,5164,8,398,10,398,12,398,
        5167,9,398,1,398,1,398,3,398,5171,8,398,1,399,1,399,1,399,1,399,
        1,399,3,399,5178,8,399,1,399,1,399,1,399,3,399,5183,8,399,3,399,
        5185,8,399,3,399,5187,8,399,1,399,1,399,1,399,1,399,1,399,1,399,
        1,399,1,399,3,399,5197,8,399,1,399,1,399,1,399,3,399,5202,8,399,
        5,399,5204,8,399,10,399,12,399,5207,9,399,3,399,5209,8,399,1,399,
        1,399,3,399,5213,8,399,1,400,1,400,1,400,1,401,1,401,1,401,1,401,
        3,401,5222,8,401,1,401,1,401,1,402,1,402,3,402,5228,8,402,1,402,
        1,402,3,402,5232,8,402,3,402,5234,8,402,1,403,1,403,3,403,5238,8,
        403,1,403,1,403,3,403,5242,8,403,1,403,1,403,3,403,5246,8,403,1,
        403,1,403,1,403,1,403,1,403,1,403,3,403,5254,8,403,1,403,1,403,1,
        403,1,403,1,403,1,403,3,403,5262,8,403,3,403,5264,8,403,1,404,1,
        404,1,404,1,404,3,404,5270,8,404,1,404,3,404,5273,8,404,1,404,1,
        404,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,
        1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,
        1,405,3,405,5299,8,405,1,405,1,405,1,405,1,405,1,405,3,405,5306,
        8,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,
        1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,
        1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,3,405,
        5339,8,405,1,406,1,406,1,406,3,406,5344,8,406,1,406,3,406,5347,8,
        406,1,406,1,406,1,406,3,406,5352,8,406,3,406,5354,8,406,1,406,1,
        406,5,406,5358,8,406,10,406,12,406,5361,9,406,1,406,1,406,1,406,
        1,406,3,406,5367,8,406,1,407,1,407,1,407,1,408,1,408,1,409,1,409,
        1,409,1,410,1,410,1,411,1,411,1,411,5,411,5382,8,411,10,411,12,411,
        5385,9,411,1,412,1,412,3,412,5389,8,412,1,412,1,412,1,412,5,412,
        5394,8,412,10,412,12,412,5397,9,412,1,412,3,412,5400,8,412,1,413,
        1,413,3,413,5404,8,413,1,413,1,413,1,413,5,413,5409,8,413,10,413,
        12,413,5412,9,413,1,414,1,414,1,414,3,414,5417,8,414,1,414,1,414,
        1,414,1,414,3,414,5423,8,414,1,414,1,414,1,414,1,414,3,414,5429,
        8,414,1,414,1,414,1,414,1,414,3,414,5435,8,414,1,414,1,414,1,414,
        3,414,5440,8,414,3,414,5442,8,414,1,414,3,414,5445,8,414,1,414,1,
        414,1,414,1,414,1,414,1,414,1,414,1,414,3,414,5455,8,414,1,414,3,
        414,5458,8,414,3,414,5460,8,414,3,414,5462,8,414,1,414,1,414,1,414,
        1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,3,414,5476,
        8,414,1,415,1,415,1,416,1,416,1,416,1,417,1,417,1,418,1,418,3,418,
        5487,8,418,1,418,1,418,1,419,1,419,3,419,5493,8,419,1,420,1,420,
        1,420,1,420,1,420,1,420,1,420,3,420,5502,8,420,1,421,1,421,1,421,
        3,421,5507,8,421,1,422,1,422,1,422,3,422,5512,8,422,1,423,1,423,
        1,423,3,423,5517,8,423,1,424,1,424,1,424,1,424,1,425,1,425,1,425,
        0,2,542,562,426,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
        150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
        182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
        214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
        246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,
        278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,
        310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
        342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,
        374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,
        406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,
        438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,
        470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,
        502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,
        534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,
        566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,
        598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,
        630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,
        662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,
        694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,
        726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,
        758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,
        790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,
        822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,0,76,
        1,0,541,541,3,0,172,172,184,184,279,279,2,0,1,1,375,375,2,0,109,
        109,194,194,2,0,106,106,538,538,3,0,9,9,120,120,234,234,2,0,20,20,
        195,195,3,0,91,91,275,275,372,372,2,0,222,222,276,276,2,0,226,226,
        381,381,3,0,148,148,186,186,282,282,2,0,89,89,109,109,1,0,290,291,
        1,1,541,541,1,0,322,323,2,0,271,271,447,447,1,0,74,75,2,0,108,108,
        171,171,2,0,259,259,437,437,2,0,30,30,171,171,2,0,44,44,111,111,
        3,0,13,13,117,117,416,416,2,0,86,86,239,239,3,0,158,158,205,205,
        327,327,2,0,339,339,394,394,3,0,339,339,368,368,394,394,2,0,137,
        137,173,173,2,0,87,87,329,329,2,0,170,170,200,200,2,0,13,13,421,
        421,2,0,28,28,349,349,2,0,21,21,112,112,2,0,149,149,202,202,2,0,
        13,13,149,149,1,0,390,391,3,0,13,13,18,18,369,369,4,0,5,6,542,544,
        549,549,552,552,8,0,5,6,17,17,274,274,532,534,536,536,542,544,549,
        550,552,552,2,0,13,13,117,117,6,0,84,84,483,488,502,503,506,508,
        512,512,515,515,2,0,226,226,384,384,1,0,208,211,1,0,533,534,2,0,
        532,532,536,536,2,0,105,105,175,175,4,0,13,13,18,18,140,140,369,
        369,2,0,54,54,451,451,2,0,117,117,416,416,2,0,51,51,68,68,2,0,150,
        150,203,203,2,0,56,56,243,243,3,0,43,43,204,204,404,404,2,0,452,
        452,455,455,2,0,130,130,252,252,2,0,133,133,237,237,2,0,77,77,118,
        118,2,0,167,167,358,358,1,0,502,517,1,0,495,501,1,0,489,494,2,0,
        305,305,332,332,2,0,152,152,299,299,2,0,257,257,338,338,2,0,278,
        278,373,373,3,0,145,145,388,388,438,438,2,0,66,66,328,328,3,0,66,
        66,255,255,328,328,2,0,287,287,385,385,2,0,170,170,318,318,2,0,96,
        96,463,463,2,0,235,235,341,341,2,0,47,47,55,55,4,0,96,96,168,168,
        229,229,341,341,1,0,523,524,2,0,518,518,525,525,78,0,8,12,16,16,
        19,19,22,31,34,37,39,43,45,45,47,48,50,52,54,57,59,70,73,84,86,87,
        89,94,96,102,104,105,107,109,113,116,118,119,121,123,126,128,130,
        133,135,137,139,139,141,145,148,153,155,156,158,159,163,164,167,
        168,170,171,173,176,178,184,186,189,191,191,193,193,196,207,209,
        213,215,227,229,231,233,248,250,252,255,255,257,257,261,265,267,
        269,271,272,275,275,277,289,292,292,294,301,304,307,309,325,327,
        339,341,341,344,345,347,347,349,356,358,363,365,366,368,370,372,
        373,376,376,378,389,393,401,404,409,411,414,417,417,419,419,421,
        424,426,427,429,435,437,439,441,441,443,443,445,466,489,517,560,
        560,6078,0,853,1,0,0,0,2,860,1,0,0,0,4,868,1,0,0,0,6,878,1,0,0,0,
        8,880,1,0,0,0,10,885,1,0,0,0,12,890,1,0,0,0,14,931,1,0,0,0,16,936,
        1,0,0,0,18,992,1,0,0,0,20,994,1,0,0,0,22,996,1,0,0,0,24,999,1,0,
        0,0,26,1010,1,0,0,0,28,1013,1,0,0,0,30,1024,1,0,0,0,32,1027,1,0,
        0,0,34,1034,1,0,0,0,36,1045,1,0,0,0,38,1047,1,0,0,0,40,1049,1,0,
        0,0,42,1051,1,0,0,0,44,1053,1,0,0,0,46,1060,1,0,0,0,48,1068,1,0,
        0,0,50,1070,1,0,0,0,52,1085,1,0,0,0,54,1090,1,0,0,0,56,1095,1,0,
        0,0,58,1100,1,0,0,0,60,1112,1,0,0,0,62,1115,1,0,0,0,64,1122,1,0,
        0,0,66,1130,1,0,0,0,68,1132,1,0,0,0,70,1134,1,0,0,0,72,1145,1,0,
        0,0,74,1150,1,0,0,0,76,1153,1,0,0,0,78,1157,1,0,0,0,80,1164,1,0,
        0,0,82,1176,1,0,0,0,84,1179,1,0,0,0,86,1191,1,0,0,0,88,1202,1,0,
        0,0,90,1204,1,0,0,0,92,1219,1,0,0,0,94,1224,1,0,0,0,96,1231,1,0,
        0,0,98,1242,1,0,0,0,100,1244,1,0,0,0,102,1246,1,0,0,0,104,1253,1,
        0,0,0,106,1255,1,0,0,0,108,1284,1,0,0,0,110,1303,1,0,0,0,112,1320,
        1,0,0,0,114,1350,1,0,0,0,116,1365,1,0,0,0,118,1377,1,0,0,0,120,1379,
        1,0,0,0,122,1395,1,0,0,0,124,1399,1,0,0,0,126,1405,1,0,0,0,128,1413,
        1,0,0,0,130,1427,1,0,0,0,132,1438,1,0,0,0,134,1448,1,0,0,0,136,1451,
        1,0,0,0,138,1458,1,0,0,0,140,1460,1,0,0,0,142,1462,1,0,0,0,144,1466,
        1,0,0,0,146,1482,1,0,0,0,148,1486,1,0,0,0,150,1510,1,0,0,0,152,1513,
        1,0,0,0,154,1519,1,0,0,0,156,1528,1,0,0,0,158,1556,1,0,0,0,160,1562,
        1,0,0,0,162,1565,1,0,0,0,164,1572,1,0,0,0,166,1580,1,0,0,0,168,1595,
        1,0,0,0,170,1597,1,0,0,0,172,1601,1,0,0,0,174,1607,1,0,0,0,176,1635,
        1,0,0,0,178,1669,1,0,0,0,180,1717,1,0,0,0,182,1727,1,0,0,0,184,1729,
        1,0,0,0,186,1734,1,0,0,0,188,1748,1,0,0,0,190,1750,1,0,0,0,192,1755,
        1,0,0,0,194,1771,1,0,0,0,196,1804,1,0,0,0,198,1839,1,0,0,0,200,1843,
        1,0,0,0,202,1858,1,0,0,0,204,1860,1,0,0,0,206,1863,1,0,0,0,208,1891,
        1,0,0,0,210,1893,1,0,0,0,212,1897,1,0,0,0,214,1900,1,0,0,0,216,1904,
        1,0,0,0,218,1909,1,0,0,0,220,1913,1,0,0,0,222,1930,1,0,0,0,224,1943,
        1,0,0,0,226,1960,1,0,0,0,228,1971,1,0,0,0,230,1973,1,0,0,0,232,1987,
        1,0,0,0,234,2004,1,0,0,0,236,2029,1,0,0,0,238,2039,1,0,0,0,240,2043,
        1,0,0,0,242,2080,1,0,0,0,244,2082,1,0,0,0,246,2107,1,0,0,0,248,2118,
        1,0,0,0,250,2125,1,0,0,0,252,2129,1,0,0,0,254,2147,1,0,0,0,256,2155,
        1,0,0,0,258,2166,1,0,0,0,260,2173,1,0,0,0,262,2177,1,0,0,0,264,2206,
        1,0,0,0,266,2210,1,0,0,0,268,2215,1,0,0,0,270,2223,1,0,0,0,272,2231,
        1,0,0,0,274,2234,1,0,0,0,276,2250,1,0,0,0,278,2255,1,0,0,0,280,2259,
        1,0,0,0,282,2295,1,0,0,0,284,2297,1,0,0,0,286,2319,1,0,0,0,288,2321,
        1,0,0,0,290,2326,1,0,0,0,292,2328,1,0,0,0,294,2330,1,0,0,0,296,2332,
        1,0,0,0,298,2336,1,0,0,0,300,2341,1,0,0,0,302,2347,1,0,0,0,304,2356,
        1,0,0,0,306,2362,1,0,0,0,308,2382,1,0,0,0,310,2387,1,0,0,0,312,2400,
        1,0,0,0,314,2402,1,0,0,0,316,2416,1,0,0,0,318,2428,1,0,0,0,320,2434,
        1,0,0,0,322,2436,1,0,0,0,324,2439,1,0,0,0,326,2444,1,0,0,0,328,2468,
        1,0,0,0,330,2483,1,0,0,0,332,2485,1,0,0,0,334,2506,1,0,0,0,336,2521,
        1,0,0,0,338,2543,1,0,0,0,340,2550,1,0,0,0,342,2563,1,0,0,0,344,2566,
        1,0,0,0,346,2587,1,0,0,0,348,2597,1,0,0,0,350,2606,1,0,0,0,352,2633,
        1,0,0,0,354,2676,1,0,0,0,356,2692,1,0,0,0,358,2705,1,0,0,0,360,2714,
        1,0,0,0,362,2716,1,0,0,0,364,2747,1,0,0,0,366,2751,1,0,0,0,368,2759,
        1,0,0,0,370,2761,1,0,0,0,372,2769,1,0,0,0,374,2829,1,0,0,0,376,2832,
        1,0,0,0,378,2853,1,0,0,0,380,2856,1,0,0,0,382,2868,1,0,0,0,384,2872,
        1,0,0,0,386,2897,1,0,0,0,388,2899,1,0,0,0,390,2916,1,0,0,0,392,2923,
        1,0,0,0,394,2938,1,0,0,0,396,2961,1,0,0,0,398,2967,1,0,0,0,400,2969,
        1,0,0,0,402,2993,1,0,0,0,404,3017,1,0,0,0,406,3053,1,0,0,0,408,3055,
        1,0,0,0,410,3085,1,0,0,0,412,3090,1,0,0,0,414,3092,1,0,0,0,416,3104,
        1,0,0,0,418,3120,1,0,0,0,420,3122,1,0,0,0,422,3125,1,0,0,0,424,3151,
        1,0,0,0,426,3153,1,0,0,0,428,3157,1,0,0,0,430,3172,1,0,0,0,432,3184,
        1,0,0,0,434,3192,1,0,0,0,436,3196,1,0,0,0,438,3207,1,0,0,0,440,3212,
        1,0,0,0,442,3225,1,0,0,0,444,3245,1,0,0,0,446,3254,1,0,0,0,448,3256,
        1,0,0,0,450,3263,1,0,0,0,452,3268,1,0,0,0,454,3281,1,0,0,0,456,3289,
        1,0,0,0,458,3297,1,0,0,0,460,3311,1,0,0,0,462,3313,1,0,0,0,464,3325,
        1,0,0,0,466,3360,1,0,0,0,468,3362,1,0,0,0,470,3376,1,0,0,0,472,3381,
        1,0,0,0,474,3389,1,0,0,0,476,3398,1,0,0,0,478,3400,1,0,0,0,480,3418,
        1,0,0,0,482,3422,1,0,0,0,484,3430,1,0,0,0,486,3440,1,0,0,0,488,3448,
        1,0,0,0,490,3454,1,0,0,0,492,3469,1,0,0,0,494,3472,1,0,0,0,496,3497,
        1,0,0,0,498,3516,1,0,0,0,500,3520,1,0,0,0,502,3523,1,0,0,0,504,3551,
        1,0,0,0,506,3556,1,0,0,0,508,3575,1,0,0,0,510,3577,1,0,0,0,512,3593,
        1,0,0,0,514,3601,1,0,0,0,516,3606,1,0,0,0,518,3617,1,0,0,0,520,3628,
        1,0,0,0,522,3631,1,0,0,0,524,3649,1,0,0,0,526,3651,1,0,0,0,528,3666,
        1,0,0,0,530,3677,1,0,0,0,532,3691,1,0,0,0,534,3696,1,0,0,0,536,3701,
        1,0,0,0,538,3714,1,0,0,0,540,3716,1,0,0,0,542,3726,1,0,0,0,544,3745,
        1,0,0,0,546,3747,1,0,0,0,548,3756,1,0,0,0,550,3758,1,0,0,0,552,3767,
        1,0,0,0,554,3777,1,0,0,0,556,3784,1,0,0,0,558,3794,1,0,0,0,560,3801,
        1,0,0,0,562,3831,1,0,0,0,564,3842,1,0,0,0,566,3844,1,0,0,0,568,3848,
        1,0,0,0,570,3850,1,0,0,0,572,3872,1,0,0,0,574,3893,1,0,0,0,576,3935,
        1,0,0,0,578,3937,1,0,0,0,580,3939,1,0,0,0,582,3941,1,0,0,0,584,3962,
        1,0,0,0,586,3964,1,0,0,0,588,3966,1,0,0,0,590,3977,1,0,0,0,592,3979,
        1,0,0,0,594,4016,1,0,0,0,596,4025,1,0,0,0,598,4027,1,0,0,0,600,4042,
        1,0,0,0,602,4044,1,0,0,0,604,4061,1,0,0,0,606,4063,1,0,0,0,608,4084,
        1,0,0,0,610,4086,1,0,0,0,612,4090,1,0,0,0,614,4099,1,0,0,0,616,4101,
        1,0,0,0,618,4109,1,0,0,0,620,4117,1,0,0,0,622,4152,1,0,0,0,624,4154,
        1,0,0,0,626,4184,1,0,0,0,628,4186,1,0,0,0,630,4202,1,0,0,0,632,4205,
        1,0,0,0,634,4207,1,0,0,0,636,4254,1,0,0,0,638,4258,1,0,0,0,640,4261,
        1,0,0,0,642,4280,1,0,0,0,644,4288,1,0,0,0,646,4306,1,0,0,0,648,4313,
        1,0,0,0,650,4338,1,0,0,0,652,4340,1,0,0,0,654,4344,1,0,0,0,656,4353,
        1,0,0,0,658,4678,1,0,0,0,660,4680,1,0,0,0,662,4682,1,0,0,0,664,4684,
        1,0,0,0,666,4686,1,0,0,0,668,4699,1,0,0,0,670,4708,1,0,0,0,672,4717,
        1,0,0,0,674,4719,1,0,0,0,676,4736,1,0,0,0,678,4742,1,0,0,0,680,4753,
        1,0,0,0,682,4755,1,0,0,0,684,4775,1,0,0,0,686,4789,1,0,0,0,688,4807,
        1,0,0,0,690,4828,1,0,0,0,692,4841,1,0,0,0,694,4844,1,0,0,0,696,4853,
        1,0,0,0,698,4859,1,0,0,0,700,4867,1,0,0,0,702,4870,1,0,0,0,704,4881,
        1,0,0,0,706,4888,1,0,0,0,708,4893,1,0,0,0,710,4902,1,0,0,0,712,4911,
        1,0,0,0,714,4913,1,0,0,0,716,4915,1,0,0,0,718,4929,1,0,0,0,720,4933,
        1,0,0,0,722,4935,1,0,0,0,724,4937,1,0,0,0,726,4942,1,0,0,0,728,4966,
        1,0,0,0,730,4970,1,0,0,0,732,4972,1,0,0,0,734,4974,1,0,0,0,736,4976,
        1,0,0,0,738,4978,1,0,0,0,740,4980,1,0,0,0,742,4982,1,0,0,0,744,4984,
        1,0,0,0,746,4996,1,0,0,0,748,4998,1,0,0,0,750,5003,1,0,0,0,752,5005,
        1,0,0,0,754,5007,1,0,0,0,756,5015,1,0,0,0,758,5017,1,0,0,0,760,5029,
        1,0,0,0,762,5031,1,0,0,0,764,5039,1,0,0,0,766,5047,1,0,0,0,768,5055,
        1,0,0,0,770,5063,1,0,0,0,772,5067,1,0,0,0,774,5082,1,0,0,0,776,5084,
        1,0,0,0,778,5088,1,0,0,0,780,5092,1,0,0,0,782,5094,1,0,0,0,784,5099,
        1,0,0,0,786,5101,1,0,0,0,788,5109,1,0,0,0,790,5119,1,0,0,0,792,5127,
        1,0,0,0,794,5136,1,0,0,0,796,5151,1,0,0,0,798,5172,1,0,0,0,800,5214,
        1,0,0,0,802,5221,1,0,0,0,804,5233,1,0,0,0,806,5263,1,0,0,0,808,5265,
        1,0,0,0,810,5338,1,0,0,0,812,5366,1,0,0,0,814,5368,1,0,0,0,816,5371,
        1,0,0,0,818,5373,1,0,0,0,820,5376,1,0,0,0,822,5378,1,0,0,0,824,5388,
        1,0,0,0,826,5403,1,0,0,0,828,5475,1,0,0,0,830,5477,1,0,0,0,832,5479,
        1,0,0,0,834,5482,1,0,0,0,836,5486,1,0,0,0,838,5492,1,0,0,0,840,5501,
        1,0,0,0,842,5506,1,0,0,0,844,5511,1,0,0,0,846,5516,1,0,0,0,848,5518,
        1,0,0,0,850,5522,1,0,0,0,852,854,8,0,0,0,853,852,1,0,0,0,854,855,
        1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,1,1,0,0,0,857,859,3,
        6,3,0,858,857,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,1,
        0,0,0,861,863,1,0,0,0,862,860,1,0,0,0,863,864,5,0,0,1,864,3,1,0,
        0,0,865,867,3,6,3,0,866,865,1,0,0,0,867,870,1,0,0,0,868,866,1,0,
        0,0,868,869,1,0,0,0,869,871,1,0,0,0,870,868,1,0,0,0,871,872,5,0,
        0,1,872,5,1,0,0,0,873,879,3,8,4,0,874,879,3,12,6,0,875,879,3,206,
        103,0,876,879,3,10,5,0,877,879,3,318,159,0,878,873,1,0,0,0,878,874,
        1,0,0,0,878,875,1,0,0,0,878,876,1,0,0,0,878,877,1,0,0,0,879,7,1,
        0,0,0,880,881,5,354,0,0,881,882,5,337,0,0,882,883,3,742,371,0,883,
        884,5,541,0,0,884,9,1,0,0,0,885,886,5,120,0,0,886,887,5,303,0,0,
        887,888,3,770,385,0,888,889,5,541,0,0,889,11,1,0,0,0,890,891,5,85,
        0,0,891,892,5,303,0,0,892,894,3,770,385,0,893,895,3,34,17,0,894,
        893,1,0,0,0,894,895,1,0,0,0,895,898,1,0,0,0,896,897,5,201,0,0,897,
        899,3,36,18,0,898,896,1,0,0,0,898,899,1,0,0,0,899,903,1,0,0,0,900,
        901,5,371,0,0,901,902,5,343,0,0,902,904,3,38,19,0,903,900,1,0,0,
        0,903,904,1,0,0,0,904,908,1,0,0,0,905,906,5,106,0,0,906,907,5,337,
        0,0,907,909,3,40,20,0,908,905,1,0,0,0,908,909,1,0,0,0,909,919,1,
        0,0,0,910,911,5,308,0,0,911,912,5,371,0,0,912,917,5,93,0,0,913,914,
        5,444,0,0,914,915,5,320,0,0,915,916,5,436,0,0,916,918,3,42,21,0,
        917,913,1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,910,1,0,0,0,
        919,920,1,0,0,0,920,921,1,0,0,0,921,922,5,20,0,0,922,925,5,32,0,
        0,923,924,5,349,0,0,924,926,5,470,0,0,925,923,1,0,0,0,925,926,1,
        0,0,0,926,927,1,0,0,0,927,928,3,136,68,0,928,929,5,129,0,0,929,930,
        5,541,0,0,930,13,1,0,0,0,931,932,3,838,419,0,932,15,1,0,0,0,933,
        937,3,18,9,0,934,937,3,20,10,0,935,937,3,22,11,0,936,933,1,0,0,0,
        936,934,1,0,0,0,936,935,1,0,0,0,937,17,1,0,0,0,938,993,5,95,0,0,
        939,993,5,393,0,0,940,993,5,394,0,0,941,993,5,342,0,0,942,993,5,
        402,0,0,943,993,5,366,0,0,944,993,5,189,0,0,945,993,5,188,0,0,946,
        993,5,38,0,0,947,956,5,102,0,0,948,949,5,529,0,0,949,952,3,830,415,
        0,950,951,5,535,0,0,951,953,3,830,415,0,952,950,1,0,0,0,952,953,
        1,0,0,0,953,954,1,0,0,0,954,955,5,530,0,0,955,957,1,0,0,0,956,948,
        1,0,0,0,956,957,1,0,0,0,957,993,1,0,0,0,958,993,5,367,0,0,959,993,
        5,309,0,0,960,993,5,119,0,0,961,966,5,429,0,0,962,963,5,529,0,0,
        963,964,3,830,415,0,964,965,5,530,0,0,965,967,1,0,0,0,966,962,1,
        0,0,0,966,967,1,0,0,0,967,993,1,0,0,0,968,973,5,264,0,0,969,970,
        5,529,0,0,970,971,3,830,415,0,971,972,5,530,0,0,972,974,1,0,0,0,
        973,969,1,0,0,0,973,974,1,0,0,0,974,993,1,0,0,0,975,980,5,15,0,0,
        976,977,5,529,0,0,977,978,3,830,415,0,978,979,5,530,0,0,979,981,
        1,0,0,0,980,976,1,0,0,0,980,981,1,0,0,0,981,993,1,0,0,0,982,987,
        5,481,0,0,983,984,5,529,0,0,984,985,3,830,415,0,985,986,5,530,0,
        0,986,988,1,0,0,0,987,983,1,0,0,0,987,988,1,0,0,0,988,993,1,0,0,
        0,989,993,5,39,0,0,990,993,5,60,0,0,991,993,5,244,0,0,992,938,1,
        0,0,0,992,939,1,0,0,0,992,940,1,0,0,0,992,941,1,0,0,0,992,942,1,
        0,0,0,992,943,1,0,0,0,992,944,1,0,0,0,992,945,1,0,0,0,992,946,1,
        0,0,0,992,947,1,0,0,0,992,958,1,0,0,0,992,959,1,0,0,0,992,960,1,
        0,0,0,992,961,1,0,0,0,992,968,1,0,0,0,992,975,1,0,0,0,992,982,1,
        0,0,0,992,989,1,0,0,0,992,990,1,0,0,0,992,991,1,0,0,0,993,19,1,0,
        0,0,994,995,3,838,419,0,995,21,1,0,0,0,996,997,5,390,0,0,997,998,
        3,24,12,0,998,23,1,0,0,0,999,1000,5,529,0,0,1000,1005,3,26,13,0,
        1001,1002,5,535,0,0,1002,1004,3,26,13,0,1003,1001,1,0,0,0,1004,1007,
        1,0,0,0,1005,1003,1,0,0,0,1005,1006,1,0,0,0,1006,1008,1,0,0,0,1007,
        1005,1,0,0,0,1008,1009,5,530,0,0,1009,25,1,0,0,0,1010,1011,3,28,
        14,0,1011,1012,3,30,15,0,1012,27,1,0,0,0,1013,1014,3,584,292,0,1014,
        29,1,0,0,0,1015,1025,3,18,9,0,1016,1021,5,474,0,0,1017,1018,5,529,
        0,0,1018,1019,3,830,415,0,1019,1020,5,530,0,0,1020,1022,1,0,0,0,
        1021,1017,1,0,0,0,1021,1022,1,0,0,0,1022,1025,1,0,0,0,1023,1025,
        5,479,0,0,1024,1015,1,0,0,0,1024,1016,1,0,0,0,1024,1023,1,0,0,0,
        1025,31,1,0,0,0,1026,1028,7,1,0,0,1027,1026,1,0,0,0,1027,1028,1,
        0,0,0,1028,1029,1,0,0,0,1029,1030,3,14,7,0,1030,1032,3,16,8,0,1031,
        1033,3,226,113,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,33,1,0,
        0,0,1034,1035,5,529,0,0,1035,1040,3,32,16,0,1036,1037,5,535,0,0,
        1037,1039,3,32,16,0,1038,1036,1,0,0,0,1039,1042,1,0,0,0,1040,1038,
        1,0,0,0,1040,1041,1,0,0,0,1041,1043,1,0,0,0,1042,1040,1,0,0,0,1043,
        1044,5,530,0,0,1044,35,1,0,0,0,1045,1046,7,2,0,0,1046,37,1,0,0,0,
        1047,1048,7,3,0,0,1048,39,1,0,0,0,1049,1050,3,838,419,0,1050,41,
        1,0,0,0,1051,1052,3,838,419,0,1052,43,1,0,0,0,1053,1057,3,46,23,
        0,1054,1056,3,46,23,0,1055,1054,1,0,0,0,1056,1059,1,0,0,0,1057,1055,
        1,0,0,0,1057,1058,1,0,0,0,1058,45,1,0,0,0,1059,1057,1,0,0,0,1060,
        1061,5,103,0,0,1061,1062,3,48,24,0,1062,1063,5,541,0,0,1063,47,1,
        0,0,0,1064,1069,3,50,25,0,1065,1069,3,52,26,0,1066,1069,3,62,31,
        0,1067,1069,3,72,36,0,1068,1064,1,0,0,0,1068,1065,1,0,0,0,1068,1066,
        1,0,0,0,1068,1067,1,0,0,0,1069,49,1,0,0,0,1070,1072,3,54,27,0,1071,
        1073,5,73,0,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1076,1,0,
        0,0,1074,1077,3,18,9,0,1075,1077,3,56,28,0,1076,1074,1,0,0,0,1076,
        1075,1,0,0,0,1077,1080,1,0,0,0,1078,1079,5,258,0,0,1079,1081,5,260,
        0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,1083,1,0,0,0,1082,1084,
        3,60,30,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,51,1,0,0,0,1085,
        1088,3,54,27,0,1086,1089,3,22,11,0,1087,1089,3,20,10,0,1088,1086,
        1,0,0,0,1088,1087,1,0,0,0,1089,53,1,0,0,0,1090,1093,3,66,33,0,1091,
        1092,5,535,0,0,1092,1094,3,66,33,0,1093,1091,1,0,0,0,1093,1094,1,
        0,0,0,1094,55,1,0,0,0,1095,1096,3,18,9,0,1096,1097,5,19,0,0,1097,
        1098,5,552,0,0,1098,1099,3,58,29,0,1099,57,1,0,0,0,1100,1101,5,19,
        0,0,1101,1102,5,529,0,0,1102,1107,3,584,292,0,1103,1104,5,535,0,
        0,1104,1106,3,584,292,0,1105,1103,1,0,0,0,1106,1109,1,0,0,0,1107,
        1105,1,0,0,0,1107,1108,1,0,0,0,1108,1110,1,0,0,0,1109,1107,1,0,0,
        0,1110,1111,5,530,0,0,1111,59,1,0,0,0,1112,1113,7,4,0,0,1113,1114,
        3,584,292,0,1114,61,1,0,0,0,1115,1116,5,90,0,0,1116,1118,3,68,34,
        0,1117,1119,3,64,32,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1120,
        1,0,0,0,1120,1121,5,154,0,0,1121,63,1,0,0,0,1122,1127,3,70,35,0,
        1123,1124,5,535,0,0,1124,1126,3,70,35,0,1125,1123,1,0,0,0,1126,1129,
        1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,65,1,0,0,0,1129,
        1127,1,0,0,0,1130,1131,3,838,419,0,1131,67,1,0,0,0,1132,1133,3,838,
        419,0,1133,69,1,0,0,0,1134,1135,3,14,7,0,1135,1136,3,30,15,0,1136,
        71,1,0,0,0,1137,1138,3,66,33,0,1138,1139,5,468,0,0,1139,1146,1,0,
        0,0,1140,1141,3,66,33,0,1141,1142,5,468,0,0,1142,1143,5,154,0,0,
        1143,1144,3,74,37,0,1144,1146,1,0,0,0,1145,1137,1,0,0,0,1145,1140,
        1,0,0,0,1146,73,1,0,0,0,1147,1151,3,830,415,0,1148,1149,5,476,0,
        0,1149,1151,3,830,415,0,1150,1147,1,0,0,0,1150,1148,1,0,0,0,1151,
        75,1,0,0,0,1152,1154,3,78,39,0,1153,1152,1,0,0,0,1154,1155,1,0,0,
        0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,77,1,0,0,0,1157,1158,
        5,103,0,0,1158,1159,5,141,0,0,1159,1160,5,166,0,0,1160,1161,5,154,
        0,0,1161,1162,3,80,40,0,1162,1163,3,86,43,0,1163,79,1,0,0,0,1164,
        1169,3,82,41,0,1165,1166,5,535,0,0,1166,1168,3,82,41,0,1167,1165,
        1,0,0,0,1168,1171,1,0,0,0,1169,1167,1,0,0,0,1169,1170,1,0,0,0,1170,
        81,1,0,0,0,1171,1169,1,0,0,0,1172,1177,5,374,0,0,1173,1177,5,478,
        0,0,1174,1177,3,74,37,0,1175,1177,3,66,33,0,1176,1172,1,0,0,0,1176,
        1173,1,0,0,0,1176,1174,1,0,0,0,1176,1175,1,0,0,0,1177,83,1,0,0,0,
        1178,1180,3,86,43,0,1179,1178,1,0,0,0,1180,1181,1,0,0,0,1181,1179,
        1,0,0,0,1181,1182,1,0,0,0,1182,85,1,0,0,0,1183,1192,3,112,56,0,1184,
        1192,3,116,58,0,1185,1192,3,118,59,0,1186,1192,3,88,44,0,1187,1192,
        3,128,64,0,1188,1192,3,106,53,0,1189,1192,3,94,47,0,1190,1192,3,
        96,48,0,1191,1183,1,0,0,0,1191,1184,1,0,0,0,1191,1185,1,0,0,0,1191,
        1186,1,0,0,0,1191,1187,1,0,0,0,1191,1188,1,0,0,0,1191,1189,1,0,0,
        0,1191,1190,1,0,0,0,1192,87,1,0,0,0,1193,1194,3,356,178,0,1194,1195,
        5,541,0,0,1195,1203,1,0,0,0,1196,1197,3,92,46,0,1197,1198,5,541,
        0,0,1198,1203,1,0,0,0,1199,1200,3,90,45,0,1200,1201,5,541,0,0,1201,
        1203,1,0,0,0,1202,1193,1,0,0,0,1202,1196,1,0,0,0,1202,1199,1,0,0,
        0,1203,89,1,0,0,0,1204,1205,5,420,0,0,1205,1206,3,514,257,0,1206,
        1208,3,464,232,0,1207,1209,3,366,183,0,1208,1207,1,0,0,0,1208,1209,
        1,0,0,0,1209,1211,1,0,0,0,1210,1212,3,724,362,0,1211,1210,1,0,0,
        0,1211,1212,1,0,0,0,1212,1214,1,0,0,0,1213,1215,3,516,258,0,1214,
        1213,1,0,0,0,1214,1215,1,0,0,0,1215,1217,1,0,0,0,1216,1218,3,518,
        259,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,91,1,0,0,0,1219,1222,
        5,185,0,0,1220,1223,3,478,239,0,1221,1223,3,480,240,0,1222,1220,
        1,0,0,0,1222,1221,1,0,0,0,1223,93,1,0,0,0,1224,1225,5,475,0,0,1225,
        1227,3,98,49,0,1226,1228,3,102,51,0,1227,1226,1,0,0,0,1227,1228,
        1,0,0,0,1228,1229,1,0,0,0,1229,1230,5,541,0,0,1230,95,1,0,0,0,1231,
        1233,5,472,0,0,1232,1234,3,98,49,0,1233,1232,1,0,0,0,1233,1234,1,
        0,0,0,1234,1236,1,0,0,0,1235,1237,3,102,51,0,1236,1235,1,0,0,0,1236,
        1237,1,0,0,0,1237,1238,1,0,0,0,1238,1239,5,541,0,0,1239,97,1,0,0,
        0,1240,1243,3,100,50,0,1241,1243,3,74,37,0,1242,1240,1,0,0,0,1242,
        1241,1,0,0,0,1243,99,1,0,0,0,1244,1245,3,838,419,0,1245,101,1,0,
        0,0,1246,1247,5,354,0,0,1247,1248,5,473,0,0,1248,1249,5,552,0,0,
        1249,1250,5,2,0,0,1250,1251,3,104,52,0,1251,1252,5,2,0,0,1252,103,
        1,0,0,0,1253,1254,3,584,292,0,1254,105,1,0,0,0,1255,1256,5,169,0,
        0,1256,1257,3,538,269,0,1257,1262,5,392,0,0,1258,1259,5,349,0,0,
        1259,1261,5,470,0,0,1260,1258,1,0,0,0,1261,1264,1,0,0,0,1262,1260,
        1,0,0,0,1262,1263,1,0,0,0,1263,1266,1,0,0,0,1264,1262,1,0,0,0,1265,
        1267,3,44,22,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,1269,1,0,
        0,0,1268,1270,3,76,38,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,
        1272,1,0,0,0,1271,1273,3,84,42,0,1272,1271,1,0,0,0,1272,1273,1,0,
        0,0,1273,1275,1,0,0,0,1274,1276,3,108,54,0,1275,1274,1,0,0,0,1275,
        1276,1,0,0,0,1276,1278,1,0,0,0,1277,1279,3,110,55,0,1278,1277,1,
        0,0,0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,1281,5,129,0,0,1281,
        1282,5,169,0,0,1282,1283,5,541,0,0,1283,107,1,0,0,0,1284,1285,5,
        469,0,0,1285,1286,3,538,269,0,1286,1291,5,392,0,0,1287,1288,5,349,
        0,0,1288,1290,5,470,0,0,1289,1287,1,0,0,0,1290,1293,1,0,0,0,1291,
        1289,1,0,0,0,1291,1292,1,0,0,0,1292,1295,1,0,0,0,1293,1291,1,0,0,
        0,1294,1296,3,44,22,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1298,
        1,0,0,0,1297,1299,3,76,38,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,
        1299,1301,1,0,0,0,1300,1302,3,84,42,0,1301,1300,1,0,0,0,1301,1302,
        1,0,0,0,1302,109,1,0,0,0,1303,1308,5,124,0,0,1304,1305,5,349,0,0,
        1305,1307,5,470,0,0,1306,1304,1,0,0,0,1307,1310,1,0,0,0,1308,1306,
        1,0,0,0,1308,1309,1,0,0,0,1309,1312,1,0,0,0,1310,1308,1,0,0,0,1311,
        1313,3,44,22,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,
        0,0,1314,1316,3,76,38,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,
        1318,1,0,0,0,1317,1319,3,84,42,0,1318,1317,1,0,0,0,1318,1319,1,0,
        0,0,1319,111,1,0,0,0,1320,1322,5,32,0,0,1321,1323,3,114,57,0,1322,
        1321,1,0,0,0,1322,1323,1,0,0,0,1323,1325,1,0,0,0,1324,1326,3,44,
        22,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1328,1,0,0,0,1327,
        1329,3,76,38,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,1331,1,0,
        0,0,1330,1332,3,84,42,0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,1332,
        1333,1,0,0,0,1333,1334,5,129,0,0,1334,1335,5,541,0,0,1335,113,1,
        0,0,0,1336,1337,5,349,0,0,1337,1338,5,470,0,0,1338,1341,1,0,0,0,
        1339,1340,5,467,0,0,1340,1342,5,405,0,0,1341,1339,1,0,0,0,1341,1342,
        1,0,0,0,1342,1351,1,0,0,0,1343,1344,5,467,0,0,1344,1345,5,405,0,
        0,1345,1348,1,0,0,0,1346,1347,5,349,0,0,1347,1349,5,470,0,0,1348,
        1346,1,0,0,0,1348,1349,1,0,0,0,1349,1351,1,0,0,0,1350,1336,1,0,0,
        0,1350,1343,1,0,0,0,1351,115,1,0,0,0,1352,1353,3,66,33,0,1353,1354,
        5,538,0,0,1354,1355,3,584,292,0,1355,1356,5,541,0,0,1356,1366,1,
        0,0,0,1357,1358,3,66,33,0,1358,1359,5,553,0,0,1359,1360,3,584,292,
        0,1360,1361,5,554,0,0,1361,1362,5,552,0,0,1362,1363,3,584,292,0,
        1363,1364,5,541,0,0,1364,1366,1,0,0,0,1365,1352,1,0,0,0,1365,1357,
        1,0,0,0,1366,117,1,0,0,0,1367,1368,3,66,33,0,1368,1369,5,552,0,0,
        1369,1370,3,346,173,0,1370,1371,5,541,0,0,1371,1378,1,0,0,0,1372,
        1373,3,66,33,0,1373,1374,5,552,0,0,1374,1375,3,120,60,0,1375,1376,
        5,541,0,0,1376,1378,1,0,0,0,1377,1367,1,0,0,0,1377,1372,1,0,0,0,
        1378,119,1,0,0,0,1379,1380,5,480,0,0,1380,1381,5,529,0,0,1381,1382,
        3,54,27,0,1382,1385,5,530,0,0,1383,1384,5,444,0,0,1384,1386,5,277,
        0,0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,1388,1,0,0,0,1387,1389,
        3,124,62,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,
        1390,1391,5,541,0,0,1391,121,1,0,0,0,1392,1393,3,742,371,0,1393,
        1394,5,522,0,0,1394,1396,1,0,0,0,1395,1392,1,0,0,0,1395,1396,1,0,
        0,0,1396,1397,1,0,0,0,1397,1398,3,838,419,0,1398,123,1,0,0,0,1399,
        1400,5,20,0,0,1400,1401,3,122,61,0,1401,1402,5,529,0,0,1402,1403,
        3,126,63,0,1403,1404,5,530,0,0,1404,125,1,0,0,0,1405,1410,3,28,14,
        0,1406,1407,5,535,0,0,1407,1409,3,28,14,0,1408,1406,1,0,0,0,1409,
        1412,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,0,1411,127,1,0,0,
        0,1412,1410,1,0,0,0,1413,1414,5,50,0,0,1414,1415,3,770,385,0,1415,
        1416,5,529,0,0,1416,1417,3,130,65,0,1417,1422,5,530,0,0,1418,1419,
        5,444,0,0,1419,1421,5,471,0,0,1420,1418,1,0,0,0,1421,1424,1,0,0,
        0,1422,1420,1,0,0,0,1422,1423,1,0,0,0,1423,1425,1,0,0,0,1424,1422,
        1,0,0,0,1425,1426,5,541,0,0,1426,129,1,0,0,0,1427,1432,3,132,66,
        0,1428,1429,5,535,0,0,1429,1431,3,132,66,0,1430,1428,1,0,0,0,1431,
        1434,1,0,0,0,1432,1430,1,0,0,0,1432,1433,1,0,0,0,1433,131,1,0,0,
        0,1434,1432,1,0,0,0,1435,1439,3,838,419,0,1436,1439,3,812,406,0,
        1437,1439,3,134,67,0,1438,1435,1,0,0,0,1438,1436,1,0,0,0,1438,1437,
        1,0,0,0,1439,133,1,0,0,0,1440,1441,3,838,419,0,1441,1442,5,3,0,0,
        1442,1443,3,838,419,0,1443,1449,1,0,0,0,1444,1445,3,838,419,0,1445,
        1446,5,3,0,0,1446,1447,3,812,406,0,1447,1449,1,0,0,0,1448,1440,1,
        0,0,0,1448,1444,1,0,0,0,1449,135,1,0,0,0,1450,1452,3,44,22,0,1451,
        1450,1,0,0,0,1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,1455,3,76,
        38,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,
        1457,3,84,42,0,1457,137,1,0,0,0,1458,1459,3,260,130,0,1459,139,1,
        0,0,0,1460,1461,3,838,419,0,1461,141,1,0,0,0,1462,1463,5,154,0,0,
        1463,1464,5,122,0,0,1464,1465,5,330,0,0,1465,143,1,0,0,0,1466,1467,
        7,5,0,0,1467,1480,5,24,0,0,1468,1481,3,146,73,0,1469,1470,5,529,
        0,0,1470,1475,3,146,73,0,1471,1472,5,535,0,0,1472,1474,3,146,73,
        0,1473,1471,1,0,0,0,1474,1477,1,0,0,0,1475,1473,1,0,0,0,1475,1476,
        1,0,0,0,1476,1478,1,0,0,0,1477,1475,1,0,0,0,1478,1479,5,530,0,0,
        1479,1481,1,0,0,0,1480,1468,1,0,0,0,1480,1469,1,0,0,0,1481,145,1,
        0,0,0,1482,1484,3,734,367,0,1483,1485,3,804,402,0,1484,1483,1,0,
        0,0,1484,1485,1,0,0,0,1485,147,1,0,0,0,1486,1492,5,234,0,0,1487,
        1488,5,212,0,0,1488,1493,3,584,292,0,1489,1490,5,123,0,0,1490,1491,
        5,412,0,0,1491,1493,3,804,402,0,1492,1487,1,0,0,0,1492,1489,1,0,
        0,0,1493,149,1,0,0,0,1494,1511,5,193,0,0,1495,1505,5,52,0,0,1496,
        1497,5,80,0,0,1497,1498,5,403,0,0,1498,1506,5,386,0,0,1499,1501,
        5,258,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1502,1,0,0,0,
        1502,1503,5,174,0,0,1503,1504,5,390,0,0,1504,1506,5,93,0,0,1505,
        1496,1,0,0,0,1505,1500,1,0,0,0,1505,1506,1,0,0,0,1506,1508,1,0,0,
        0,1507,1509,3,152,76,0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,
        1511,1,0,0,0,1510,1494,1,0,0,0,1510,1495,1,0,0,0,1511,151,1,0,0,
        0,1512,1514,5,156,0,0,1513,1512,1,0,0,0,1513,1514,1,0,0,0,1514,1515,
        1,0,0,0,1515,1516,5,136,0,0,1516,1517,5,192,0,0,1517,1518,3,788,
        394,0,1518,153,1,0,0,0,1519,1522,3,762,381,0,1520,1521,5,268,0,0,
        1521,1523,5,525,0,0,1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,1525,
        1,0,0,0,1524,1526,3,156,78,0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,
        1526,155,1,0,0,0,1527,1529,3,212,106,0,1528,1527,1,0,0,0,1528,1529,
        1,0,0,0,1529,1532,1,0,0,0,1530,1533,3,158,79,0,1531,1533,3,160,80,
        0,1532,1530,1,0,0,0,1532,1531,1,0,0,0,1533,1535,1,0,0,0,1534,1536,
        3,164,82,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1548,1,0,0,0,
        1537,1538,5,529,0,0,1538,1543,3,182,91,0,1539,1540,5,535,0,0,1540,
        1542,3,182,91,0,1541,1539,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,
        0,0,0,1543,1544,1,0,0,0,1544,1546,1,0,0,0,1545,1543,1,0,0,0,1546,
        1547,5,530,0,0,1547,1549,1,0,0,0,1548,1537,1,0,0,0,1548,1549,1,0,
        0,0,1549,1553,1,0,0,0,1550,1552,3,180,90,0,1551,1550,1,0,0,0,1552,
        1555,1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,157,1,0,0,
        0,1555,1553,1,0,0,0,1556,1560,7,6,0,0,1557,1561,5,265,0,0,1558,1561,
        3,256,128,0,1559,1561,3,162,81,0,1560,1557,1,0,0,0,1560,1558,1,0,
        0,0,1560,1559,1,0,0,0,1561,159,1,0,0,0,1562,1563,5,414,0,0,1563,
        1564,3,804,402,0,1564,161,1,0,0,0,1565,1566,5,390,0,0,1566,1567,
        5,266,0,0,1567,1570,3,804,402,0,1568,1569,5,258,0,0,1569,1571,5,
        260,0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,0,1571,163,1,0,0,0,1572,
        1573,5,143,0,0,1573,1574,5,237,0,0,1574,1575,3,584,292,0,1575,1576,
        5,201,0,0,1576,1577,5,198,0,0,1577,1578,5,425,0,0,1578,1579,7,7,
        0,0,1579,165,1,0,0,0,1580,1581,5,41,0,0,1581,1582,3,762,381,0,1582,
        1583,7,6,0,0,1583,1588,3,168,84,0,1584,1585,5,535,0,0,1585,1587,
        3,168,84,0,1586,1584,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,
        1588,1589,1,0,0,0,1589,1591,1,0,0,0,1590,1588,1,0,0,0,1591,1592,
        5,129,0,0,1592,167,1,0,0,0,1593,1596,3,170,85,0,1594,1596,3,172,
        86,0,1595,1593,1,0,0,0,1595,1594,1,0,0,0,1596,169,1,0,0,0,1597,1598,
        7,8,0,0,1598,1599,5,226,0,0,1599,1600,3,176,88,0,1600,171,1,0,0,
        0,1601,1605,7,9,0,0,1602,1606,3,174,87,0,1603,1606,3,176,88,0,1604,
        1606,3,178,89,0,1605,1602,1,0,0,0,1605,1603,1,0,0,0,1605,1604,1,
        0,0,0,1606,173,1,0,0,0,1607,1608,5,303,0,0,1608,1609,3,770,385,0,
        1609,1610,5,529,0,0,1610,1615,3,204,102,0,1611,1612,5,535,0,0,1612,
        1614,3,204,102,0,1613,1611,1,0,0,0,1614,1617,1,0,0,0,1615,1613,1,
        0,0,0,1615,1616,1,0,0,0,1616,1618,1,0,0,0,1617,1615,1,0,0,0,1618,
        1619,5,530,0,0,1619,1633,7,6,0,0,1620,1634,3,216,108,0,1621,1623,
        5,103,0,0,1622,1621,1,0,0,0,1622,1623,1,0,0,0,1623,1627,1,0,0,0,
        1624,1626,3,228,114,0,1625,1624,1,0,0,0,1626,1629,1,0,0,0,1627,1625,
        1,0,0,0,1627,1628,1,0,0,0,1628,1630,1,0,0,0,1629,1627,1,0,0,0,1630,
        1631,3,302,151,0,1631,1632,5,541,0,0,1632,1634,1,0,0,0,1633,1620,
        1,0,0,0,1633,1622,1,0,0,0,1634,175,1,0,0,0,1635,1636,5,159,0,0,1636,
        1648,3,768,384,0,1637,1638,5,529,0,0,1638,1643,3,204,102,0,1639,
        1640,5,535,0,0,1640,1642,3,204,102,0,1641,1639,1,0,0,0,1642,1645,
        1,0,0,0,1643,1641,1,0,0,0,1643,1644,1,0,0,0,1644,1646,1,0,0,0,1645,
        1643,1,0,0,0,1646,1647,5,530,0,0,1647,1649,1,0,0,0,1648,1637,1,0,
        0,0,1648,1649,1,0,0,0,1649,1650,1,0,0,0,1650,1651,5,322,0,0,1651,
        1652,3,804,402,0,1652,1666,7,6,0,0,1653,1667,3,216,108,0,1654,1656,
        5,103,0,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,1660,1,0,0,0,
        1657,1659,3,228,114,0,1658,1657,1,0,0,0,1659,1662,1,0,0,0,1660,1658,
        1,0,0,0,1660,1661,1,0,0,0,1661,1663,1,0,0,0,1662,1660,1,0,0,0,1663,
        1664,3,302,151,0,1664,1665,5,541,0,0,1665,1667,1,0,0,0,1666,1653,
        1,0,0,0,1666,1655,1,0,0,0,1667,177,1,0,0,0,1668,1670,5,148,0,0,1669,
        1668,1,0,0,0,1669,1670,1,0,0,0,1670,1672,1,0,0,0,1671,1673,5,186,
        0,0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,1674,1,0,0,0,1674,1675,
        5,76,0,0,1675,1676,5,159,0,0,1676,1694,3,804,402,0,1677,1678,5,529,
        0,0,1678,1679,5,347,0,0,1679,1680,5,172,0,0,1680,1681,5,279,0,0,
        1681,1682,3,804,402,0,1682,1683,5,535,0,0,1683,1684,1,0,0,0,1684,
        1689,3,204,102,0,1685,1686,5,535,0,0,1686,1688,3,204,102,0,1687,
        1685,1,0,0,0,1688,1691,1,0,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,
        0,1690,1692,1,0,0,0,1691,1689,1,0,0,0,1692,1693,5,530,0,0,1693,1695,
        1,0,0,0,1694,1677,1,0,0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,0,1696,
        1697,5,322,0,0,1697,1698,5,347,0,0,1698,1699,5,20,0,0,1699,1700,
        5,320,0,0,1700,1714,7,6,0,0,1701,1715,3,216,108,0,1702,1704,5,103,
        0,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1708,1,0,0,0,1705,1707,
        3,228,114,0,1706,1705,1,0,0,0,1707,1710,1,0,0,0,1708,1706,1,0,0,
        0,1708,1709,1,0,0,0,1709,1711,1,0,0,0,1710,1708,1,0,0,0,1711,1712,
        3,302,151,0,1712,1713,5,541,0,0,1713,1715,1,0,0,0,1714,1701,1,0,
        0,0,1714,1703,1,0,0,0,1715,179,1,0,0,0,1716,1718,5,258,0,0,1717,
        1716,1,0,0,0,1717,1718,1,0,0,0,1718,1719,1,0,0,0,1719,1720,7,10,
        0,0,1720,181,1,0,0,0,1721,1722,3,836,418,0,1722,1724,3,804,402,0,
        1723,1725,3,184,92,0,1724,1723,1,0,0,0,1724,1725,1,0,0,0,1725,1728,
        1,0,0,0,1726,1728,3,186,93,0,1727,1721,1,0,0,0,1727,1726,1,0,0,0,
        1728,183,1,0,0,0,1729,1730,5,143,0,0,1730,1731,5,237,0,0,1731,1732,
        3,584,292,0,1732,185,1,0,0,0,1733,1735,3,180,90,0,1734,1733,1,0,
        0,0,1734,1735,1,0,0,0,1735,1737,1,0,0,0,1736,1738,3,188,94,0,1737,
        1736,1,0,0,0,1738,1739,1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,
        0,1740,1743,1,0,0,0,1741,1742,5,535,0,0,1742,1744,3,200,100,0,1743,
        1741,1,0,0,0,1743,1744,1,0,0,0,1744,187,1,0,0,0,1745,1749,3,190,
        95,0,1746,1749,3,196,98,0,1747,1749,3,198,99,0,1748,1745,1,0,0,0,
        1748,1746,1,0,0,0,1748,1747,1,0,0,0,1749,189,1,0,0,0,1750,1753,7,
        9,0,0,1751,1754,3,192,96,0,1752,1754,3,194,97,0,1753,1751,1,0,0,
        0,1753,1752,1,0,0,0,1754,191,1,0,0,0,1755,1756,5,303,0,0,1756,1757,
        3,770,385,0,1757,1758,5,529,0,0,1758,1763,3,204,102,0,1759,1760,
        5,535,0,0,1760,1762,3,204,102,0,1761,1759,1,0,0,0,1762,1765,1,0,
        0,0,1763,1761,1,0,0,0,1763,1764,1,0,0,0,1764,1766,1,0,0,0,1765,1763,
        1,0,0,0,1766,1769,5,530,0,0,1767,1768,7,6,0,0,1768,1770,3,216,108,
        0,1769,1767,1,0,0,0,1769,1770,1,0,0,0,1770,193,1,0,0,0,1771,1772,
        5,159,0,0,1772,1784,3,768,384,0,1773,1774,5,529,0,0,1774,1779,3,
        204,102,0,1775,1776,5,535,0,0,1776,1778,3,204,102,0,1777,1775,1,
        0,0,0,1778,1781,1,0,0,0,1779,1777,1,0,0,0,1779,1780,1,0,0,0,1780,
        1782,1,0,0,0,1781,1779,1,0,0,0,1782,1783,5,530,0,0,1783,1785,1,0,
        0,0,1784,1773,1,0,0,0,1784,1785,1,0,0,0,1785,1786,1,0,0,0,1786,1791,
        5,322,0,0,1787,1792,3,804,402,0,1788,1789,5,347,0,0,1789,1790,5,
        20,0,0,1790,1792,5,320,0,0,1791,1787,1,0,0,0,1791,1788,1,0,0,0,1792,
        1801,1,0,0,0,1793,1794,7,6,0,0,1794,1802,3,216,108,0,1795,1797,5,
        143,0,0,1796,1798,5,431,0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,
        1798,1799,1,0,0,0,1799,1800,5,237,0,0,1800,1802,3,584,292,0,1801,
        1793,1,0,0,0,1801,1795,1,0,0,0,1801,1802,1,0,0,0,1802,195,1,0,0,
        0,1803,1805,5,148,0,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,1805,1807,
        1,0,0,0,1806,1808,5,186,0,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,
        1808,1809,1,0,0,0,1809,1810,5,76,0,0,1810,1811,5,159,0,0,1811,1829,
        3,804,402,0,1812,1813,5,529,0,0,1813,1814,5,347,0,0,1814,1815,5,
        172,0,0,1815,1816,5,279,0,0,1816,1817,3,804,402,0,1817,1818,5,535,
        0,0,1818,1819,1,0,0,0,1819,1824,3,204,102,0,1820,1821,5,535,0,0,
        1821,1823,3,204,102,0,1822,1820,1,0,0,0,1823,1826,1,0,0,0,1824,1822,
        1,0,0,0,1824,1825,1,0,0,0,1825,1827,1,0,0,0,1826,1824,1,0,0,0,1827,
        1828,5,530,0,0,1828,1830,1,0,0,0,1829,1812,1,0,0,0,1829,1830,1,0,
        0,0,1830,1831,1,0,0,0,1831,1832,5,322,0,0,1832,1833,5,347,0,0,1833,
        1834,5,20,0,0,1834,1837,5,320,0,0,1835,1836,7,6,0,0,1836,1838,3,
        216,108,0,1837,1835,1,0,0,0,1837,1838,1,0,0,0,1838,197,1,0,0,0,1839,
        1840,7,8,0,0,1840,1841,5,226,0,0,1841,1842,3,194,97,0,1842,199,1,
        0,0,0,1843,1844,5,298,0,0,1844,1845,5,319,0,0,1845,1846,5,529,0,
        0,1846,1851,3,202,101,0,1847,1848,5,535,0,0,1848,1850,3,202,101,
        0,1849,1847,1,0,0,0,1850,1853,1,0,0,0,1851,1849,1,0,0,0,1851,1852,
        1,0,0,0,1852,1854,1,0,0,0,1853,1851,1,0,0,0,1854,1855,5,530,0,0,
        1855,201,1,0,0,0,1856,1859,3,836,418,0,1857,1859,5,106,0,0,1858,
        1856,1,0,0,0,1858,1857,1,0,0,0,1859,203,1,0,0,0,1860,1861,3,140,
        70,0,1861,1862,3,804,402,0,1862,205,1,0,0,0,1863,1864,5,85,0,0,1864,
        1865,5,348,0,0,1865,1870,3,764,382,0,1866,1869,3,210,105,0,1867,
        1869,3,208,104,0,1868,1866,1,0,0,0,1868,1867,1,0,0,0,1869,1872,1,
        0,0,0,1870,1868,1,0,0,0,1870,1871,1,0,0,0,1871,1873,1,0,0,0,1872,
        1870,1,0,0,0,1873,1874,5,541,0,0,1874,207,1,0,0,0,1875,1876,5,175,
        0,0,1876,1877,5,46,0,0,1877,1892,5,523,0,0,1878,1879,5,224,0,0,1879,
        1892,5,523,0,0,1880,1892,5,253,0,0,1881,1882,5,230,0,0,1882,1892,
        5,523,0,0,1883,1892,5,254,0,0,1884,1892,5,92,0,0,1885,1892,5,251,
        0,0,1886,1887,5,49,0,0,1887,1892,5,523,0,0,1888,1892,5,249,0,0,1889,
        1892,5,276,0,0,1890,1892,5,256,0,0,1891,1875,1,0,0,0,1891,1878,1,
        0,0,0,1891,1880,1,0,0,0,1891,1881,1,0,0,0,1891,1883,1,0,0,0,1891,
        1884,1,0,0,0,1891,1885,1,0,0,0,1891,1886,1,0,0,0,1891,1888,1,0,0,
        0,1891,1889,1,0,0,0,1891,1890,1,0,0,0,1892,209,1,0,0,0,1893,1894,
        5,377,0,0,1894,1895,5,444,0,0,1895,1896,5,523,0,0,1896,211,1,0,0,
        0,1897,1898,5,26,0,0,1898,1899,7,11,0,0,1899,213,1,0,0,0,1900,1901,
        3,836,418,0,1901,1902,5,552,0,0,1902,1903,3,584,292,0,1903,215,1,
        0,0,0,1904,1907,5,201,0,0,1905,1908,3,218,109,0,1906,1908,3,220,
        110,0,1907,1905,1,0,0,0,1907,1906,1,0,0,0,1908,217,1,0,0,0,1909,
        1910,5,198,0,0,1910,1911,5,237,0,0,1911,1912,5,525,0,0,1912,219,
        1,0,0,0,1913,1916,5,48,0,0,1914,1915,5,237,0,0,1915,1917,5,525,0,
        0,1916,1914,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1919,
        5,207,0,0,1919,1921,3,836,418,0,1920,1922,3,222,111,0,1921,1920,
        1,0,0,0,1921,1922,1,0,0,0,1922,1925,1,0,0,0,1923,1924,5,444,0,0,
        1924,1926,5,78,0,0,1925,1923,1,0,0,0,1925,1926,1,0,0,0,1926,1928,
        1,0,0,0,1927,1929,3,224,112,0,1928,1927,1,0,0,0,1928,1929,1,0,0,
        0,1929,221,1,0,0,0,1930,1931,5,11,0,0,1931,1932,5,172,0,0,1932,1933,
        5,529,0,0,1933,1938,3,584,292,0,1934,1935,5,535,0,0,1935,1937,3,
        584,292,0,1936,1934,1,0,0,0,1937,1940,1,0,0,0,1938,1936,1,0,0,0,
        1938,1939,1,0,0,0,1939,1941,1,0,0,0,1940,1938,1,0,0,0,1941,1942,
        5,530,0,0,1942,223,1,0,0,0,1943,1944,5,285,0,0,1944,1956,5,529,0,
        0,1945,1950,3,584,292,0,1946,1947,5,535,0,0,1947,1949,3,584,292,
        0,1948,1946,1,0,0,0,1949,1952,1,0,0,0,1950,1948,1,0,0,0,1950,1951,
        1,0,0,0,1951,1957,1,0,0,0,1952,1950,1,0,0,0,1953,1954,5,522,0,0,
        1954,1955,5,522,0,0,1955,1957,5,522,0,0,1956,1945,1,0,0,0,1956,1953,
        1,0,0,0,1957,1958,1,0,0,0,1958,1959,5,530,0,0,1959,225,1,0,0,0,1960,
        1961,7,4,0,0,1961,1962,3,584,292,0,1962,227,1,0,0,0,1963,1972,3,
        230,115,0,1964,1972,3,232,116,0,1965,1972,3,234,117,0,1966,1972,
        3,238,119,0,1967,1972,3,240,120,0,1968,1972,3,242,121,0,1969,1972,
        3,250,125,0,1970,1972,3,12,6,0,1971,1963,1,0,0,0,1971,1964,1,0,0,
        0,1971,1965,1,0,0,0,1971,1966,1,0,0,0,1971,1967,1,0,0,0,1971,1968,
        1,0,0,0,1971,1969,1,0,0,0,1971,1970,1,0,0,0,1972,229,1,0,0,0,1973,
        1975,3,66,33,0,1974,1976,5,73,0,0,1975,1974,1,0,0,0,1975,1976,1,
        0,0,0,1976,1977,1,0,0,0,1977,1980,3,804,402,0,1978,1979,5,258,0,
        0,1979,1981,5,260,0,0,1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,1983,
        1,0,0,0,1982,1984,3,226,113,0,1983,1982,1,0,0,0,1983,1984,1,0,0,
        0,1984,1985,1,0,0,0,1985,1986,5,541,0,0,1986,231,1,0,0,0,1987,1988,
        5,387,0,0,1988,1989,3,762,381,0,1989,1990,5,195,0,0,1990,1996,3,
        804,402,0,1991,1992,5,305,0,0,1992,1993,3,584,292,0,1993,1994,5,
        4,0,0,1994,1995,3,584,292,0,1995,1997,1,0,0,0,1996,1991,1,0,0,0,
        1996,1997,1,0,0,0,1997,2000,1,0,0,0,1998,1999,5,258,0,0,1999,2001,
        5,260,0,0,2000,1998,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,
        2002,2003,5,541,0,0,2003,233,1,0,0,0,2004,2005,5,90,0,0,2005,2017,
        3,68,34,0,2006,2007,5,529,0,0,2007,2012,3,236,118,0,2008,2009,5,
        535,0,0,2009,2011,3,236,118,0,2010,2008,1,0,0,0,2011,2014,1,0,0,
        0,2012,2010,1,0,0,0,2012,2013,1,0,0,0,2013,2015,1,0,0,0,2014,2012,
        1,0,0,0,2015,2016,5,530,0,0,2016,2018,1,0,0,0,2017,2006,1,0,0,0,
        2017,2018,1,0,0,0,2018,2021,1,0,0,0,2019,2020,5,322,0,0,2020,2022,
        3,804,402,0,2021,2019,1,0,0,0,2021,2022,1,0,0,0,2022,2025,1,0,0,
        0,2023,2024,5,195,0,0,2024,2026,3,346,173,0,2025,2023,1,0,0,0,2025,
        2026,1,0,0,0,2026,2027,1,0,0,0,2027,2028,5,541,0,0,2028,235,1,0,
        0,0,2029,2034,3,140,70,0,2030,2032,5,172,0,0,2031,2030,1,0,0,0,2031,
        2032,1,0,0,0,2032,2033,1,0,0,0,2033,2035,3,804,402,0,2034,2031,1,
        0,0,0,2034,2035,1,0,0,0,2035,2037,1,0,0,0,2036,2038,3,226,113,0,
        2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,237,1,0,0,0,2039,2040,3,
        766,383,0,2040,2041,5,134,0,0,2041,2042,5,541,0,0,2042,239,1,0,0,
        0,2043,2074,5,298,0,0,2044,2075,5,351,0,0,2045,2075,5,29,0,0,2046,
        2047,5,135,0,0,2047,2048,5,529,0,0,2048,2049,3,766,383,0,2049,2050,
        5,535,0,0,2050,2051,3,832,416,0,2051,2052,5,530,0,0,2052,2075,1,
        0,0,0,2053,2054,5,182,0,0,2054,2055,5,529,0,0,2055,2056,3,836,418,
        0,2056,2057,5,535,0,0,2057,2058,3,584,292,0,2058,2059,5,530,0,0,
        2059,2075,1,0,0,0,2060,2061,5,319,0,0,2061,2064,5,529,0,0,2062,2065,
        3,836,418,0,2063,2065,5,106,0,0,2064,2062,1,0,0,0,2064,2063,1,0,
        0,0,2065,2068,1,0,0,0,2066,2067,5,535,0,0,2067,2069,3,836,418,0,
        2068,2066,1,0,0,0,2069,2070,1,0,0,0,2070,2068,1,0,0,0,2070,2071,
        1,0,0,0,2071,2072,1,0,0,0,2072,2073,5,530,0,0,2073,2075,1,0,0,0,
        2074,2044,1,0,0,0,2074,2045,1,0,0,0,2074,2046,1,0,0,0,2074,2053,
        1,0,0,0,2074,2060,1,0,0,0,2075,2076,1,0,0,0,2076,2077,5,541,0,0,
        2077,241,1,0,0,0,2078,2081,3,244,122,0,2079,2081,3,248,124,0,2080,
        2078,1,0,0,0,2080,2079,1,0,0,0,2081,243,1,0,0,0,2082,2083,5,412,
        0,0,2083,2084,3,762,381,0,2084,2103,5,195,0,0,2085,2086,5,310,0,
        0,2086,2087,5,529,0,0,2087,2092,3,246,123,0,2088,2089,5,535,0,0,
        2089,2091,3,246,123,0,2090,2088,1,0,0,0,2091,2094,1,0,0,0,2092,2090,
        1,0,0,0,2092,2093,1,0,0,0,2093,2095,1,0,0,0,2094,2092,1,0,0,0,2095,
        2096,5,530,0,0,2096,2104,1,0,0,0,2097,2098,5,311,0,0,2098,2101,5,
        90,0,0,2099,2100,5,322,0,0,2100,2102,3,804,402,0,2101,2099,1,0,0,
        0,2101,2102,1,0,0,0,2102,2104,1,0,0,0,2103,2085,1,0,0,0,2103,2097,
        1,0,0,0,2104,2105,1,0,0,0,2105,2106,5,541,0,0,2106,245,1,0,0,0,2107,
        2109,3,28,14,0,2108,2110,3,804,402,0,2109,2108,1,0,0,0,2109,2110,
        1,0,0,0,2110,2113,1,0,0,0,2111,2112,5,258,0,0,2112,2114,5,260,0,
        0,2113,2111,1,0,0,0,2113,2114,1,0,0,0,2114,2116,1,0,0,0,2115,2117,
        3,226,113,0,2116,2115,1,0,0,0,2116,2117,1,0,0,0,2117,247,1,0,0,0,
        2118,2119,3,780,390,0,2119,2120,3,762,381,0,2120,2121,7,12,0,0,2121,
        2122,5,541,0,0,2122,249,1,0,0,0,2123,2126,3,252,126,0,2124,2126,
        3,258,129,0,2125,2123,1,0,0,0,2125,2124,1,0,0,0,2126,2127,1,0,0,
        0,2127,2128,5,541,0,0,2128,251,1,0,0,0,2129,2130,5,412,0,0,2130,
        2131,3,762,381,0,2131,2143,5,195,0,0,2132,2133,5,390,0,0,2133,2134,
        5,266,0,0,2134,2136,3,804,402,0,2135,2137,3,254,127,0,2136,2135,
        1,0,0,0,2136,2137,1,0,0,0,2137,2140,1,0,0,0,2138,2139,5,258,0,0,
        2139,2141,5,260,0,0,2140,2138,1,0,0,0,2140,2141,1,0,0,0,2141,2144,
        1,0,0,0,2142,2144,3,256,128,0,2143,2132,1,0,0,0,2143,2142,1,0,0,
        0,2144,253,1,0,0,0,2145,2148,5,178,0,0,2146,2148,5,177,0,0,2147,
        2145,1,0,0,0,2147,2146,1,0,0,0,2148,2149,1,0,0,0,2149,2150,5,46,
        0,0,2150,2151,3,804,402,0,2151,255,1,0,0,0,2152,2156,5,432,0,0,2153,
        2154,5,433,0,0,2154,2156,5,19,0,0,2155,2152,1,0,0,0,2155,2153,1,
        0,0,0,2156,2157,1,0,0,0,2157,2158,5,529,0,0,2158,2159,3,584,292,
        0,2159,2160,5,530,0,0,2160,2161,5,266,0,0,2161,2164,3,804,402,0,
        2162,2163,5,258,0,0,2163,2165,5,260,0,0,2164,2162,1,0,0,0,2164,2165,
        1,0,0,0,2165,257,1,0,0,0,2166,2167,3,740,370,0,2167,2168,3,804,402,
        0,2168,259,1,0,0,0,2169,2170,3,264,132,0,2170,2171,7,13,0,0,2171,
        2174,1,0,0,0,2172,2174,3,262,131,0,2173,2169,1,0,0,0,2173,2172,1,
        0,0,0,2174,2175,1,0,0,0,2175,2173,1,0,0,0,2175,2176,1,0,0,0,2176,
        261,1,0,0,0,2177,2178,5,543,0,0,2178,2179,5,543,0,0,2179,2180,3,
        760,380,0,2180,2181,5,549,0,0,2181,2182,5,549,0,0,2182,263,1,0,0,
        0,2183,2184,5,85,0,0,2184,2207,3,0,0,0,2185,2186,5,14,0,0,2186,2207,
        3,0,0,0,2187,2188,5,161,0,0,2188,2207,3,0,0,0,2189,2190,5,411,0,
        0,2190,2207,3,0,0,0,2191,2207,3,302,151,0,2192,2207,3,310,155,0,
        2193,2207,3,266,133,0,2194,2207,3,268,134,0,2195,2207,3,270,135,
        0,2196,2207,3,272,136,0,2197,2207,3,274,137,0,2198,2207,3,280,140,
        0,2199,2207,3,284,142,0,2200,2207,3,294,147,0,2201,2207,3,296,148,
        0,2202,2207,3,298,149,0,2203,2207,3,638,319,0,2204,2207,3,312,156,
        0,2205,2207,3,300,150,0,2206,2183,1,0,0,0,2206,2185,1,0,0,0,2206,
        2187,1,0,0,0,2206,2189,1,0,0,0,2206,2191,1,0,0,0,2206,2192,1,0,0,
        0,2206,2193,1,0,0,0,2206,2194,1,0,0,0,2206,2195,1,0,0,0,2206,2196,
        1,0,0,0,2206,2197,1,0,0,0,2206,2198,1,0,0,0,2206,2199,1,0,0,0,2206,
        2200,1,0,0,0,2206,2201,1,0,0,0,2206,2202,1,0,0,0,2206,2203,1,0,0,
        0,2206,2204,1,0,0,0,2206,2205,1,0,0,0,2207,265,1,0,0,0,2208,2211,
        3,822,411,0,2209,2211,3,812,406,0,2210,2208,1,0,0,0,2210,2209,1,
        0,0,0,2211,2212,1,0,0,0,2212,2213,5,538,0,0,2213,2214,3,584,292,
        0,2214,267,1,0,0,0,2215,2217,5,79,0,0,2216,2218,3,760,380,0,2217,
        2216,1,0,0,0,2217,2218,1,0,0,0,2218,2221,1,0,0,0,2219,2220,5,440,
        0,0,2220,2222,3,538,269,0,2221,2219,1,0,0,0,2221,2222,1,0,0,0,2222,
        269,1,0,0,0,2223,2225,5,141,0,0,2224,2226,3,760,380,0,2225,2224,
        1,0,0,0,2225,2226,1,0,0,0,2226,2229,1,0,0,0,2227,2228,5,440,0,0,
        2228,2230,3,538,269,0,2229,2227,1,0,0,0,2229,2230,1,0,0,0,2230,271,
        1,0,0,0,2231,2232,5,160,0,0,2232,2233,3,760,380,0,2233,273,1,0,0,
        0,2234,2235,5,169,0,0,2235,2236,3,538,269,0,2236,2237,5,392,0,0,
        2237,2241,3,260,130,0,2238,2240,3,276,138,0,2239,2238,1,0,0,0,2240,
        2243,1,0,0,0,2241,2239,1,0,0,0,2241,2242,1,0,0,0,2242,2245,1,0,0,
        0,2243,2241,1,0,0,0,2244,2246,3,278,139,0,2245,2244,1,0,0,0,2245,
        2246,1,0,0,0,2246,2247,1,0,0,0,2247,2248,5,129,0,0,2248,2249,5,169,
        0,0,2249,275,1,0,0,0,2250,2251,5,125,0,0,2251,2252,3,538,269,0,2252,
        2253,5,392,0,0,2253,2254,3,260,130,0,2254,277,1,0,0,0,2255,2256,
        5,124,0,0,2256,2257,3,260,130,0,2257,279,1,0,0,0,2258,2260,3,760,
        380,0,2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,2265,1,0,0,0,2261,
        2262,5,443,0,0,2262,2266,3,538,269,0,2263,2264,5,154,0,0,2264,2266,
        3,282,141,0,2265,2261,1,0,0,0,2265,2263,1,0,0,0,2265,2266,1,0,0,
        0,2266,2267,1,0,0,0,2267,2268,5,220,0,0,2268,2269,3,260,130,0,2269,
        2270,5,129,0,0,2270,2272,5,220,0,0,2271,2273,3,760,380,0,2272,2271,
        1,0,0,0,2272,2273,1,0,0,0,2273,281,1,0,0,0,2274,2275,3,776,388,0,
        2275,2277,5,172,0,0,2276,2278,5,325,0,0,2277,2276,1,0,0,0,2277,2278,
        1,0,0,0,2278,2279,1,0,0,0,2279,2280,3,290,145,0,2280,2281,5,4,0,
        0,2281,2282,3,292,146,0,2282,2296,1,0,0,0,2283,2284,3,780,390,0,
        2284,2293,5,172,0,0,2285,2287,3,68,34,0,2286,2288,3,536,268,0,2287,
        2286,1,0,0,0,2287,2288,1,0,0,0,2288,2294,1,0,0,0,2289,2290,5,529,
        0,0,2290,2291,3,346,173,0,2291,2292,5,530,0,0,2292,2294,1,0,0,0,
        2293,2285,1,0,0,0,2293,2289,1,0,0,0,2294,2296,1,0,0,0,2295,2274,
        1,0,0,0,2295,2283,1,0,0,0,2296,283,1,0,0,0,2297,2298,5,155,0,0,2298,
        2299,3,776,388,0,2299,2300,5,172,0,0,2300,2301,3,286,143,0,2301,
        2304,3,312,156,0,2302,2303,5,335,0,0,2303,2305,5,136,0,0,2304,2302,
        1,0,0,0,2304,2305,1,0,0,0,2305,285,1,0,0,0,2306,2307,3,290,145,0,
        2307,2308,5,4,0,0,2308,2309,3,292,146,0,2309,2320,1,0,0,0,2310,2311,
        5,180,0,0,2311,2312,5,266,0,0,2312,2314,3,782,391,0,2313,2315,3,
        288,144,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,2320,1,0,0,0,
        2316,2317,5,428,0,0,2317,2318,5,266,0,0,2318,2320,3,776,388,0,2319,
        2306,1,0,0,0,2319,2310,1,0,0,0,2319,2316,1,0,0,0,2320,287,1,0,0,
        0,2321,2322,5,33,0,0,2322,2323,3,290,145,0,2323,2324,5,17,0,0,2324,
        2325,3,292,146,0,2325,289,1,0,0,0,2326,2327,3,612,306,0,2327,291,
        1,0,0,0,2328,2329,3,612,306,0,2329,293,1,0,0,0,2330,2331,5,260,0,
        0,2331,295,1,0,0,0,2332,2334,5,304,0,0,2333,2335,3,766,383,0,2334,
        2333,1,0,0,0,2334,2335,1,0,0,0,2335,297,1,0,0,0,2336,2338,5,322,
        0,0,2337,2339,3,538,269,0,2338,2337,1,0,0,0,2338,2339,1,0,0,0,2339,
        299,1,0,0,0,2340,2342,5,50,0,0,2341,2340,1,0,0,0,2341,2342,1,0,0,
        0,2342,2343,1,0,0,0,2343,2345,3,744,372,0,2344,2346,3,794,397,0,
        2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,301,1,0,0,0,2347,2348,5,
        32,0,0,2348,2350,3,260,130,0,2349,2351,3,304,152,0,2350,2349,1,0,
        0,0,2350,2351,1,0,0,0,2351,2352,1,0,0,0,2352,2354,5,129,0,0,2353,
        2355,3,760,380,0,2354,2353,1,0,0,0,2354,2355,1,0,0,0,2355,303,1,
        0,0,0,2356,2358,5,134,0,0,2357,2359,3,306,153,0,2358,2357,1,0,0,
        0,2359,2360,1,0,0,0,2360,2358,1,0,0,0,2360,2361,1,0,0,0,2361,305,
        1,0,0,0,2362,2363,5,440,0,0,2363,2368,3,766,383,0,2364,2365,5,274,
        0,0,2365,2367,3,766,383,0,2366,2364,1,0,0,0,2367,2370,1,0,0,0,2368,
        2366,1,0,0,0,2368,2369,1,0,0,0,2369,2371,1,0,0,0,2370,2368,1,0,0,
        0,2371,2372,5,392,0,0,2372,2373,3,260,130,0,2373,307,1,0,0,0,2374,
        2376,5,103,0,0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2378,1,0,
        0,0,2377,2379,3,228,114,0,2378,2377,1,0,0,0,2379,2380,1,0,0,0,2380,
        2378,1,0,0,0,2380,2381,1,0,0,0,2381,2383,1,0,0,0,2382,2375,1,0,0,
        0,2382,2383,1,0,0,0,2383,2384,1,0,0,0,2384,2385,3,302,151,0,2385,
        309,1,0,0,0,2386,2388,5,103,0,0,2387,2386,1,0,0,0,2387,2388,1,0,
        0,0,2388,2390,1,0,0,0,2389,2391,3,228,114,0,2390,2389,1,0,0,0,2391,
        2392,1,0,0,0,2392,2390,1,0,0,0,2392,2393,1,0,0,0,2393,2394,1,0,0,
        0,2394,2395,3,302,151,0,2395,311,1,0,0,0,2396,2401,3,314,157,0,2397,
        2401,3,318,159,0,2398,2401,3,320,160,0,2399,2401,3,330,165,0,2400,
        2396,1,0,0,0,2400,2397,1,0,0,0,2400,2398,1,0,0,0,2400,2399,1,0,0,
        0,2401,313,1,0,0,0,2402,2403,5,139,0,0,2403,2404,5,171,0,0,2404,
        2414,3,584,292,0,2405,2407,3,728,364,0,2406,2408,3,674,337,0,2407,
        2406,1,0,0,0,2407,2408,1,0,0,0,2408,2415,1,0,0,0,2409,2411,3,674,
        337,0,2410,2412,3,316,158,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,
        2412,2415,1,0,0,0,2413,2415,3,316,158,0,2414,2405,1,0,0,0,2414,2409,
        1,0,0,0,2414,2413,1,0,0,0,2414,2415,1,0,0,0,2415,315,1,0,0,0,2416,
        2417,7,14,0,0,2417,2418,3,728,364,0,2418,317,1,0,0,0,2419,2429,3,
        494,247,0,2420,2429,3,506,253,0,2421,2429,3,472,236,0,2422,2429,
        3,474,237,0,2423,2429,3,346,173,0,2424,2429,3,462,231,0,2425,2429,
        3,468,234,0,2426,2429,3,470,235,0,2427,2429,3,344,172,0,2428,2419,
        1,0,0,0,2428,2420,1,0,0,0,2428,2421,1,0,0,0,2428,2422,1,0,0,0,2428,
        2423,1,0,0,0,2428,2424,1,0,0,0,2428,2425,1,0,0,0,2428,2426,1,0,0,
        0,2428,2427,1,0,0,0,2429,319,1,0,0,0,2430,2435,3,322,161,0,2431,
        2435,3,324,162,0,2432,2435,3,326,163,0,2433,2435,3,328,164,0,2434,
        2430,1,0,0,0,2434,2431,1,0,0,0,2434,2432,1,0,0,0,2434,2433,1,0,0,
        0,2435,321,1,0,0,0,2436,2437,5,61,0,0,2437,2438,3,68,34,0,2438,323,
        1,0,0,0,2439,2440,5,272,0,0,2440,2442,3,68,34,0,2441,2443,3,536,
        268,0,2442,2441,1,0,0,0,2442,2443,1,0,0,0,2443,325,1,0,0,0,2444,
        2445,5,147,0,0,2445,2466,3,68,34,0,2446,2447,5,192,0,0,2447,2452,
        3,66,33,0,2448,2449,5,535,0,0,2449,2451,3,66,33,0,2450,2448,1,0,
        0,0,2451,2454,1,0,0,0,2452,2450,1,0,0,0,2452,2453,1,0,0,0,2453,2467,
        1,0,0,0,2454,2452,1,0,0,0,2455,2456,5,45,0,0,2456,2457,5,63,0,0,
        2457,2458,5,192,0,0,2458,2463,3,66,33,0,2459,2460,5,535,0,0,2460,
        2462,3,66,33,0,2461,2459,1,0,0,0,2462,2465,1,0,0,0,2463,2461,1,0,
        0,0,2463,2464,1,0,0,0,2464,2467,1,0,0,0,2465,2463,1,0,0,0,2466,2446,
        1,0,0,0,2466,2455,1,0,0,0,2467,327,1,0,0,0,2468,2469,5,272,0,0,2469,
        2470,3,66,33,0,2470,2473,5,154,0,0,2471,2474,3,346,173,0,2472,2474,
        3,584,292,0,2473,2471,1,0,0,0,2473,2472,1,0,0,0,2474,2476,1,0,0,
        0,2475,2477,3,674,337,0,2476,2475,1,0,0,0,2476,2477,1,0,0,0,2477,
        329,1,0,0,0,2478,2484,3,332,166,0,2479,2484,3,334,167,0,2480,2484,
        3,336,168,0,2481,2484,3,340,170,0,2482,2484,3,342,171,0,2483,2478,
        1,0,0,0,2483,2479,1,0,0,0,2483,2480,1,0,0,0,2483,2481,1,0,0,0,2483,
        2482,1,0,0,0,2484,331,1,0,0,0,2485,2486,5,354,0,0,2486,2500,5,405,
        0,0,2487,2488,5,307,0,0,2488,2501,7,15,0,0,2489,2490,5,196,0,0,2490,
        2494,5,206,0,0,2491,2495,5,350,0,0,2492,2493,5,307,0,0,2493,2495,
        5,67,0,0,2494,2491,1,0,0,0,2494,2492,1,0,0,0,2495,2501,1,0,0,0,2496,
        2497,5,424,0,0,2497,2498,5,328,0,0,2498,2499,5,345,0,0,2499,2501,
        3,738,369,0,2500,2487,1,0,0,0,2500,2489,1,0,0,0,2500,2496,1,0,0,
        0,2500,2501,1,0,0,0,2501,2504,1,0,0,0,2502,2503,5,237,0,0,2503,2505,
        3,834,417,0,2504,2502,1,0,0,0,2504,2505,1,0,0,0,2505,333,1,0,0,0,
        2506,2507,5,354,0,0,2507,2517,7,16,0,0,2508,2518,5,13,0,0,2509,2514,
        3,758,379,0,2510,2511,5,535,0,0,2511,2513,3,758,379,0,2512,2510,
        1,0,0,0,2513,2516,1,0,0,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,
        2518,1,0,0,0,2516,2514,1,0,0,0,2517,2508,1,0,0,0,2517,2509,1,0,0,
        0,2518,2519,1,0,0,0,2519,2520,7,17,0,0,2520,335,1,0,0,0,2521,2523,
        5,66,0,0,2522,2524,5,446,0,0,2523,2522,1,0,0,0,2523,2524,1,0,0,0,
        2524,2538,1,0,0,0,2525,2526,5,65,0,0,2526,2539,3,584,292,0,2527,
        2536,5,156,0,0,2528,2529,5,81,0,0,2529,2537,3,584,292,0,2530,2537,
        5,82,0,0,2531,2534,3,584,292,0,2532,2533,5,535,0,0,2533,2535,3,584,
        292,0,2534,2532,1,0,0,0,2534,2535,1,0,0,0,2535,2537,1,0,0,0,2536,
        2528,1,0,0,0,2536,2530,1,0,0,0,2536,2531,1,0,0,0,2537,2539,1,0,0,
        0,2538,2525,1,0,0,0,2538,2527,1,0,0,0,2538,2539,1,0,0,0,2539,2541,
        1,0,0,0,2540,2542,3,338,169,0,2541,2540,1,0,0,0,2541,2542,1,0,0,
        0,2542,337,1,0,0,0,2543,2545,5,447,0,0,2544,2546,7,18,0,0,2545,2544,
        1,0,0,0,2545,2546,1,0,0,0,2546,2548,1,0,0,0,2547,2549,7,19,0,0,2548,
        2547,1,0,0,0,2548,2549,1,0,0,0,2549,339,1,0,0,0,2550,2552,5,328,
        0,0,2551,2553,5,446,0,0,2552,2551,1,0,0,0,2552,2553,1,0,0,0,2553,
        2561,1,0,0,0,2554,2556,5,403,0,0,2555,2557,5,336,0,0,2556,2555,1,
        0,0,0,2556,2557,1,0,0,0,2557,2558,1,0,0,0,2558,2562,3,736,368,0,
        2559,2560,5,156,0,0,2560,2562,3,834,417,0,2561,2554,1,0,0,0,2561,
        2559,1,0,0,0,2561,2562,1,0,0,0,2562,341,1,0,0,0,2563,2564,5,336,
        0,0,2564,2565,3,736,368,0,2565,343,1,0,0,0,2566,2567,5,142,0,0,2567,
        2572,5,294,0,0,2568,2569,5,354,0,0,2569,2570,5,380,0,0,2570,2571,
        5,552,0,0,2571,2573,3,834,417,0,2572,2568,1,0,0,0,2572,2573,1,0,
        0,0,2573,2576,1,0,0,0,2574,2575,5,192,0,0,2575,2577,3,788,394,0,
        2576,2574,1,0,0,0,2576,2577,1,0,0,0,2577,2578,1,0,0,0,2578,2584,
        5,154,0,0,2579,2585,3,346,173,0,2580,2585,3,462,231,0,2581,2585,
        3,468,234,0,2582,2585,3,470,235,0,2583,2585,3,494,247,0,2584,2579,
        1,0,0,0,2584,2580,1,0,0,0,2584,2581,1,0,0,0,2584,2582,1,0,0,0,2584,
        2583,1,0,0,0,2585,345,1,0,0,0,2586,2588,3,348,174,0,2587,2586,1,
        0,0,0,2587,2588,1,0,0,0,2588,2589,1,0,0,0,2589,2594,3,356,178,0,
        2590,2593,3,456,228,0,2591,2593,3,452,226,0,2592,2590,1,0,0,0,2592,
        2591,1,0,0,0,2593,2596,1,0,0,0,2594,2592,1,0,0,0,2594,2595,1,0,0,
        0,2595,347,1,0,0,0,2596,2594,1,0,0,0,2597,2598,5,444,0,0,2598,2603,
        3,350,175,0,2599,2600,5,535,0,0,2600,2602,3,350,175,0,2601,2599,
        1,0,0,0,2602,2605,1,0,0,0,2603,2601,1,0,0,0,2603,2604,1,0,0,0,2604,
        349,1,0,0,0,2605,2603,1,0,0,0,2606,2618,3,756,378,0,2607,2608,5,
        529,0,0,2608,2613,3,28,14,0,2609,2610,5,535,0,0,2610,2612,3,28,14,
        0,2611,2609,1,0,0,0,2612,2615,1,0,0,0,2613,2611,1,0,0,0,2613,2614,
        1,0,0,0,2614,2616,1,0,0,0,2615,2613,1,0,0,0,2616,2617,5,530,0,0,
        2617,2619,1,0,0,0,2618,2607,1,0,0,0,2618,2619,1,0,0,0,2619,2620,
        1,0,0,0,2620,2621,5,20,0,0,2621,2622,5,529,0,0,2622,2624,3,356,178,
        0,2623,2625,3,452,226,0,2624,2623,1,0,0,0,2624,2625,1,0,0,0,2625,
        2626,1,0,0,0,2626,2628,5,530,0,0,2627,2629,3,352,176,0,2628,2627,
        1,0,0,0,2628,2629,1,0,0,0,2629,2631,1,0,0,0,2630,2632,3,354,177,
        0,2631,2630,1,0,0,0,2631,2632,1,0,0,0,2632,351,1,0,0,0,2633,2634,
        5,340,0,0,2634,2635,7,20,0,0,2635,2636,5,149,0,0,2636,2637,5,46,
        0,0,2637,2639,3,28,14,0,2638,2640,5,21,0,0,2639,2638,1,0,0,0,2639,
        2640,1,0,0,0,2640,2642,1,0,0,0,2641,2643,5,112,0,0,2642,2641,1,0,
        0,0,2642,2643,1,0,0,0,2643,2646,1,0,0,0,2644,2645,5,261,0,0,2645,
        2647,5,149,0,0,2646,2644,1,0,0,0,2646,2647,1,0,0,0,2647,2650,1,0,
        0,0,2648,2649,5,261,0,0,2649,2651,5,202,0,0,2650,2648,1,0,0,0,2650,
        2651,1,0,0,0,2651,2670,1,0,0,0,2652,2653,5,535,0,0,2653,2655,3,28,
        14,0,2654,2656,5,21,0,0,2655,2654,1,0,0,0,2655,2656,1,0,0,0,2656,
        2658,1,0,0,0,2657,2659,5,112,0,0,2658,2657,1,0,0,0,2658,2659,1,0,
        0,0,2659,2662,1,0,0,0,2660,2661,5,261,0,0,2661,2663,5,149,0,0,2662,
        2660,1,0,0,0,2662,2663,1,0,0,0,2663,2666,1,0,0,0,2664,2665,5,261,
        0,0,2665,2667,5,202,0,0,2666,2664,1,0,0,0,2666,2667,1,0,0,0,2667,
        2669,1,0,0,0,2668,2652,1,0,0,0,2669,2672,1,0,0,0,2670,2668,1,0,0,
        0,2670,2671,1,0,0,0,2671,2673,1,0,0,0,2672,2670,1,0,0,0,2673,2674,
        5,354,0,0,2674,2675,3,28,14,0,2675,353,1,0,0,0,2676,2677,5,92,0,
        0,2677,2682,3,28,14,0,2678,2679,5,535,0,0,2679,2681,3,28,14,0,2680,
        2678,1,0,0,0,2681,2684,1,0,0,0,2682,2680,1,0,0,0,2682,2683,1,0,0,
        0,2683,2685,1,0,0,0,2684,2682,1,0,0,0,2685,2686,5,354,0,0,2686,2687,
        3,28,14,0,2687,2688,5,403,0,0,2688,2689,3,584,292,0,2689,2690,5,
        106,0,0,2690,2691,3,584,292,0,2691,355,1,0,0,0,2692,2696,3,360,180,
        0,2693,2695,3,358,179,0,2694,2693,1,0,0,0,2695,2698,1,0,0,0,2696,
        2694,1,0,0,0,2696,2697,1,0,0,0,2697,357,1,0,0,0,2698,2696,1,0,0,
        0,2699,2701,5,415,0,0,2700,2702,5,13,0,0,2701,2700,1,0,0,0,2701,
        2702,1,0,0,0,2702,2706,1,0,0,0,2703,2706,5,190,0,0,2704,2706,5,228,
        0,0,2705,2699,1,0,0,0,2705,2703,1,0,0,0,2705,2704,1,0,0,0,2706,2707,
        1,0,0,0,2707,2708,3,360,180,0,2708,359,1,0,0,0,2709,2715,3,362,181,
        0,2710,2711,5,529,0,0,2711,2712,3,356,178,0,2712,2713,5,530,0,0,
        2713,2715,1,0,0,0,2714,2709,1,0,0,0,2714,2710,1,0,0,0,2715,361,1,
        0,0,0,2716,2718,5,346,0,0,2717,2719,7,21,0,0,2718,2717,1,0,0,0,2718,
        2719,1,0,0,0,2719,2729,1,0,0,0,2720,2730,5,532,0,0,2721,2726,3,364,
        182,0,2722,2723,5,535,0,0,2723,2725,3,364,182,0,2724,2722,1,0,0,
        0,2725,2728,1,0,0,0,2726,2724,1,0,0,0,2726,2727,1,0,0,0,2727,2730,
        1,0,0,0,2728,2726,1,0,0,0,2729,2720,1,0,0,0,2729,2721,1,0,0,0,2730,
        2732,1,0,0,0,2731,2733,3,728,364,0,2732,2731,1,0,0,0,2732,2733,1,
        0,0,0,2733,2734,1,0,0,0,2734,2736,3,366,183,0,2735,2737,3,724,362,
        0,2736,2735,1,0,0,0,2736,2737,1,0,0,0,2737,2739,1,0,0,0,2738,2740,
        3,406,203,0,2739,2738,1,0,0,0,2739,2740,1,0,0,0,2740,2742,1,0,0,
        0,2741,2743,3,410,205,0,2742,2741,1,0,0,0,2742,2743,1,0,0,0,2743,
        2745,1,0,0,0,2744,2746,3,422,211,0,2745,2744,1,0,0,0,2745,2746,1,
        0,0,0,2746,363,1,0,0,0,2747,2749,3,368,184,0,2748,2750,3,718,359,
        0,2749,2748,1,0,0,0,2749,2750,1,0,0,0,2750,365,1,0,0,0,2751,2752,
        5,157,0,0,2752,2753,3,370,185,0,2753,367,1,0,0,0,2754,2755,3,788,
        394,0,2755,2756,5,522,0,0,2756,2757,5,532,0,0,2757,2760,1,0,0,0,
        2758,2760,3,584,292,0,2759,2754,1,0,0,0,2759,2758,1,0,0,0,2760,369,
        1,0,0,0,2761,2766,3,372,186,0,2762,2763,5,535,0,0,2763,2765,3,372,
        186,0,2764,2762,1,0,0,0,2765,2768,1,0,0,0,2766,2764,1,0,0,0,2766,
        2767,1,0,0,0,2767,371,1,0,0,0,2768,2766,1,0,0,0,2769,2773,3,374,
        187,0,2770,2772,3,376,188,0,2771,2770,1,0,0,0,2772,2775,1,0,0,0,
        2773,2771,1,0,0,0,2773,2774,1,0,0,0,2774,2778,1,0,0,0,2775,2773,
        1,0,0,0,2776,2779,3,388,194,0,2777,2779,3,400,200,0,2778,2776,1,
        0,0,0,2778,2777,1,0,0,0,2778,2779,1,0,0,0,2779,373,1,0,0,0,2780,
        2783,3,524,262,0,2781,2784,3,388,194,0,2782,2784,3,400,200,0,2783,
        2781,1,0,0,0,2783,2782,1,0,0,0,2783,2784,1,0,0,0,2784,2809,1,0,0,
        0,2785,2786,5,529,0,0,2786,2790,3,372,186,0,2787,2789,3,358,179,
        0,2788,2787,1,0,0,0,2789,2792,1,0,0,0,2790,2788,1,0,0,0,2790,2791,
        1,0,0,0,2791,2793,1,0,0,0,2792,2790,1,0,0,0,2793,2796,5,530,0,0,
        2794,2797,3,388,194,0,2795,2797,3,400,200,0,2796,2794,1,0,0,0,2796,
        2795,1,0,0,0,2796,2797,1,0,0,0,2797,2809,1,0,0,0,2798,2799,5,271,
        0,0,2799,2800,5,529,0,0,2800,2801,3,524,262,0,2801,2802,5,530,0,
        0,2802,2809,1,0,0,0,2803,2806,3,524,262,0,2804,2807,3,388,194,0,
        2805,2807,3,400,200,0,2806,2804,1,0,0,0,2806,2805,1,0,0,0,2806,2807,
        1,0,0,0,2807,2809,1,0,0,0,2808,2780,1,0,0,0,2808,2785,1,0,0,0,2808,
        2798,1,0,0,0,2808,2803,1,0,0,0,2809,2813,1,0,0,0,2810,2812,3,386,
        193,0,2811,2810,1,0,0,0,2812,2815,1,0,0,0,2813,2811,1,0,0,0,2813,
        2814,1,0,0,0,2814,2820,1,0,0,0,2815,2813,1,0,0,0,2816,2818,5,20,
        0,0,2817,2816,1,0,0,0,2817,2818,1,0,0,0,2818,2819,1,0,0,0,2819,2821,
        3,720,360,0,2820,2817,1,0,0,0,2820,2821,1,0,0,0,2821,2830,1,0,0,
        0,2822,2827,5,539,0,0,2823,2825,5,20,0,0,2824,2823,1,0,0,0,2824,
        2825,1,0,0,0,2825,2826,1,0,0,0,2826,2828,3,720,360,0,2827,2824,1,
        0,0,0,2827,2828,1,0,0,0,2828,2830,1,0,0,0,2829,2808,1,0,0,0,2829,
        2822,1,0,0,0,2830,375,1,0,0,0,2831,2833,3,384,192,0,2832,2831,1,
        0,0,0,2832,2833,1,0,0,0,2833,2835,1,0,0,0,2834,2836,7,22,0,0,2835,
        2834,1,0,0,0,2835,2836,1,0,0,0,2836,2839,1,0,0,0,2837,2840,5,183,
        0,0,2838,2840,3,382,191,0,2839,2837,1,0,0,0,2839,2838,1,0,0,0,2839,
        2840,1,0,0,0,2840,2841,1,0,0,0,2841,2842,5,199,0,0,2842,2844,3,374,
        187,0,2843,2845,3,384,192,0,2844,2843,1,0,0,0,2844,2845,1,0,0,0,
        2845,2850,1,0,0,0,2846,2849,3,378,189,0,2847,2849,3,380,190,0,2848,
        2846,1,0,0,0,2848,2847,1,0,0,0,2849,2852,1,0,0,0,2850,2848,1,0,0,
        0,2850,2851,1,0,0,0,2851,377,1,0,0,0,2852,2850,1,0,0,0,2853,2854,
        5,270,0,0,2854,2855,3,538,269,0,2855,379,1,0,0,0,2856,2857,5,425,
        0,0,2857,2858,5,529,0,0,2858,2863,3,28,14,0,2859,2860,5,535,0,0,
        2860,2862,3,28,14,0,2861,2859,1,0,0,0,2862,2865,1,0,0,0,2863,2861,
        1,0,0,0,2863,2864,1,0,0,0,2864,2866,1,0,0,0,2865,2863,1,0,0,0,2866,
        2867,5,530,0,0,2867,381,1,0,0,0,2868,2870,7,23,0,0,2869,2871,5,280,
        0,0,2870,2869,1,0,0,0,2870,2871,1,0,0,0,2871,383,1,0,0,0,2872,2873,
        5,287,0,0,2873,2887,5,46,0,0,2874,2875,5,529,0,0,2875,2876,3,356,
        178,0,2876,2877,5,530,0,0,2877,2888,1,0,0,0,2878,2888,3,536,268,
        0,2879,2884,3,584,292,0,2880,2881,5,535,0,0,2881,2883,3,584,292,
        0,2882,2880,1,0,0,0,2883,2886,1,0,0,0,2884,2882,1,0,0,0,2884,2885,
        1,0,0,0,2885,2888,1,0,0,0,2886,2884,1,0,0,0,2887,2874,1,0,0,0,2887,
        2878,1,0,0,0,2887,2879,1,0,0,0,2888,385,1,0,0,0,2889,2890,5,435,
        0,0,2890,2891,5,33,0,0,2891,2892,7,24,0,0,2892,2898,3,584,292,0,
        2893,2894,5,20,0,0,2894,2895,5,266,0,0,2895,2896,7,25,0,0,2896,2898,
        3,584,292,0,2897,2889,1,0,0,0,2897,2893,1,0,0,0,2898,387,1,0,0,0,
        2899,2901,5,293,0,0,2900,2902,5,448,0,0,2901,2900,1,0,0,0,2901,2902,
        1,0,0,0,2902,2903,1,0,0,0,2903,2904,5,529,0,0,2904,2909,3,390,195,
        0,2905,2906,5,535,0,0,2906,2908,3,390,195,0,2907,2905,1,0,0,0,2908,
        2911,1,0,0,0,2909,2907,1,0,0,0,2909,2910,1,0,0,0,2910,2912,1,0,0,
        0,2911,2909,1,0,0,0,2912,2913,3,392,196,0,2913,2914,3,394,197,0,
        2914,2915,5,530,0,0,2915,389,1,0,0,0,2916,2917,3,754,377,0,2917,
        2918,5,529,0,0,2918,2919,3,584,292,0,2919,2921,5,530,0,0,2920,2922,
        3,718,359,0,2921,2920,1,0,0,0,2921,2922,1,0,0,0,2922,391,1,0,0,0,
        2923,2936,5,154,0,0,2924,2937,3,28,14,0,2925,2926,5,529,0,0,2926,
        2931,3,28,14,0,2927,2928,5,535,0,0,2928,2930,3,28,14,0,2929,2927,
        1,0,0,0,2930,2933,1,0,0,0,2931,2929,1,0,0,0,2931,2932,1,0,0,0,2932,
        2934,1,0,0,0,2933,2931,1,0,0,0,2934,2935,5,530,0,0,2935,2937,1,0,
        0,0,2936,2924,1,0,0,0,2936,2925,1,0,0,0,2937,393,1,0,0,0,2938,2939,
        5,172,0,0,2939,2957,5,529,0,0,2940,2958,3,356,178,0,2941,2946,5,
        18,0,0,2942,2943,5,535,0,0,2943,2945,5,18,0,0,2944,2942,1,0,0,0,
        2945,2948,1,0,0,0,2946,2944,1,0,0,0,2946,2947,1,0,0,0,2947,2958,
        1,0,0,0,2948,2946,1,0,0,0,2949,2954,3,396,198,0,2950,2951,5,535,
        0,0,2951,2953,3,396,198,0,2952,2950,1,0,0,0,2953,2956,1,0,0,0,2954,
        2952,1,0,0,0,2954,2955,1,0,0,0,2955,2958,1,0,0,0,2956,2954,1,0,0,
        0,2957,2940,1,0,0,0,2957,2941,1,0,0,0,2957,2949,1,0,0,0,2958,2959,
        1,0,0,0,2959,2960,5,530,0,0,2960,395,1,0,0,0,2961,2963,3,398,199,
        0,2962,2964,3,718,359,0,2963,2962,1,0,0,0,2963,2964,1,0,0,0,2964,
        397,1,0,0,0,2965,2968,3,584,292,0,2966,2968,3,536,268,0,2967,2965,
        1,0,0,0,2967,2966,1,0,0,0,2968,399,1,0,0,0,2969,2972,5,418,0,0,2970,
        2971,7,26,0,0,2971,2973,5,261,0,0,2972,2970,1,0,0,0,2972,2973,1,
        0,0,0,2973,2974,1,0,0,0,2974,2987,5,529,0,0,2975,2988,3,28,14,0,
        2976,2977,5,529,0,0,2977,2982,3,28,14,0,2978,2979,5,535,0,0,2979,
        2981,3,28,14,0,2980,2978,1,0,0,0,2981,2984,1,0,0,0,2982,2980,1,0,
        0,0,2982,2983,1,0,0,0,2983,2985,1,0,0,0,2984,2982,1,0,0,0,2985,2986,
        5,530,0,0,2986,2988,1,0,0,0,2987,2975,1,0,0,0,2987,2976,1,0,0,0,
        2988,2989,1,0,0,0,2989,2990,3,392,196,0,2990,2991,3,402,201,0,2991,
        2992,5,530,0,0,2992,401,1,0,0,0,2993,2994,5,172,0,0,2994,2995,5,
        529,0,0,2995,3000,3,404,202,0,2996,2997,5,535,0,0,2997,2999,3,404,
        202,0,2998,2996,1,0,0,0,2999,3002,1,0,0,0,3000,2998,1,0,0,0,3000,
        3001,1,0,0,0,3001,3003,1,0,0,0,3002,3000,1,0,0,0,3003,3004,5,530,
        0,0,3004,403,1,0,0,0,3005,3018,3,28,14,0,3006,3007,5,529,0,0,3007,
        3012,3,28,14,0,3008,3009,5,535,0,0,3009,3011,3,28,14,0,3010,3008,
        1,0,0,0,3011,3014,1,0,0,0,3012,3010,1,0,0,0,3012,3013,1,0,0,0,3013,
        3015,1,0,0,0,3014,3012,1,0,0,0,3015,3016,5,530,0,0,3016,3018,1,0,
        0,0,3017,3005,1,0,0,0,3017,3006,1,0,0,0,3018,3034,1,0,0,0,3019,3032,
        5,20,0,0,3020,3033,3,828,414,0,3021,3022,5,529,0,0,3022,3027,3,828,
        414,0,3023,3024,5,535,0,0,3024,3026,3,828,414,0,3025,3023,1,0,0,
        0,3026,3029,1,0,0,0,3027,3025,1,0,0,0,3027,3028,1,0,0,0,3028,3030,
        1,0,0,0,3029,3027,1,0,0,0,3030,3031,5,530,0,0,3031,3033,1,0,0,0,
        3032,3020,1,0,0,0,3032,3021,1,0,0,0,3033,3035,1,0,0,0,3034,3019,
        1,0,0,0,3034,3035,1,0,0,0,3035,405,1,0,0,0,3036,3037,5,71,0,0,3037,
        3039,5,46,0,0,3038,3040,5,251,0,0,3039,3038,1,0,0,0,3039,3040,1,
        0,0,0,3040,3041,1,0,0,0,3041,3043,3,538,269,0,3042,3044,3,408,204,
        0,3043,3042,1,0,0,0,3043,3044,1,0,0,0,3044,3054,1,0,0,0,3045,3046,
        3,408,204,0,3046,3047,5,71,0,0,3047,3049,5,46,0,0,3048,3050,5,251,
        0,0,3049,3048,1,0,0,0,3049,3050,1,0,0,0,3050,3051,1,0,0,0,3051,3052,
        3,538,269,0,3052,3054,1,0,0,0,3053,3036,1,0,0,0,3053,3045,1,0,0,
        0,3054,407,1,0,0,0,3055,3056,5,377,0,0,3056,3057,5,444,0,0,3057,
        3058,3,538,269,0,3058,409,1,0,0,0,3059,3060,5,162,0,0,3060,3061,
        5,46,0,0,3061,3066,3,412,206,0,3062,3063,5,535,0,0,3063,3065,3,412,
        206,0,3064,3062,1,0,0,0,3065,3068,1,0,0,0,3066,3064,1,0,0,0,3066,
        3067,1,0,0,0,3067,3070,1,0,0,0,3068,3066,1,0,0,0,3069,3071,3,420,
        210,0,3070,3069,1,0,0,0,3070,3071,1,0,0,0,3071,3086,1,0,0,0,3072,
        3083,3,420,210,0,3073,3074,5,162,0,0,3074,3075,5,46,0,0,3075,3080,
        3,412,206,0,3076,3077,5,535,0,0,3077,3079,3,412,206,0,3078,3076,
        1,0,0,0,3079,3082,1,0,0,0,3080,3078,1,0,0,0,3080,3081,1,0,0,0,3081,
        3084,1,0,0,0,3082,3080,1,0,0,0,3083,3073,1,0,0,0,3083,3084,1,0,0,
        0,3084,3086,1,0,0,0,3085,3059,1,0,0,0,3085,3072,1,0,0,0,3086,411,
        1,0,0,0,3087,3091,3,416,208,0,3088,3091,3,414,207,0,3089,3091,3,
        584,292,0,3090,3087,1,0,0,0,3090,3088,1,0,0,0,3090,3089,1,0,0,0,
        3091,413,1,0,0,0,3092,3093,7,27,0,0,3093,3094,5,529,0,0,3094,3099,
        3,418,209,0,3095,3096,5,535,0,0,3096,3098,3,418,209,0,3097,3095,
        1,0,0,0,3098,3101,1,0,0,0,3099,3097,1,0,0,0,3099,3100,1,0,0,0,3100,
        3102,1,0,0,0,3101,3099,1,0,0,0,3102,3103,5,530,0,0,3103,415,1,0,
        0,0,3104,3105,5,163,0,0,3105,3106,5,355,0,0,3106,3107,5,529,0,0,
        3107,3112,3,418,209,0,3108,3109,5,535,0,0,3109,3111,3,418,209,0,
        3110,3108,1,0,0,0,3111,3114,1,0,0,0,3112,3110,1,0,0,0,3112,3113,
        1,0,0,0,3113,3115,1,0,0,0,3114,3112,1,0,0,0,3115,3116,5,530,0,0,
        3116,417,1,0,0,0,3117,3121,3,414,207,0,3118,3121,3,536,268,0,3119,
        3121,3,584,292,0,3120,3117,1,0,0,0,3120,3118,1,0,0,0,3120,3119,1,
        0,0,0,3121,419,1,0,0,0,3122,3123,5,165,0,0,3123,3124,3,538,269,0,
        3124,421,1,0,0,0,3125,3129,5,233,0,0,3126,3128,3,424,212,0,3127,
        3126,1,0,0,0,3128,3131,1,0,0,0,3129,3127,1,0,0,0,3129,3130,1,0,0,
        0,3130,3133,1,0,0,0,3131,3129,1,0,0,0,3132,3134,3,426,213,0,3133,
        3132,1,0,0,0,3133,3134,1,0,0,0,3134,3138,1,0,0,0,3135,3137,3,428,
        214,0,3136,3135,1,0,0,0,3137,3140,1,0,0,0,3138,3136,1,0,0,0,3138,
        3139,1,0,0,0,3139,3141,1,0,0,0,3140,3138,1,0,0,0,3141,3142,3,430,
        215,0,3142,423,1,0,0,0,3143,3144,7,28,0,0,3144,3152,5,241,0,0,3145,
        3149,5,416,0,0,3146,3150,5,114,0,0,3147,3148,5,363,0,0,3148,3150,
        5,312,0,0,3149,3146,1,0,0,0,3149,3147,1,0,0,0,3150,3152,1,0,0,0,
        3151,3143,1,0,0,0,3151,3145,1,0,0,0,3152,425,1,0,0,0,3153,3154,5,
        322,0,0,3154,3155,7,29,0,0,3155,3156,5,332,0,0,3156,427,1,0,0,0,
        3157,3158,5,312,0,0,3158,3159,3,750,375,0,3159,3160,5,270,0,0,3160,
        3161,5,529,0,0,3161,3162,3,356,178,0,3162,3163,5,530,0,0,3163,3167,
        3,432,216,0,3164,3166,3,424,212,0,3165,3164,1,0,0,0,3166,3169,1,
        0,0,0,3167,3165,1,0,0,0,3167,3168,1,0,0,0,3168,429,1,0,0,0,3169,
        3167,1,0,0,0,3170,3171,5,221,0,0,3171,3173,3,752,376,0,3172,3170,
        1,0,0,0,3172,3173,1,0,0,0,3173,3174,1,0,0,0,3174,3178,3,432,216,
        0,3175,3177,3,424,212,0,3176,3175,1,0,0,0,3177,3180,1,0,0,0,3178,
        3176,1,0,0,0,3178,3179,1,0,0,0,3179,3181,1,0,0,0,3180,3178,1,0,0,
        0,3181,3182,3,440,220,0,3182,431,1,0,0,0,3183,3185,3,434,217,0,3184,
        3183,1,0,0,0,3184,3185,1,0,0,0,3185,3186,1,0,0,0,3186,3187,5,114,
        0,0,3187,3188,5,46,0,0,3188,3189,3,436,218,0,3189,3190,5,225,0,0,
        3190,3191,3,436,218,0,3191,433,1,0,0,0,3192,3193,5,287,0,0,3193,
        3194,5,46,0,0,3194,3195,3,436,218,0,3195,435,1,0,0,0,3196,3197,5,
        529,0,0,3197,3202,3,438,219,0,3198,3199,5,535,0,0,3199,3201,3,438,
        219,0,3200,3198,1,0,0,0,3201,3204,1,0,0,0,3202,3200,1,0,0,0,3202,
        3203,1,0,0,0,3203,3205,1,0,0,0,3204,3202,1,0,0,0,3205,3206,5,530,
        0,0,3206,437,1,0,0,0,3207,3209,3,584,292,0,3208,3210,3,720,360,0,
        3209,3208,1,0,0,0,3209,3210,1,0,0,0,3210,439,1,0,0,0,3211,3213,3,
        442,221,0,3212,3211,1,0,0,0,3212,3213,1,0,0,0,3213,3214,1,0,0,0,
        3214,3215,5,529,0,0,3215,3220,3,444,222,0,3216,3217,5,535,0,0,3217,
        3219,3,444,222,0,3218,3216,1,0,0,0,3219,3222,1,0,0,0,3220,3218,1,
        0,0,0,3220,3221,1,0,0,0,3221,3223,1,0,0,0,3222,3220,1,0,0,0,3223,
        3224,5,530,0,0,3224,441,1,0,0,0,3225,3231,5,333,0,0,3226,3232,5,
        420,0,0,3227,3229,5,422,0,0,3228,3230,5,13,0,0,3229,3228,1,0,0,0,
        3229,3230,1,0,0,0,3230,3232,1,0,0,0,3231,3226,1,0,0,0,3231,3227,
        1,0,0,0,3231,3232,1,0,0,0,3232,3235,1,0,0,0,3233,3234,7,30,0,0,3234,
        3236,5,276,0,0,3235,3233,1,0,0,0,3235,3236,1,0,0,0,3236,3238,1,0,
        0,0,3237,3239,3,448,224,0,3238,3237,1,0,0,0,3238,3239,1,0,0,0,3239,
        443,1,0,0,0,3240,3246,5,420,0,0,3241,3243,5,422,0,0,3242,3244,5,
        13,0,0,3243,3242,1,0,0,0,3243,3244,1,0,0,0,3244,3246,1,0,0,0,3245,
        3240,1,0,0,0,3245,3241,1,0,0,0,3245,3246,1,0,0,0,3246,3247,1,0,0,
        0,3247,3249,3,446,223,0,3248,3250,3,452,226,0,3249,3248,1,0,0,0,
        3249,3250,1,0,0,0,3250,3251,1,0,0,0,3251,3252,5,552,0,0,3252,3253,
        3,584,292,0,3253,445,1,0,0,0,3254,3255,3,624,312,0,3255,447,1,0,
        0,0,3256,3257,5,197,0,0,3257,3258,5,529,0,0,3258,3259,3,584,292,
        0,3259,3261,5,530,0,0,3260,3262,3,450,225,0,3261,3260,1,0,0,0,3261,
        3262,1,0,0,0,3262,449,1,0,0,0,3263,3264,5,419,0,0,3264,3265,5,529,
        0,0,3265,3266,3,538,269,0,3266,3267,5,530,0,0,3267,451,1,0,0,0,3268,
        3270,5,276,0,0,3269,3271,5,360,0,0,3270,3269,1,0,0,0,3270,3271,1,
        0,0,0,3271,3272,1,0,0,0,3272,3273,5,46,0,0,3273,3278,3,454,227,0,
        3274,3275,5,535,0,0,3275,3277,3,454,227,0,3276,3274,1,0,0,0,3277,
        3280,1,0,0,0,3278,3276,1,0,0,0,3278,3279,1,0,0,0,3279,453,1,0,0,
        0,3280,3278,1,0,0,0,3281,3283,3,584,292,0,3282,3284,7,31,0,0,3283,
        3282,1,0,0,0,3283,3284,1,0,0,0,3284,3287,1,0,0,0,3285,3286,5,261,
        0,0,3286,3288,7,32,0,0,3287,3285,1,0,0,0,3287,3288,1,0,0,0,3288,
        455,1,0,0,0,3289,3290,5,154,0,0,3290,3292,5,420,0,0,3291,3293,3,
        458,229,0,3292,3291,1,0,0,0,3292,3293,1,0,0,0,3293,3295,1,0,0,0,
        3294,3296,3,460,230,0,3295,3294,1,0,0,0,3295,3296,1,0,0,0,3296,457,
        1,0,0,0,3297,3298,5,266,0,0,3298,3303,3,28,14,0,3299,3300,5,535,
        0,0,3300,3302,3,28,14,0,3301,3299,1,0,0,0,3302,3305,1,0,0,0,3303,
        3301,1,0,0,0,3303,3304,1,0,0,0,3304,459,1,0,0,0,3305,3303,1,0,0,
        0,3306,3307,5,365,0,0,3307,3312,5,215,0,0,3308,3312,5,259,0,0,3309,
        3310,5,437,0,0,3310,3312,3,584,292,0,3311,3306,1,0,0,0,3311,3308,
        1,0,0,0,3311,3309,1,0,0,0,3312,461,1,0,0,0,3313,3314,5,420,0,0,3314,
        3315,3,514,257,0,3315,3317,3,464,232,0,3316,3318,3,724,362,0,3317,
        3316,1,0,0,0,3317,3318,1,0,0,0,3318,3320,1,0,0,0,3319,3321,3,516,
        258,0,3320,3319,1,0,0,0,3320,3321,1,0,0,0,3321,3323,1,0,0,0,3322,
        3324,3,518,259,0,3323,3322,1,0,0,0,3323,3324,1,0,0,0,3324,463,1,
        0,0,0,3325,3341,5,354,0,0,3326,3331,3,466,233,0,3327,3328,5,535,
        0,0,3328,3330,3,466,233,0,3329,3327,1,0,0,0,3330,3333,1,0,0,0,3331,
        3329,1,0,0,0,3331,3332,1,0,0,0,3332,3342,1,0,0,0,3333,3331,1,0,0,
        0,3334,3335,5,427,0,0,3335,3336,5,529,0,0,3336,3337,3,836,418,0,
        3337,3338,5,530,0,0,3338,3339,5,552,0,0,3339,3340,3,584,292,0,3340,
        3342,1,0,0,0,3341,3326,1,0,0,0,3341,3334,1,0,0,0,3342,465,1,0,0,
        0,3343,3344,3,28,14,0,3344,3345,5,552,0,0,3345,3346,3,584,292,0,
        3346,3361,1,0,0,0,3347,3348,5,529,0,0,3348,3353,3,28,14,0,3349,3350,
        5,535,0,0,3350,3352,3,28,14,0,3351,3349,1,0,0,0,3352,3355,1,0,0,
        0,3353,3351,1,0,0,0,3353,3354,1,0,0,0,3354,3356,1,0,0,0,3355,3353,
        1,0,0,0,3356,3357,5,530,0,0,3357,3358,5,552,0,0,3358,3359,3,356,
        178,0,3359,3361,1,0,0,0,3360,3343,1,0,0,0,3360,3347,1,0,0,0,3361,
        467,1,0,0,0,3362,3364,5,110,0,0,3363,3365,5,157,0,0,3364,3363,1,
        0,0,0,3364,3365,1,0,0,0,3365,3366,1,0,0,0,3366,3368,3,514,257,0,
        3367,3369,3,724,362,0,3368,3367,1,0,0,0,3368,3369,1,0,0,0,3369,3371,
        1,0,0,0,3370,3372,3,516,258,0,3371,3370,1,0,0,0,3371,3372,1,0,0,
        0,3372,3374,1,0,0,0,3373,3375,3,518,259,0,3374,3373,1,0,0,0,3374,
        3375,1,0,0,0,3375,469,1,0,0,0,3376,3379,5,185,0,0,3377,3380,3,478,
        239,0,3378,3380,3,480,240,0,3379,3377,1,0,0,0,3379,3378,1,0,0,0,
        3380,471,1,0,0,0,3381,3382,5,103,0,0,3382,3384,3,836,418,0,3383,
        3385,3,804,402,0,3384,3383,1,0,0,0,3384,3385,1,0,0,0,3385,3387,1,
        0,0,0,3386,3388,3,226,113,0,3387,3386,1,0,0,0,3387,3388,1,0,0,0,
        3388,473,1,0,0,0,3389,3390,5,103,0,0,3390,3391,5,141,0,0,3391,3392,
        5,166,0,0,3392,3393,5,154,0,0,3393,3394,3,82,41,0,3394,3395,3,318,
        159,0,3395,475,1,0,0,0,3396,3399,5,374,0,0,3397,3399,3,836,418,0,
        3398,3396,1,0,0,0,3398,3397,1,0,0,0,3399,477,1,0,0,0,3400,3406,3,
        490,245,0,3401,3403,3,492,246,0,3402,3404,3,516,258,0,3403,3402,
        1,0,0,0,3403,3404,1,0,0,0,3404,3407,1,0,0,0,3405,3407,3,346,173,
        0,3406,3401,1,0,0,0,3406,3405,1,0,0,0,3407,3409,1,0,0,0,3408,3410,
        3,518,259,0,3409,3408,1,0,0,0,3409,3410,1,0,0,0,3410,479,1,0,0,0,
        3411,3413,5,13,0,0,3412,3414,3,482,241,0,3413,3412,1,0,0,0,3414,
        3415,1,0,0,0,3415,3413,1,0,0,0,3415,3416,1,0,0,0,3416,3419,1,0,0,
        0,3417,3419,3,484,242,0,3418,3411,1,0,0,0,3418,3417,1,0,0,0,3419,
        3420,1,0,0,0,3420,3421,3,346,173,0,3421,481,1,0,0,0,3422,3424,3,
        490,245,0,3423,3425,3,492,246,0,3424,3423,1,0,0,0,3424,3425,1,0,
        0,0,3425,3427,1,0,0,0,3426,3428,3,518,259,0,3427,3426,1,0,0,0,3427,
        3428,1,0,0,0,3428,483,1,0,0,0,3429,3431,7,33,0,0,3430,3429,1,0,0,
        0,3430,3431,1,0,0,0,3431,3433,1,0,0,0,3432,3434,3,486,243,0,3433,
        3432,1,0,0,0,3434,3435,1,0,0,0,3435,3433,1,0,0,0,3435,3436,1,0,0,
        0,3436,3438,1,0,0,0,3437,3439,3,488,244,0,3438,3437,1,0,0,0,3438,
        3439,1,0,0,0,3439,485,1,0,0,0,3440,3441,5,440,0,0,3441,3442,3,538,
        269,0,3442,3444,5,392,0,0,3443,3445,3,482,241,0,3444,3443,1,0,0,
        0,3445,3446,1,0,0,0,3446,3444,1,0,0,0,3446,3447,1,0,0,0,3447,487,
        1,0,0,0,3448,3450,5,124,0,0,3449,3451,3,482,241,0,3450,3449,1,0,
        0,0,3451,3452,1,0,0,0,3452,3450,1,0,0,0,3452,3453,1,0,0,0,3453,489,
        1,0,0,0,3454,3455,5,192,0,0,3455,3467,3,514,257,0,3456,3457,5,529,
        0,0,3457,3462,3,28,14,0,3458,3459,5,535,0,0,3459,3461,3,28,14,0,
        3460,3458,1,0,0,0,3461,3464,1,0,0,0,3462,3460,1,0,0,0,3462,3463,
        1,0,0,0,3463,3465,1,0,0,0,3464,3462,1,0,0,0,3465,3466,5,530,0,0,
        3466,3468,1,0,0,0,3467,3456,1,0,0,0,3467,3468,1,0,0,0,3468,491,1,
        0,0,0,3469,3470,5,428,0,0,3470,3471,3,536,268,0,3471,493,1,0,0,0,
        3472,3473,5,227,0,0,3473,3474,5,192,0,0,3474,3476,3,788,394,0,3475,
        3477,3,720,360,0,3476,3475,1,0,0,0,3476,3477,1,0,0,0,3477,3478,1,
        0,0,0,3478,3479,5,425,0,0,3479,3480,3,504,252,0,3480,3481,5,270,
        0,0,3481,3482,5,529,0,0,3482,3483,3,538,269,0,3483,3492,5,530,0,
        0,3484,3486,3,496,248,0,3485,3487,3,502,251,0,3486,3485,1,0,0,0,
        3486,3487,1,0,0,0,3487,3493,1,0,0,0,3488,3490,3,502,251,0,3489,3491,
        3,496,248,0,3490,3489,1,0,0,0,3490,3491,1,0,0,0,3491,3493,1,0,0,
        0,3492,3484,1,0,0,0,3492,3488,1,0,0,0,3492,3493,1,0,0,0,3493,3495,
        1,0,0,0,3494,3496,3,518,259,0,3495,3494,1,0,0,0,3495,3496,1,0,0,
        0,3496,495,1,0,0,0,3497,3498,5,440,0,0,3498,3499,5,223,0,0,3499,
        3500,5,392,0,0,3500,3501,5,420,0,0,3501,3502,5,354,0,0,3502,3507,
        3,498,249,0,3503,3504,5,535,0,0,3504,3506,3,498,249,0,3505,3503,
        1,0,0,0,3506,3509,1,0,0,0,3507,3505,1,0,0,0,3507,3508,1,0,0,0,3508,
        3511,1,0,0,0,3509,3507,1,0,0,0,3510,3512,3,724,362,0,3511,3510,1,
        0,0,0,3511,3512,1,0,0,0,3512,3514,1,0,0,0,3513,3515,3,500,250,0,
        3514,3513,1,0,0,0,3514,3515,1,0,0,0,3515,497,1,0,0,0,3516,3517,3,
        28,14,0,3517,3518,5,552,0,0,3518,3519,3,584,292,0,3519,499,1,0,0,
        0,3520,3521,5,110,0,0,3521,3522,3,724,362,0,3522,501,1,0,0,0,3523,
        3524,5,440,0,0,3524,3525,5,258,0,0,3525,3526,5,223,0,0,3526,3527,
        5,392,0,0,3527,3539,5,185,0,0,3528,3529,5,529,0,0,3529,3534,3,28,
        14,0,3530,3531,5,535,0,0,3531,3533,3,28,14,0,3532,3530,1,0,0,0,3533,
        3536,1,0,0,0,3534,3532,1,0,0,0,3534,3535,1,0,0,0,3535,3537,1,0,0,
        0,3536,3534,1,0,0,0,3537,3538,5,530,0,0,3538,3540,1,0,0,0,3539,3528,
        1,0,0,0,3539,3540,1,0,0,0,3540,3541,1,0,0,0,3541,3542,5,428,0,0,
        3542,3544,3,536,268,0,3543,3545,3,724,362,0,3544,3543,1,0,0,0,3544,
        3545,1,0,0,0,3545,503,1,0,0,0,3546,3552,3,788,394,0,3547,3548,5,
        529,0,0,3548,3549,3,346,173,0,3549,3550,5,530,0,0,3550,3552,1,0,
        0,0,3551,3546,1,0,0,0,3551,3547,1,0,0,0,3552,3554,1,0,0,0,3553,3555,
        3,720,360,0,3554,3553,1,0,0,0,3554,3555,1,0,0,0,3555,505,1,0,0,0,
        3556,3557,5,214,0,0,3557,3558,5,390,0,0,3558,3563,3,510,255,0,3559,
        3560,5,535,0,0,3560,3562,3,510,255,0,3561,3559,1,0,0,0,3562,3565,
        1,0,0,0,3563,3561,1,0,0,0,3563,3564,1,0,0,0,3564,3566,1,0,0,0,3565,
        3563,1,0,0,0,3566,3567,5,172,0,0,3567,3568,3,512,256,0,3568,3570,
        5,232,0,0,3569,3571,3,508,254,0,3570,3569,1,0,0,0,3570,3571,1,0,
        0,0,3571,507,1,0,0,0,3572,3573,5,437,0,0,3573,3576,3,584,292,0,3574,
        3576,5,259,0,0,3575,3572,1,0,0,0,3575,3574,1,0,0,0,3576,509,1,0,
        0,0,3577,3579,3,788,394,0,3578,3580,3,716,358,0,3579,3578,1,0,0,
        0,3579,3580,1,0,0,0,3580,511,1,0,0,0,3581,3582,5,330,0,0,3582,3594,
        5,357,0,0,3583,3584,5,330,0,0,3584,3594,5,138,0,0,3585,3587,5,357,
        0,0,3586,3588,5,420,0,0,3587,3586,1,0,0,0,3587,3588,1,0,0,0,3588,
        3594,1,0,0,0,3589,3590,5,357,0,0,3590,3591,5,330,0,0,3591,3594,5,
        138,0,0,3592,3594,5,138,0,0,3593,3581,1,0,0,0,3593,3583,1,0,0,0,
        3593,3585,1,0,0,0,3593,3589,1,0,0,0,3593,3592,1,0,0,0,3594,513,1,
        0,0,0,3595,3602,3,524,262,0,3596,3597,5,271,0,0,3597,3598,5,529,
        0,0,3598,3599,3,524,262,0,3599,3600,5,530,0,0,3600,3602,1,0,0,0,
        3601,3595,1,0,0,0,3601,3596,1,0,0,0,3602,3604,1,0,0,0,3603,3605,
        3,720,360,0,3604,3603,1,0,0,0,3604,3605,1,0,0,0,3605,515,1,0,0,0,
        3606,3607,7,14,0,0,3607,3612,3,584,292,0,3608,3609,5,535,0,0,3609,
        3611,3,584,292,0,3610,3608,1,0,0,0,3611,3614,1,0,0,0,3612,3610,1,
        0,0,0,3612,3613,1,0,0,0,3613,3615,1,0,0,0,3614,3612,1,0,0,0,3615,
        3616,3,728,364,0,3616,517,1,0,0,0,3617,3618,5,216,0,0,3618,3620,
        5,131,0,0,3619,3621,3,520,260,0,3620,3619,1,0,0,0,3620,3621,1,0,
        0,0,3621,3623,1,0,0,0,3622,3624,3,586,293,0,3623,3622,1,0,0,0,3623,
        3624,1,0,0,0,3624,3626,1,0,0,0,3625,3627,3,522,261,0,3626,3625,1,
        0,0,0,3626,3627,1,0,0,0,3627,519,1,0,0,0,3628,3629,5,192,0,0,3629,
        3630,3,788,394,0,3630,521,1,0,0,0,3631,3632,5,314,0,0,3632,3635,
        5,212,0,0,3633,3636,5,417,0,0,3634,3636,3,586,293,0,3635,3633,1,
        0,0,0,3635,3634,1,0,0,0,3636,523,1,0,0,0,3637,3650,3,526,263,0,3638,
        3639,5,529,0,0,3639,3641,3,346,173,0,3640,3642,3,528,264,0,3641,
        3640,1,0,0,0,3641,3642,1,0,0,0,3642,3643,1,0,0,0,3643,3644,5,530,
        0,0,3644,3650,1,0,0,0,3645,3647,3,788,394,0,3646,3648,3,530,265,
        0,3647,3646,1,0,0,0,3647,3648,1,0,0,0,3648,3650,1,0,0,0,3649,3637,
        1,0,0,0,3649,3638,1,0,0,0,3649,3645,1,0,0,0,3650,525,1,0,0,0,3651,
        3664,7,34,0,0,3652,3653,5,529,0,0,3653,3654,3,356,178,0,3654,3655,
        5,530,0,0,3655,3665,1,0,0,0,3656,3657,5,529,0,0,3657,3658,3,584,
        292,0,3658,3662,5,530,0,0,3659,3660,5,529,0,0,3660,3661,5,533,0,
        0,3661,3663,5,530,0,0,3662,3659,1,0,0,0,3662,3663,1,0,0,0,3663,3665,
        1,0,0,0,3664,3652,1,0,0,0,3664,3656,1,0,0,0,3665,527,1,0,0,0,3666,
        3675,5,444,0,0,3667,3668,5,307,0,0,3668,3676,5,271,0,0,3669,3670,
        5,58,0,0,3670,3673,5,273,0,0,3671,3672,5,74,0,0,3672,3674,3,758,
        379,0,3673,3671,1,0,0,0,3673,3674,1,0,0,0,3674,3676,1,0,0,0,3675,
        3667,1,0,0,0,3675,3669,1,0,0,0,3676,529,1,0,0,0,3677,3679,5,334,
        0,0,3678,3680,5,40,0,0,3679,3678,1,0,0,0,3679,3680,1,0,0,0,3680,
        3681,1,0,0,0,3681,3682,5,529,0,0,3682,3685,3,584,292,0,3683,3684,
        5,535,0,0,3684,3686,3,584,292,0,3685,3683,1,0,0,0,3685,3686,1,0,
        0,0,3686,3687,1,0,0,0,3687,3689,5,530,0,0,3688,3690,3,532,266,0,
        3689,3688,1,0,0,0,3689,3690,1,0,0,0,3690,531,1,0,0,0,3691,3692,5,
        344,0,0,3692,3693,5,529,0,0,3693,3694,3,584,292,0,3694,3695,5,530,
        0,0,3695,533,1,0,0,0,3696,3697,5,90,0,0,3697,3698,5,529,0,0,3698,
        3699,3,356,178,0,3699,3700,5,530,0,0,3700,535,1,0,0,0,3701,3703,
        5,529,0,0,3702,3704,3,584,292,0,3703,3702,1,0,0,0,3703,3704,1,0,
        0,0,3704,3709,1,0,0,0,3705,3706,5,535,0,0,3706,3708,3,584,292,0,
        3707,3705,1,0,0,0,3708,3711,1,0,0,0,3709,3707,1,0,0,0,3709,3710,
        1,0,0,0,3710,3712,1,0,0,0,3711,3709,1,0,0,0,3712,3713,5,530,0,0,
        3713,537,1,0,0,0,3714,3715,3,584,292,0,3715,539,1,0,0,0,3716,3717,
        3,542,271,0,3717,541,1,0,0,0,3718,3719,6,271,-1,0,3719,3720,5,258,
        0,0,3720,3727,3,542,271,3,3721,3722,5,529,0,0,3722,3723,3,542,271,
        0,3723,3724,5,530,0,0,3724,3727,1,0,0,0,3725,3727,3,544,272,0,3726,
        3718,1,0,0,0,3726,3721,1,0,0,0,3726,3725,1,0,0,0,3727,3736,1,0,0,
        0,3728,3729,10,5,0,0,3729,3730,5,274,0,0,3730,3735,3,542,271,6,3731,
        3732,10,4,0,0,3732,3733,5,17,0,0,3733,3735,3,542,271,5,3734,3728,
        1,0,0,0,3734,3731,1,0,0,0,3735,3738,1,0,0,0,3736,3734,1,0,0,0,3736,
        3737,1,0,0,0,3737,543,1,0,0,0,3738,3736,1,0,0,0,3739,3746,3,546,
        273,0,3740,3746,3,550,275,0,3741,3746,3,552,276,0,3742,3746,3,554,
        277,0,3743,3746,3,556,278,0,3744,3746,3,558,279,0,3745,3739,1,0,
        0,0,3745,3740,1,0,0,0,3745,3741,1,0,0,0,3745,3742,1,0,0,0,3745,3743,
        1,0,0,0,3745,3744,1,0,0,0,3746,545,1,0,0,0,3747,3748,3,562,281,0,
        3748,3750,3,548,274,0,3749,3751,7,35,0,0,3750,3749,1,0,0,0,3750,
        3751,1,0,0,0,3751,3754,1,0,0,0,3752,3755,3,560,280,0,3753,3755,3,
        356,178,0,3754,3752,1,0,0,0,3754,3753,1,0,0,0,3755,547,1,0,0,0,3756,
        3757,7,36,0,0,3757,549,1,0,0,0,3758,3760,3,562,281,0,3759,3761,5,
        258,0,0,3760,3759,1,0,0,0,3760,3761,1,0,0,0,3761,3762,1,0,0,0,3762,
        3763,5,33,0,0,3763,3764,3,562,281,0,3764,3765,5,17,0,0,3765,3766,
        3,562,281,0,3766,551,1,0,0,0,3767,3769,3,562,281,0,3768,3770,5,258,
        0,0,3769,3768,1,0,0,0,3769,3770,1,0,0,0,3770,3771,1,0,0,0,3771,3774,
        5,172,0,0,3772,3775,3,560,280,0,3773,3775,3,356,178,0,3774,3772,
        1,0,0,0,3774,3773,1,0,0,0,3775,553,1,0,0,0,3776,3778,5,258,0,0,3777,
        3776,1,0,0,0,3777,3778,1,0,0,0,3778,3779,1,0,0,0,3779,3780,5,140,
        0,0,3780,3781,5,529,0,0,3781,3782,3,356,178,0,3782,3783,5,530,0,
        0,3783,555,1,0,0,0,3784,3786,3,562,281,0,3785,3787,5,258,0,0,3786,
        3785,1,0,0,0,3786,3787,1,0,0,0,3787,3788,1,0,0,0,3788,3789,5,208,
        0,0,3789,3792,3,562,281,0,3790,3791,5,132,0,0,3791,3793,3,562,281,
        0,3792,3790,1,0,0,0,3792,3793,1,0,0,0,3793,557,1,0,0,0,3794,3795,
        3,562,281,0,3795,3797,5,195,0,0,3796,3798,5,258,0,0,3797,3796,1,
        0,0,0,3797,3798,1,0,0,0,3798,3799,1,0,0,0,3799,3800,5,260,0,0,3800,
        559,1,0,0,0,3801,3806,3,562,281,0,3802,3803,5,535,0,0,3803,3805,
        3,562,281,0,3804,3802,1,0,0,0,3805,3808,1,0,0,0,3806,3804,1,0,0,
        0,3806,3807,1,0,0,0,3807,561,1,0,0,0,3808,3806,1,0,0,0,3809,3810,
        6,281,-1,0,3810,3832,3,568,284,0,3811,3832,3,574,287,0,3812,3832,
        3,576,288,0,3813,3814,5,529,0,0,3814,3815,3,562,281,0,3815,3816,
        5,530,0,0,3816,3832,1,0,0,0,3817,3818,5,529,0,0,3818,3819,3,356,
        178,0,3819,3820,5,530,0,0,3820,3832,1,0,0,0,3821,3822,5,534,0,0,
        3822,3832,3,562,281,5,3823,3832,3,66,33,0,3824,3832,3,828,414,0,
        3825,3826,3,564,282,0,3826,3827,5,522,0,0,3827,3829,1,0,0,0,3828,
        3825,1,0,0,0,3828,3829,1,0,0,0,3829,3830,1,0,0,0,3830,3832,3,28,
        14,0,3831,3809,1,0,0,0,3831,3811,1,0,0,0,3831,3812,1,0,0,0,3831,
        3813,1,0,0,0,3831,3817,1,0,0,0,3831,3821,1,0,0,0,3831,3823,1,0,0,
        0,3831,3824,1,0,0,0,3831,3828,1,0,0,0,3832,3839,1,0,0,0,3833,3834,
        10,4,0,0,3834,3835,3,566,283,0,3835,3836,3,562,281,5,3836,3838,1,
        0,0,0,3837,3833,1,0,0,0,3838,3841,1,0,0,0,3839,3837,1,0,0,0,3839,
        3840,1,0,0,0,3840,563,1,0,0,0,3841,3839,1,0,0,0,3842,3843,3,838,
        419,0,3843,565,1,0,0,0,3844,3845,7,37,0,0,3845,567,1,0,0,0,3846,
        3849,3,570,285,0,3847,3849,3,572,286,0,3848,3846,1,0,0,0,3848,3847,
        1,0,0,0,3849,569,1,0,0,0,3850,3851,5,53,0,0,3851,3852,3,562,281,
        0,3852,3853,5,440,0,0,3853,3854,3,562,281,0,3854,3855,5,392,0,0,
        3855,3863,3,562,281,0,3856,3857,5,440,0,0,3857,3858,3,562,281,0,
        3858,3859,5,392,0,0,3859,3860,3,562,281,0,3860,3862,1,0,0,0,3861,
        3856,1,0,0,0,3862,3865,1,0,0,0,3863,3861,1,0,0,0,3863,3864,1,0,0,
        0,3864,3868,1,0,0,0,3865,3863,1,0,0,0,3866,3867,5,124,0,0,3867,3869,
        3,562,281,0,3868,3866,1,0,0,0,3868,3869,1,0,0,0,3869,3870,1,0,0,
        0,3870,3871,5,129,0,0,3871,571,1,0,0,0,3872,3873,5,53,0,0,3873,3874,
        5,440,0,0,3874,3875,3,542,271,0,3875,3876,5,392,0,0,3876,3884,3,
        562,281,0,3877,3878,5,440,0,0,3878,3879,3,542,271,0,3879,3880,5,
        392,0,0,3880,3881,3,562,281,0,3881,3883,1,0,0,0,3882,3877,1,0,0,
        0,3883,3886,1,0,0,0,3884,3882,1,0,0,0,3884,3885,1,0,0,0,3885,3889,
        1,0,0,0,3886,3884,1,0,0,0,3887,3888,5,124,0,0,3888,3890,3,562,281,
        0,3889,3887,1,0,0,0,3889,3890,1,0,0,0,3890,3891,1,0,0,0,3891,3892,
        5,129,0,0,3892,573,1,0,0,0,3893,3894,3,768,384,0,3894,3895,5,529,
        0,0,3895,3900,3,562,281,0,3896,3897,5,535,0,0,3897,3899,3,562,281,
        0,3898,3896,1,0,0,0,3899,3902,1,0,0,0,3900,3898,1,0,0,0,3900,3901,
        1,0,0,0,3901,3903,1,0,0,0,3902,3900,1,0,0,0,3903,3904,5,530,0,0,
        3904,575,1,0,0,0,3905,3906,5,84,0,0,3906,3907,5,529,0,0,3907,3908,
        5,532,0,0,3908,3936,5,530,0,0,3909,3910,5,84,0,0,3910,3911,5,529,
        0,0,3911,3912,5,117,0,0,3912,3913,3,560,280,0,3913,3914,5,530,0,
        0,3914,3936,1,0,0,0,3915,3916,3,578,289,0,3916,3918,5,529,0,0,3917,
        3919,7,38,0,0,3918,3917,1,0,0,0,3918,3919,1,0,0,0,3919,3920,1,0,
        0,0,3920,3921,3,562,281,0,3921,3922,5,530,0,0,3922,3936,1,0,0,0,
        3923,3924,5,482,0,0,3924,3925,5,529,0,0,3925,3928,3,562,281,0,3926,
        3927,5,535,0,0,3927,3929,3,580,290,0,3928,3926,1,0,0,0,3928,3929,
        1,0,0,0,3929,3931,1,0,0,0,3930,3932,3,582,291,0,3931,3930,1,0,0,
        0,3931,3932,1,0,0,0,3932,3933,1,0,0,0,3933,3934,5,530,0,0,3934,3936,
        1,0,0,0,3935,3905,1,0,0,0,3935,3909,1,0,0,0,3935,3915,1,0,0,0,3935,
        3923,1,0,0,0,3936,577,1,0,0,0,3937,3938,7,39,0,0,3938,579,1,0,0,
        0,3939,3940,3,838,419,0,3940,581,1,0,0,0,3941,3942,5,276,0,0,3942,
        3943,5,46,0,0,3943,3945,3,562,281,0,3944,3946,7,31,0,0,3945,3944,
        1,0,0,0,3945,3946,1,0,0,0,3946,3951,1,0,0,0,3947,3948,5,261,0,0,
        3948,3952,5,149,0,0,3949,3950,5,261,0,0,3950,3952,5,202,0,0,3951,
        3947,1,0,0,0,3951,3949,1,0,0,0,3951,3952,1,0,0,0,3952,583,1,0,0,
        0,3953,3963,3,534,267,0,3954,3959,3,588,294,0,3955,3956,5,274,0,
        0,3956,3958,3,588,294,0,3957,3955,1,0,0,0,3958,3961,1,0,0,0,3959,
        3957,1,0,0,0,3959,3960,1,0,0,0,3960,3963,1,0,0,0,3961,3959,1,0,0,
        0,3962,3953,1,0,0,0,3962,3954,1,0,0,0,3963,585,1,0,0,0,3964,3965,
        3,584,292,0,3965,587,1,0,0,0,3966,3971,3,590,295,0,3967,3968,5,17,
        0,0,3968,3970,3,590,295,0,3969,3967,1,0,0,0,3970,3973,1,0,0,0,3971,
        3969,1,0,0,0,3971,3972,1,0,0,0,3972,589,1,0,0,0,3973,3971,1,0,0,
        0,3974,3975,5,258,0,0,3975,3978,3,590,295,0,3976,3978,3,592,296,
        0,3977,3974,1,0,0,0,3977,3976,1,0,0,0,3978,591,1,0,0,0,3979,4013,
        3,594,297,0,3980,3982,5,195,0,0,3981,3983,5,258,0,0,3982,3981,1,
        0,0,0,3982,3983,1,0,0,0,3983,4009,1,0,0,0,3984,4010,5,260,0,0,3985,
        4010,5,238,0,0,3986,4010,5,301,0,0,3987,4010,5,181,0,0,3988,3989,
        5,8,0,0,3989,4010,5,354,0,0,3990,4010,5,126,0,0,3991,3993,5,266,
        0,0,3992,3994,5,412,0,0,3993,3992,1,0,0,0,3993,3994,1,0,0,0,3994,
        3995,1,0,0,0,3995,3997,5,529,0,0,3996,3998,5,271,0,0,3997,3996,1,
        0,0,0,3997,3998,1,0,0,0,3998,3999,1,0,0,0,3999,4004,3,804,402,0,
        4000,4001,5,535,0,0,4001,4003,3,804,402,0,4002,4000,1,0,0,0,4003,
        4006,1,0,0,0,4004,4002,1,0,0,0,4004,4005,1,0,0,0,4005,4007,1,0,0,
        0,4006,4004,1,0,0,0,4007,4008,5,530,0,0,4008,4010,1,0,0,0,4009,3984,
        1,0,0,0,4009,3985,1,0,0,0,4009,3986,1,0,0,0,4009,3987,1,0,0,0,4009,
        3988,1,0,0,0,4009,3990,1,0,0,0,4009,3991,1,0,0,0,4010,4012,1,0,0,
        0,4011,3980,1,0,0,0,4012,4015,1,0,0,0,4013,4011,1,0,0,0,4013,4014,
        1,0,0,0,4014,593,1,0,0,0,4015,4013,1,0,0,0,4016,4023,3,598,299,0,
        4017,4019,3,596,298,0,4018,4020,5,266,0,0,4019,4018,1,0,0,0,4019,
        4020,1,0,0,0,4020,4021,1,0,0,0,4021,4022,3,612,306,0,4022,4024,1,
        0,0,0,4023,4017,1,0,0,0,4023,4024,1,0,0,0,4024,595,1,0,0,0,4025,
        4026,7,40,0,0,4026,597,1,0,0,0,4027,4033,3,602,301,0,4028,4029,3,
        600,300,0,4029,4030,3,602,301,0,4030,4032,1,0,0,0,4031,4028,1,0,
        0,0,4032,4035,1,0,0,0,4033,4031,1,0,0,0,4033,4034,1,0,0,0,4034,599,
        1,0,0,0,4035,4033,1,0,0,0,4036,4043,5,552,0,0,4037,4043,3,840,420,
        0,4038,4043,5,543,0,0,4039,4043,5,549,0,0,4040,4043,3,844,422,0,
        4041,4043,3,842,421,0,4042,4036,1,0,0,0,4042,4037,1,0,0,0,4042,4038,
        1,0,0,0,4042,4039,1,0,0,0,4042,4040,1,0,0,0,4042,4041,1,0,0,0,4043,
        601,1,0,0,0,4044,4059,3,612,306,0,4045,4047,5,258,0,0,4046,4045,
        1,0,0,0,4046,4047,1,0,0,0,4047,4057,1,0,0,0,4048,4049,5,172,0,0,
        4049,4058,3,608,304,0,4050,4051,5,33,0,0,4051,4058,3,610,305,0,4052,
        4053,3,604,302,0,4053,4055,3,612,306,0,4054,4056,3,606,303,0,4055,
        4054,1,0,0,0,4055,4056,1,0,0,0,4056,4058,1,0,0,0,4057,4048,1,0,0,
        0,4057,4050,1,0,0,0,4057,4052,1,0,0,0,4058,4060,1,0,0,0,4059,4046,
        1,0,0,0,4059,4060,1,0,0,0,4060,603,1,0,0,0,4061,4062,7,41,0,0,4062,
        605,1,0,0,0,4063,4064,5,132,0,0,4064,4065,3,612,306,0,4065,607,1,
        0,0,0,4066,4067,5,529,0,0,4067,4068,3,356,178,0,4068,4069,5,530,
        0,0,4069,4085,1,0,0,0,4070,4071,5,529,0,0,4071,4076,3,614,307,0,
        4072,4073,5,535,0,0,4073,4075,3,614,307,0,4074,4072,1,0,0,0,4075,
        4078,1,0,0,0,4076,4074,1,0,0,0,4076,4077,1,0,0,0,4077,4079,1,0,0,
        0,4078,4076,1,0,0,0,4079,4080,5,530,0,0,4080,4085,1,0,0,0,4081,4085,
        3,828,414,0,4082,4085,3,812,406,0,4083,4085,3,822,411,0,4084,4066,
        1,0,0,0,4084,4070,1,0,0,0,4084,4081,1,0,0,0,4084,4082,1,0,0,0,4084,
        4083,1,0,0,0,4085,609,1,0,0,0,4086,4087,3,612,306,0,4087,4088,5,
        17,0,0,4088,4089,3,612,306,0,4089,611,1,0,0,0,4090,4096,3,616,308,
        0,4091,4092,3,846,423,0,4092,4093,3,616,308,0,4093,4095,1,0,0,0,
        4094,4091,1,0,0,0,4095,4098,1,0,0,0,4096,4094,1,0,0,0,4096,4097,
        1,0,0,0,4097,613,1,0,0,0,4098,4096,1,0,0,0,4099,4100,3,612,306,0,
        4100,615,1,0,0,0,4101,4106,3,618,309,0,4102,4103,7,42,0,0,4103,4105,
        3,618,309,0,4104,4102,1,0,0,0,4105,4108,1,0,0,0,4106,4104,1,0,0,
        0,4106,4107,1,0,0,0,4107,617,1,0,0,0,4108,4106,1,0,0,0,4109,4114,
        3,620,310,0,4110,4111,7,43,0,0,4111,4113,3,620,310,0,4112,4110,1,
        0,0,0,4113,4116,1,0,0,0,4114,4112,1,0,0,0,4114,4115,1,0,0,0,4115,
        619,1,0,0,0,4116,4114,1,0,0,0,4117,4126,3,624,312,0,4118,4123,5,
        23,0,0,4119,4124,5,213,0,0,4120,4121,5,393,0,0,4121,4122,5,466,0,
        0,4122,4124,3,614,307,0,4123,4119,1,0,0,0,4123,4120,1,0,0,0,4124,
        4127,1,0,0,0,4125,4127,3,622,311,0,4126,4118,1,0,0,0,4126,4125,1,
        0,0,0,4126,4127,1,0,0,0,4127,621,1,0,0,0,4128,4133,5,96,0,0,4129,
        4130,5,529,0,0,4130,4131,3,614,307,0,4131,4132,5,530,0,0,4132,4134,
        1,0,0,0,4133,4129,1,0,0,0,4133,4134,1,0,0,0,4134,4135,1,0,0,0,4135,
        4136,5,403,0,0,4136,4141,5,341,0,0,4137,4138,5,529,0,0,4138,4139,
        3,614,307,0,4139,4140,5,530,0,0,4140,4142,1,0,0,0,4141,4137,1,0,
        0,0,4141,4142,1,0,0,0,4142,4153,1,0,0,0,4143,4148,5,463,0,0,4144,
        4145,5,529,0,0,4145,4146,3,614,307,0,4146,4147,5,530,0,0,4147,4149,
        1,0,0,0,4148,4144,1,0,0,0,4148,4149,1,0,0,0,4149,4150,1,0,0,0,4150,
        4151,5,403,0,0,4151,4153,5,235,0,0,4152,4128,1,0,0,0,4152,4143,1,
        0,0,0,4153,623,1,0,0,0,4154,4159,3,636,318,0,4155,4156,5,553,0,0,
        4156,4157,3,626,313,0,4157,4158,5,554,0,0,4158,4160,1,0,0,0,4159,
        4155,1,0,0,0,4159,4160,1,0,0,0,4160,625,1,0,0,0,4161,4164,5,18,0,
        0,4162,4164,3,540,270,0,4163,4161,1,0,0,0,4163,4162,1,0,0,0,4164,
        4172,1,0,0,0,4165,4168,5,535,0,0,4166,4169,5,18,0,0,4167,4169,3,
        540,270,0,4168,4166,1,0,0,0,4168,4167,1,0,0,0,4169,4171,1,0,0,0,
        4170,4165,1,0,0,0,4171,4174,1,0,0,0,4172,4170,1,0,0,0,4172,4173,
        1,0,0,0,4173,4185,1,0,0,0,4174,4172,1,0,0,0,4175,4180,3,628,314,
        0,4176,4177,5,535,0,0,4177,4179,3,628,314,0,4178,4176,1,0,0,0,4179,
        4182,1,0,0,0,4180,4178,1,0,0,0,4180,4181,1,0,0,0,4181,4185,1,0,0,
        0,4182,4180,1,0,0,0,4183,4185,3,634,317,0,4184,4163,1,0,0,0,4184,
        4175,1,0,0,0,4184,4183,1,0,0,0,4185,627,1,0,0,0,4186,4187,5,154,
        0,0,4187,4200,3,28,14,0,4188,4189,5,172,0,0,4189,4201,3,536,268,
        0,4190,4192,3,630,315,0,4191,4190,1,0,0,0,4191,4192,1,0,0,0,4192,
        4193,1,0,0,0,4193,4194,5,157,0,0,4194,4195,3,584,292,0,4195,4196,
        5,403,0,0,4196,4197,3,584,292,0,4197,4198,3,632,316,0,4198,4199,
        3,584,292,0,4199,4201,1,0,0,0,4200,4188,1,0,0,0,4200,4191,1,0,0,
        0,4201,629,1,0,0,0,4202,4203,5,208,0,0,4203,4204,3,584,292,0,4204,
        631,1,0,0,0,4205,4206,7,44,0,0,4206,633,1,0,0,0,4207,4208,5,154,
        0,0,4208,4209,5,529,0,0,4209,4214,3,28,14,0,4210,4211,5,535,0,0,
        4211,4213,3,28,14,0,4212,4210,1,0,0,0,4213,4216,1,0,0,0,4214,4212,
        1,0,0,0,4214,4215,1,0,0,0,4215,4217,1,0,0,0,4216,4214,1,0,0,0,4217,
        4218,5,530,0,0,4218,4219,5,172,0,0,4219,4232,5,529,0,0,4220,4233,
        3,356,178,0,4221,4222,5,529,0,0,4222,4227,3,536,268,0,4223,4224,
        5,535,0,0,4224,4226,3,536,268,0,4225,4223,1,0,0,0,4226,4229,1,0,
        0,0,4227,4225,1,0,0,0,4227,4228,1,0,0,0,4228,4230,1,0,0,0,4229,4227,
        1,0,0,0,4230,4231,5,530,0,0,4231,4233,1,0,0,0,4232,4220,1,0,0,0,
        4232,4221,1,0,0,0,4233,4234,1,0,0,0,4234,4235,5,530,0,0,4235,635,
        1,0,0,0,4236,4237,5,534,0,0,4237,4255,3,636,318,0,4238,4239,5,533,
        0,0,4239,4255,3,636,318,0,4240,4241,5,302,0,0,4241,4255,3,636,318,
        0,4242,4243,5,72,0,0,4243,4255,3,636,318,0,4244,4245,5,246,0,0,4245,
        4255,3,636,318,0,4246,4247,5,117,0,0,4247,4255,3,636,318,0,4248,
        4249,5,13,0,0,4249,4255,3,636,318,0,4250,4255,3,638,319,0,4251,4255,
        3,656,328,0,4252,4255,3,658,329,0,4253,4255,3,650,325,0,4254,4236,
        1,0,0,0,4254,4238,1,0,0,0,4254,4240,1,0,0,0,4254,4242,1,0,0,0,4254,
        4244,1,0,0,0,4254,4246,1,0,0,0,4254,4248,1,0,0,0,4254,4250,1,0,0,
        0,4254,4251,1,0,0,0,4254,4252,1,0,0,0,4254,4253,1,0,0,0,4255,637,
        1,0,0,0,4256,4259,3,644,322,0,4257,4259,3,640,320,0,4258,4256,1,
        0,0,0,4258,4257,1,0,0,0,4259,639,1,0,0,0,4260,4262,3,760,380,0,4261,
        4260,1,0,0,0,4261,4262,1,0,0,0,4262,4263,1,0,0,0,4263,4264,5,53,
        0,0,4264,4266,3,650,325,0,4265,4267,3,642,321,0,4266,4265,1,0,0,
        0,4267,4268,1,0,0,0,4268,4266,1,0,0,0,4268,4269,1,0,0,0,4269,4271,
        1,0,0,0,4270,4272,3,648,324,0,4271,4270,1,0,0,0,4271,4272,1,0,0,
        0,4272,4273,1,0,0,0,4273,4275,5,129,0,0,4274,4276,5,53,0,0,4275,
        4274,1,0,0,0,4275,4276,1,0,0,0,4276,4278,1,0,0,0,4277,4279,3,760,
        380,0,4278,4277,1,0,0,0,4278,4279,1,0,0,0,4279,641,1,0,0,0,4280,
        4281,5,440,0,0,4281,4282,3,586,293,0,4282,4285,5,392,0,0,4283,4286,
        3,260,130,0,4284,4286,3,586,293,0,4285,4283,1,0,0,0,4285,4284,1,
        0,0,0,4286,643,1,0,0,0,4287,4289,3,760,380,0,4288,4287,1,0,0,0,4288,
        4289,1,0,0,0,4289,4290,1,0,0,0,4290,4292,5,53,0,0,4291,4293,3,646,
        323,0,4292,4291,1,0,0,0,4293,4294,1,0,0,0,4294,4292,1,0,0,0,4294,
        4295,1,0,0,0,4295,4297,1,0,0,0,4296,4298,3,648,324,0,4297,4296,1,
        0,0,0,4297,4298,1,0,0,0,4298,4299,1,0,0,0,4299,4301,5,129,0,0,4300,
        4302,5,53,0,0,4301,4300,1,0,0,0,4301,4302,1,0,0,0,4302,4304,1,0,
        0,0,4303,4305,3,760,380,0,4304,4303,1,0,0,0,4304,4305,1,0,0,0,4305,
        645,1,0,0,0,4306,4307,5,440,0,0,4307,4308,3,540,270,0,4308,4311,
        5,392,0,0,4309,4312,3,260,130,0,4310,4312,3,586,293,0,4311,4309,
        1,0,0,0,4311,4310,1,0,0,0,4312,647,1,0,0,0,4313,4316,5,124,0,0,4314,
        4317,3,260,130,0,4315,4317,3,586,293,0,4316,4314,1,0,0,0,4316,4315,
        1,0,0,0,4317,649,1,0,0,0,4318,4319,3,826,413,0,4319,4320,3,848,424,
        0,4320,4339,1,0,0,0,4321,4339,3,812,406,0,4322,4339,3,828,414,0,
        4323,4339,3,822,411,0,4324,4336,5,529,0,0,4325,4326,3,356,178,0,
        4326,4330,5,530,0,0,4327,4329,3,358,179,0,4328,4327,1,0,0,0,4329,
        4332,1,0,0,0,4330,4328,1,0,0,0,4330,4331,1,0,0,0,4331,4337,1,0,0,
        0,4332,4330,1,0,0,0,4333,4334,3,652,326,0,4334,4335,5,530,0,0,4335,
        4337,1,0,0,0,4336,4325,1,0,0,0,4336,4333,1,0,0,0,4337,4339,1,0,0,
        0,4338,4318,1,0,0,0,4338,4321,1,0,0,0,4338,4322,1,0,0,0,4338,4323,
        1,0,0,0,4338,4324,1,0,0,0,4339,651,1,0,0,0,4340,4342,3,584,292,0,
        4341,4343,3,654,327,0,4342,4341,1,0,0,0,4342,4343,1,0,0,0,4343,653,
        1,0,0,0,4344,4345,5,535,0,0,4345,4350,3,584,292,0,4346,4347,5,535,
        0,0,4347,4349,3,584,292,0,4348,4346,1,0,0,0,4349,4352,1,0,0,0,4350,
        4348,1,0,0,0,4350,4351,1,0,0,0,4351,655,1,0,0,0,4352,4350,1,0,0,
        0,4353,4362,7,45,0,0,4354,4355,5,529,0,0,4355,4356,3,356,178,0,4356,
        4357,5,530,0,0,4357,4363,1,0,0,0,4358,4359,5,529,0,0,4359,4360,3,
        586,293,0,4360,4361,5,530,0,0,4361,4363,1,0,0,0,4362,4354,1,0,0,
        0,4362,4358,1,0,0,0,4363,657,1,0,0,0,4364,4365,3,660,330,0,4365,
        4367,3,796,398,0,4366,4368,3,666,333,0,4367,4366,1,0,0,0,4367,4368,
        1,0,0,0,4368,4679,1,0,0,0,4369,4370,3,850,425,0,4370,4372,3,798,
        399,0,4371,4373,3,674,337,0,4372,4371,1,0,0,0,4372,4373,1,0,0,0,
        4373,4679,1,0,0,0,4374,4375,5,84,0,0,4375,4381,5,529,0,0,4376,4382,
        5,532,0,0,4377,4379,7,21,0,0,4378,4377,1,0,0,0,4378,4379,1,0,0,0,
        4379,4380,1,0,0,0,4380,4382,3,614,307,0,4381,4376,1,0,0,0,4381,4378,
        1,0,0,0,4382,4383,1,0,0,0,4383,4385,5,530,0,0,4384,4386,3,666,333,
        0,4385,4384,1,0,0,0,4385,4386,1,0,0,0,4386,4679,1,0,0,0,4387,4388,
        7,46,0,0,4388,4395,5,529,0,0,4389,4390,5,236,0,0,4390,4391,5,529,
        0,0,4391,4392,3,356,178,0,4392,4393,5,530,0,0,4393,4396,1,0,0,0,
        4394,4396,3,614,307,0,4395,4389,1,0,0,0,4395,4394,1,0,0,0,4396,4397,
        1,0,0,0,4397,4398,5,20,0,0,4398,4399,3,804,402,0,4399,4400,5,530,
        0,0,4400,4679,1,0,0,0,4401,4402,5,59,0,0,4402,4403,5,529,0,0,4403,
        4404,3,614,307,0,4404,4405,5,425,0,0,4405,4406,5,243,0,0,4406,4407,
        5,530,0,0,4407,4679,1,0,0,0,4408,4409,5,63,0,0,4409,4411,5,529,0,
        0,4410,4412,7,47,0,0,4411,4410,1,0,0,0,4411,4412,1,0,0,0,4412,4413,
        1,0,0,0,4413,4415,3,614,307,0,4414,4416,3,678,339,0,4415,4414,1,
        0,0,0,4415,4416,1,0,0,0,4416,4417,1,0,0,0,4417,4418,5,530,0,0,4418,
        4679,1,0,0,0,4419,4420,3,662,331,0,4420,4422,3,794,397,0,4421,4423,
        3,680,340,0,4422,4421,1,0,0,0,4423,4424,1,0,0,0,4424,4422,1,0,0,
        0,4424,4425,1,0,0,0,4425,4679,1,0,0,0,4426,4427,5,104,0,0,4427,4428,
        5,529,0,0,4428,4430,3,614,307,0,4429,4431,7,48,0,0,4430,4429,1,0,
        0,0,4430,4431,1,0,0,0,4431,4432,1,0,0,0,4432,4433,5,530,0,0,4433,
        4679,1,0,0,0,4434,4435,5,144,0,0,4435,4436,5,529,0,0,4436,4437,3,
        850,425,0,4437,4438,5,157,0,0,4438,4439,3,614,307,0,4439,4440,5,
        530,0,0,4440,4679,1,0,0,0,4441,4442,7,49,0,0,4442,4444,3,796,398,
        0,4443,4445,3,800,400,0,4444,4443,1,0,0,0,4444,4445,1,0,0,0,4445,
        4446,1,0,0,0,4446,4447,3,666,333,0,4447,4679,1,0,0,0,4448,4449,3,
        664,332,0,4449,4450,5,529,0,0,4450,4455,3,586,293,0,4451,4452,5,
        535,0,0,4452,4454,3,586,293,0,4453,4451,1,0,0,0,4454,4457,1,0,0,
        0,4455,4453,1,0,0,0,4455,4456,1,0,0,0,4456,4459,1,0,0,0,4457,4455,
        1,0,0,0,4458,4460,3,682,341,0,4459,4458,1,0,0,0,4459,4460,1,0,0,
        0,4460,4462,1,0,0,0,4461,4463,3,674,337,0,4462,4461,1,0,0,0,4462,
        4463,1,0,0,0,4463,4464,1,0,0,0,4464,4465,5,530,0,0,4465,4679,1,0,
        0,0,4466,4467,5,406,0,0,4467,4468,5,529,0,0,4468,4471,3,586,293,
        0,4469,4470,5,425,0,0,4470,4472,7,50,0,0,4471,4469,1,0,0,0,4471,
        4472,1,0,0,0,4472,4477,1,0,0,0,4473,4474,5,535,0,0,4474,4476,3,586,
        293,0,4475,4473,1,0,0,0,4476,4479,1,0,0,0,4477,4475,1,0,0,0,4477,
        4478,1,0,0,0,4478,4480,1,0,0,0,4479,4477,1,0,0,0,4480,4481,5,530,
        0,0,4481,4679,1,0,0,0,4482,4483,5,407,0,0,4483,4484,5,529,0,0,4484,
        4485,3,586,293,0,4485,4487,5,20,0,0,4486,4488,5,311,0,0,4487,4486,
        1,0,0,0,4487,4488,1,0,0,0,4488,4489,1,0,0,0,4489,4490,3,804,402,
        0,4490,4491,5,530,0,0,4491,4679,1,0,0,0,4492,4493,5,409,0,0,4493,
        4501,5,529,0,0,4494,4496,7,51,0,0,4495,4494,1,0,0,0,4495,4496,1,
        0,0,0,4496,4498,1,0,0,0,4497,4499,3,834,417,0,4498,4497,1,0,0,0,
        4498,4499,1,0,0,0,4499,4500,1,0,0,0,4500,4502,5,157,0,0,4501,4495,
        1,0,0,0,4501,4502,1,0,0,0,4502,4503,1,0,0,0,4503,4504,3,614,307,
        0,4504,4505,5,530,0,0,4505,4679,1,0,0,0,4506,4507,5,449,0,0,4507,
        4508,5,529,0,0,4508,4510,3,586,293,0,4509,4511,3,452,226,0,4510,
        4509,1,0,0,0,4510,4511,1,0,0,0,4511,4512,1,0,0,0,4512,4515,5,530,
        0,0,4513,4514,5,522,0,0,4514,4516,3,824,412,0,4515,4513,1,0,0,0,
        4515,4516,1,0,0,0,4516,4679,1,0,0,0,4517,4518,7,52,0,0,4518,4519,
        5,529,0,0,4519,4524,3,694,347,0,4520,4521,5,535,0,0,4521,4523,3,
        694,347,0,4522,4520,1,0,0,0,4523,4526,1,0,0,0,4524,4522,1,0,0,0,
        4524,4525,1,0,0,0,4525,4527,1,0,0,0,4526,4524,1,0,0,0,4527,4530,
        5,530,0,0,4528,4529,5,522,0,0,4529,4531,3,824,412,0,4530,4528,1,
        0,0,0,4530,4531,1,0,0,0,4531,4679,1,0,0,0,4532,4533,5,453,0,0,4533,
        4535,5,529,0,0,4534,4536,7,53,0,0,4535,4534,1,0,0,0,4535,4536,1,
        0,0,0,4536,4538,1,0,0,0,4537,4539,7,54,0,0,4538,4537,1,0,0,0,4538,
        4539,1,0,0,0,4539,4540,1,0,0,0,4540,4543,3,586,293,0,4541,4542,5,
        535,0,0,4542,4544,3,686,343,0,4543,4541,1,0,0,0,4543,4544,1,0,0,
        0,4544,4552,1,0,0,0,4545,4546,5,535,0,0,4546,4548,3,586,293,0,4547,
        4549,3,718,359,0,4548,4547,1,0,0,0,4548,4549,1,0,0,0,4549,4551,1,
        0,0,0,4550,4545,1,0,0,0,4551,4554,1,0,0,0,4552,4550,1,0,0,0,4552,
        4553,1,0,0,0,4553,4555,1,0,0,0,4554,4552,1,0,0,0,4555,4558,5,530,
        0,0,4556,4557,5,522,0,0,4557,4559,3,824,412,0,4558,4556,1,0,0,0,
        4558,4559,1,0,0,0,4559,4679,1,0,0,0,4560,4561,5,454,0,0,4561,4562,
        5,529,0,0,4562,4564,3,586,293,0,4563,4565,3,684,342,0,4564,4563,
        1,0,0,0,4564,4565,1,0,0,0,4565,4566,1,0,0,0,4566,4567,5,530,0,0,
        4567,4679,1,0,0,0,4568,4569,5,457,0,0,4569,4570,5,529,0,0,4570,4571,
        7,55,0,0,4571,4573,3,614,307,0,4572,4574,5,439,0,0,4573,4572,1,0,
        0,0,4573,4574,1,0,0,0,4574,4575,1,0,0,0,4575,4578,5,530,0,0,4576,
        4577,5,522,0,0,4577,4579,3,824,412,0,4578,4576,1,0,0,0,4578,4579,
        1,0,0,0,4579,4679,1,0,0,0,4580,4581,5,458,0,0,4581,4586,5,529,0,
        0,4582,4583,5,237,0,0,4583,4587,3,836,418,0,4584,4585,5,133,0,0,
        4585,4587,3,614,307,0,4586,4582,1,0,0,0,4586,4584,1,0,0,0,4587,4590,
        1,0,0,0,4588,4589,5,535,0,0,4589,4591,3,614,307,0,4590,4588,1,0,
        0,0,4590,4591,1,0,0,0,4591,4592,1,0,0,0,4592,4595,5,530,0,0,4593,
        4594,5,522,0,0,4594,4596,3,824,412,0,4595,4593,1,0,0,0,4595,4596,
        1,0,0,0,4596,4679,1,0,0,0,4597,4598,5,459,0,0,4598,4599,5,529,0,
        0,4599,4601,3,614,307,0,4600,4602,3,684,342,0,4601,4600,1,0,0,0,
        4601,4602,1,0,0,0,4602,4603,1,0,0,0,4603,4604,5,323,0,0,4604,4608,
        5,77,0,0,4605,4606,5,260,0,0,4606,4607,5,270,0,0,4607,4609,5,126,
        0,0,4608,4605,1,0,0,0,4608,4609,1,0,0,0,4609,4610,1,0,0,0,4610,4613,
        5,530,0,0,4611,4612,5,522,0,0,4612,4614,3,824,412,0,4613,4611,1,
        0,0,0,4613,4614,1,0,0,0,4614,4679,1,0,0,0,4615,4616,5,460,0,0,4616,
        4617,5,529,0,0,4617,4620,3,614,307,0,4618,4619,5,535,0,0,4619,4621,
        3,696,348,0,4620,4618,1,0,0,0,4620,4621,1,0,0,0,4621,4624,1,0,0,
        0,4622,4623,5,535,0,0,4623,4625,3,698,349,0,4624,4622,1,0,0,0,4624,
        4625,1,0,0,0,4625,4626,1,0,0,0,4626,4629,5,530,0,0,4627,4628,5,522,
        0,0,4628,4630,3,824,412,0,4629,4627,1,0,0,0,4629,4630,1,0,0,0,4630,
        4679,1,0,0,0,4631,4632,5,461,0,0,4632,4633,5,529,0,0,4633,4634,7,
        55,0,0,4634,4637,3,614,307,0,4635,4636,5,20,0,0,4636,4638,3,804,
        402,0,4637,4635,1,0,0,0,4637,4638,1,0,0,0,4638,4640,1,0,0,0,4639,
        4641,3,700,350,0,4640,4639,1,0,0,0,4640,4641,1,0,0,0,4641,4643,1,
        0,0,0,4642,4644,3,702,351,0,4643,4642,1,0,0,0,4643,4644,1,0,0,0,
        4644,4646,1,0,0,0,4645,4647,3,704,352,0,4646,4645,1,0,0,0,4646,4647,
        1,0,0,0,4647,4650,1,0,0,0,4648,4649,7,56,0,0,4649,4651,5,107,0,0,
        4650,4648,1,0,0,0,4650,4651,1,0,0,0,4651,4652,1,0,0,0,4652,4655,
        5,530,0,0,4653,4654,5,522,0,0,4654,4656,3,824,412,0,4655,4653,1,
        0,0,0,4655,4656,1,0,0,0,4656,4679,1,0,0,0,4657,4658,5,462,0,0,4658,
        4660,5,529,0,0,4659,4661,3,688,344,0,4660,4659,1,0,0,0,4660,4661,
        1,0,0,0,4661,4662,1,0,0,0,4662,4664,3,614,307,0,4663,4665,3,684,
        342,0,4664,4663,1,0,0,0,4664,4665,1,0,0,0,4665,4671,1,0,0,0,4666,
        4667,5,64,0,0,4667,4668,3,690,345,0,4668,4669,5,535,0,0,4669,4670,
        3,690,345,0,4670,4672,1,0,0,0,4671,4666,1,0,0,0,4671,4672,1,0,0,
        0,4672,4673,1,0,0,0,4673,4676,5,530,0,0,4674,4675,5,522,0,0,4675,
        4677,3,824,412,0,4676,4674,1,0,0,0,4676,4677,1,0,0,0,4677,4679,1,
        0,0,0,4678,4364,1,0,0,0,4678,4369,1,0,0,0,4678,4374,1,0,0,0,4678,
        4387,1,0,0,0,4678,4401,1,0,0,0,4678,4408,1,0,0,0,4678,4419,1,0,0,
        0,4678,4426,1,0,0,0,4678,4434,1,0,0,0,4678,4441,1,0,0,0,4678,4448,
        1,0,0,0,4678,4466,1,0,0,0,4678,4482,1,0,0,0,4678,4492,1,0,0,0,4678,
        4506,1,0,0,0,4678,4517,1,0,0,0,4678,4532,1,0,0,0,4678,4560,1,0,0,
        0,4678,4568,1,0,0,0,4678,4580,1,0,0,0,4678,4597,1,0,0,0,4678,4615,
        1,0,0,0,4678,4631,1,0,0,0,4678,4657,1,0,0,0,4679,659,1,0,0,0,4680,
        4681,7,57,0,0,4681,661,1,0,0,0,4682,4683,7,58,0,0,4683,663,1,0,0,
        0,4684,4685,7,59,0,0,4685,665,1,0,0,0,4686,4687,5,281,0,0,4687,4689,
        5,529,0,0,4688,4690,3,384,192,0,4689,4688,1,0,0,0,4689,4690,1,0,
        0,0,4690,4695,1,0,0,0,4691,4693,3,452,226,0,4692,4694,3,668,334,
        0,4693,4692,1,0,0,0,4693,4694,1,0,0,0,4694,4696,1,0,0,0,4695,4691,
        1,0,0,0,4695,4696,1,0,0,0,4696,4697,1,0,0,0,4697,4698,5,530,0,0,
        4698,667,1,0,0,0,4699,4706,3,670,335,0,4700,4701,5,33,0,0,4701,4702,
        3,672,336,0,4702,4703,5,17,0,0,4703,4704,3,672,336,0,4704,4707,1,
        0,0,0,4705,4707,3,672,336,0,4706,4700,1,0,0,0,4706,4705,1,0,0,0,
        4707,669,1,0,0,0,4708,4709,7,60,0,0,4709,671,1,0,0,0,4710,4711,5,
        413,0,0,4711,4718,5,299,0,0,4712,4713,5,88,0,0,4713,4718,5,330,0,
        0,4714,4715,3,614,307,0,4715,4716,7,61,0,0,4716,4718,1,0,0,0,4717,
        4710,1,0,0,0,4717,4712,1,0,0,0,4717,4714,1,0,0,0,4718,673,1,0,0,
        0,4719,4729,5,425,0,0,4720,4730,5,532,0,0,4721,4726,3,676,338,0,
        4722,4723,5,535,0,0,4723,4725,3,676,338,0,4724,4722,1,0,0,0,4725,
        4728,1,0,0,0,4726,4724,1,0,0,0,4726,4727,1,0,0,0,4727,4730,1,0,0,
        0,4728,4726,1,0,0,0,4729,4720,1,0,0,0,4729,4721,1,0,0,0,4730,675,
        1,0,0,0,4731,4733,5,172,0,0,4732,4734,5,279,0,0,4733,4732,1,0,0,
        0,4733,4734,1,0,0,0,4734,4737,1,0,0,0,4735,4737,5,279,0,0,4736,4731,
        1,0,0,0,4736,4735,1,0,0,0,4736,4737,1,0,0,0,4737,4738,1,0,0,0,4738,
        4740,3,368,184,0,4739,4741,3,718,359,0,4740,4739,1,0,0,0,4740,4741,
        1,0,0,0,4741,677,1,0,0,0,4742,4743,5,276,0,0,4743,4744,5,46,0,0,
        4744,4745,3,614,307,0,4745,679,1,0,0,0,4746,4747,5,445,0,0,4747,
        4748,5,162,0,0,4748,4749,5,529,0,0,4749,4750,3,452,226,0,4750,4751,
        5,530,0,0,4751,4754,1,0,0,0,4752,4754,3,666,333,0,4753,4746,1,0,
        0,0,4753,4752,1,0,0,0,4754,681,1,0,0,0,4755,4773,5,83,0,0,4756,4758,
        5,233,0,0,4757,4759,5,27,0,0,4758,4757,1,0,0,0,4758,4759,1,0,0,0,
        4759,4774,1,0,0,0,4760,4761,5,529,0,0,4761,4766,3,732,366,0,4762,
        4763,5,535,0,0,4763,4765,3,732,366,0,4764,4762,1,0,0,0,4765,4768,
        1,0,0,0,4766,4764,1,0,0,0,4766,4767,1,0,0,0,4767,4769,1,0,0,0,4768,
        4766,1,0,0,0,4769,4770,5,530,0,0,4770,4771,5,428,0,0,4771,4772,3,
        536,268,0,4772,4774,1,0,0,0,4773,4756,1,0,0,0,4773,4760,1,0,0,0,
        4774,683,1,0,0,0,4775,4778,5,288,0,0,4776,4777,5,46,0,0,4777,4779,
        5,427,0,0,4778,4776,1,0,0,0,4778,4779,1,0,0,0,4779,4780,1,0,0,0,
        4780,4782,3,586,293,0,4781,4783,3,718,359,0,4782,4781,1,0,0,0,4782,
        4783,1,0,0,0,4783,4784,1,0,0,0,4784,4785,5,535,0,0,4785,4787,3,586,
        293,0,4786,4788,3,718,359,0,4787,4786,1,0,0,0,4787,4788,1,0,0,0,
        4788,685,1,0,0,0,4789,4790,5,450,0,0,4790,4792,5,529,0,0,4791,4793,
        7,53,0,0,4792,4791,1,0,0,0,4792,4793,1,0,0,0,4793,4795,1,0,0,0,4794,
        4796,7,62,0,0,4795,4794,1,0,0,0,4795,4796,1,0,0,0,4796,4797,1,0,
        0,0,4797,4802,3,694,347,0,4798,4799,5,535,0,0,4799,4801,3,694,347,
        0,4800,4798,1,0,0,0,4801,4804,1,0,0,0,4802,4800,1,0,0,0,4802,4803,
        1,0,0,0,4803,4805,1,0,0,0,4804,4802,1,0,0,0,4805,4806,5,530,0,0,
        4806,687,1,0,0,0,4807,4808,5,456,0,0,4808,4812,5,529,0,0,4809,4810,
        3,614,307,0,4810,4811,3,718,359,0,4811,4813,1,0,0,0,4812,4809,1,
        0,0,0,4812,4813,1,0,0,0,4813,4820,1,0,0,0,4814,4815,5,535,0,0,4815,
        4816,3,614,307,0,4816,4817,3,718,359,0,4817,4819,1,0,0,0,4818,4814,
        1,0,0,0,4819,4822,1,0,0,0,4820,4818,1,0,0,0,4820,4821,1,0,0,0,4821,
        4824,1,0,0,0,4822,4820,1,0,0,0,4823,4825,3,692,346,0,4824,4823,1,
        0,0,0,4824,4825,1,0,0,0,4825,4826,1,0,0,0,4826,4827,5,530,0,0,4827,
        689,1,0,0,0,4828,4839,3,730,365,0,4829,4830,5,154,0,0,4830,4840,
        5,277,0,0,4831,4834,3,804,402,0,4832,4833,5,289,0,0,4833,4835,3,
        614,307,0,4834,4832,1,0,0,0,4834,4835,1,0,0,0,4835,4837,1,0,0,0,
        4836,4838,3,692,346,0,4837,4836,1,0,0,0,4837,4838,1,0,0,0,4838,4840,
        1,0,0,0,4839,4829,1,0,0,0,4839,4831,1,0,0,0,4840,691,1,0,0,0,4841,
        4842,5,106,0,0,4842,4843,3,614,307,0,4843,693,1,0,0,0,4844,4851,
        3,584,292,0,4845,4849,5,20,0,0,4846,4850,3,838,419,0,4847,4848,5,
        133,0,0,4848,4850,3,612,306,0,4849,4846,1,0,0,0,4849,4847,1,0,0,
        0,4850,4852,1,0,0,0,4851,4845,1,0,0,0,4851,4852,1,0,0,0,4852,695,
        1,0,0,0,4853,4857,5,434,0,0,4854,4855,5,247,0,0,4855,4858,5,427,
        0,0,4856,4858,3,586,293,0,4857,4854,1,0,0,0,4857,4856,1,0,0,0,4858,
        697,1,0,0,0,4859,4865,5,376,0,0,4860,4866,5,464,0,0,4861,4863,5,
        247,0,0,4862,4864,5,427,0,0,4863,4862,1,0,0,0,4863,4864,1,0,0,0,
        4864,4866,1,0,0,0,4865,4860,1,0,0,0,4865,4861,1,0,0,0,4866,699,1,
        0,0,0,4867,4868,5,128,0,0,4868,4869,3,614,307,0,4869,701,1,0,0,0,
        4870,4871,5,434,0,0,4871,4872,3,614,307,0,4872,703,1,0,0,0,4873,
        4874,5,247,0,0,4874,4882,5,176,0,0,4875,4879,5,176,0,0,4876,4877,
        5,364,0,0,4877,4878,5,552,0,0,4878,4880,3,614,307,0,4879,4876,1,
        0,0,0,4879,4880,1,0,0,0,4880,4882,1,0,0,0,4881,4873,1,0,0,0,4881,
        4875,1,0,0,0,4882,705,1,0,0,0,4883,4889,5,536,0,0,4884,4889,3,708,
        354,0,4885,4889,3,712,356,0,4886,4889,3,714,357,0,4887,4889,3,710,
        355,0,4888,4883,1,0,0,0,4888,4884,1,0,0,0,4888,4885,1,0,0,0,4888,
        4886,1,0,0,0,4888,4887,1,0,0,0,4889,4891,1,0,0,0,4890,4892,5,541,
        0,0,4891,4890,1,0,0,0,4891,4892,1,0,0,0,4892,707,1,0,0,0,4893,4894,
        5,441,0,0,4894,4900,7,63,0,0,4895,4896,5,141,0,0,4896,4897,7,64,
        0,0,4897,4901,7,65,0,0,4898,4899,5,79,0,0,4899,4901,7,66,0,0,4900,
        4895,1,0,0,0,4900,4898,1,0,0,0,4901,709,1,0,0,0,4902,4903,5,354,
        0,0,4903,4909,3,850,425,0,4904,4910,5,525,0,0,4905,4910,5,270,0,
        0,4906,4910,5,267,0,0,4907,4910,3,830,415,0,4908,4910,3,850,425,
        0,4909,4904,1,0,0,0,4909,4905,1,0,0,0,4909,4906,1,0,0,0,4909,4907,
        1,0,0,0,4909,4908,1,0,0,0,4910,711,1,0,0,0,4911,4912,5,141,0,0,4912,
        713,1,0,0,0,4913,4914,5,559,0,0,4914,715,1,0,0,0,4915,4917,7,67,
        0,0,4916,4918,5,154,0,0,4917,4916,1,0,0,0,4917,4918,1,0,0,0,4918,
        4919,1,0,0,0,4919,4920,3,536,268,0,4920,717,1,0,0,0,4921,4923,5,
        20,0,0,4922,4921,1,0,0,0,4922,4923,1,0,0,0,4923,4926,1,0,0,0,4924,
        4927,3,836,418,0,4925,4927,3,722,361,0,4926,4924,1,0,0,0,4926,4925,
        1,0,0,0,4927,4930,1,0,0,0,4928,4930,5,20,0,0,4929,4922,1,0,0,0,4929,
        4928,1,0,0,0,4930,719,1,0,0,0,4931,4934,3,836,418,0,4932,4934,3,
        722,361,0,4933,4931,1,0,0,0,4933,4932,1,0,0,0,4934,721,1,0,0,0,4935,
        4936,3,834,417,0,4936,723,1,0,0,0,4937,4940,5,442,0,0,4938,4941,
        3,726,363,0,4939,4941,3,540,270,0,4940,4938,1,0,0,0,4940,4939,1,
        0,0,0,4941,725,1,0,0,0,4942,4943,5,88,0,0,4943,4944,5,266,0,0,4944,
        4945,3,68,34,0,4945,727,1,0,0,0,4946,4947,5,192,0,0,4947,4952,3,
        66,33,0,4948,4949,5,535,0,0,4949,4951,3,66,33,0,4950,4948,1,0,0,
        0,4951,4954,1,0,0,0,4952,4950,1,0,0,0,4952,4953,1,0,0,0,4953,4967,
        1,0,0,0,4954,4952,1,0,0,0,4955,4956,5,45,0,0,4956,4957,5,63,0,0,
        4957,4958,5,192,0,0,4958,4963,3,66,33,0,4959,4960,5,535,0,0,4960,
        4962,3,66,33,0,4961,4959,1,0,0,0,4962,4965,1,0,0,0,4963,4961,1,0,
        0,0,4963,4964,1,0,0,0,4964,4967,1,0,0,0,4965,4963,1,0,0,0,4966,4946,
        1,0,0,0,4966,4955,1,0,0,0,4967,729,1,0,0,0,4968,4971,3,836,418,0,
        4969,4971,3,834,417,0,4970,4968,1,0,0,0,4970,4969,1,0,0,0,4971,731,
        1,0,0,0,4972,4973,3,836,418,0,4973,733,1,0,0,0,4974,4975,3,836,418,
        0,4975,735,1,0,0,0,4976,4977,3,836,418,0,4977,737,1,0,0,0,4978,4979,
        3,836,418,0,4979,739,1,0,0,0,4980,4981,3,836,418,0,4981,741,1,0,
        0,0,4982,4983,3,838,419,0,4983,743,1,0,0,0,4984,4989,3,836,418,0,
        4985,4986,5,522,0,0,4986,4988,3,838,419,0,4987,4985,1,0,0,0,4988,
        4991,1,0,0,0,4989,4987,1,0,0,0,4989,4990,1,0,0,0,4990,4994,1,0,0,
        0,4991,4989,1,0,0,0,4992,4993,5,537,0,0,4993,4995,3,784,392,0,4994,
        4992,1,0,0,0,4994,4995,1,0,0,0,4995,745,1,0,0,0,4996,4997,3,836,
        418,0,4997,747,1,0,0,0,4998,5001,3,836,418,0,4999,5000,5,522,0,0,
        5000,5002,3,838,419,0,5001,4999,1,0,0,0,5001,5002,1,0,0,0,5002,749,
        1,0,0,0,5003,5004,3,836,418,0,5004,751,1,0,0,0,5005,5006,3,836,418,
        0,5006,753,1,0,0,0,5007,5012,3,836,418,0,5008,5009,5,522,0,0,5009,
        5011,3,838,419,0,5010,5008,1,0,0,0,5011,5014,1,0,0,0,5012,5010,1,
        0,0,0,5012,5013,1,0,0,0,5013,755,1,0,0,0,5014,5012,1,0,0,0,5015,
        5016,3,836,418,0,5016,757,1,0,0,0,5017,5022,3,836,418,0,5018,5019,
        5,522,0,0,5019,5021,3,838,419,0,5020,5018,1,0,0,0,5021,5024,1,0,
        0,0,5022,5020,1,0,0,0,5022,5023,1,0,0,0,5023,5027,1,0,0,0,5024,5022,
        1,0,0,0,5025,5026,5,537,0,0,5026,5028,3,784,392,0,5027,5025,1,0,
        0,0,5027,5028,1,0,0,0,5028,759,1,0,0,0,5029,5030,3,838,419,0,5030,
        761,1,0,0,0,5031,5036,3,838,419,0,5032,5033,5,522,0,0,5033,5035,
        3,838,419,0,5034,5032,1,0,0,0,5035,5038,1,0,0,0,5036,5034,1,0,0,
        0,5036,5037,1,0,0,0,5037,763,1,0,0,0,5038,5036,1,0,0,0,5039,5044,
        3,838,419,0,5040,5041,5,522,0,0,5041,5043,3,838,419,0,5042,5040,
        1,0,0,0,5043,5046,1,0,0,0,5044,5042,1,0,0,0,5044,5045,1,0,0,0,5045,
        765,1,0,0,0,5046,5044,1,0,0,0,5047,5052,3,836,418,0,5048,5049,5,
        522,0,0,5049,5051,3,838,419,0,5050,5048,1,0,0,0,5051,5054,1,0,0,
        0,5052,5050,1,0,0,0,5052,5053,1,0,0,0,5053,767,1,0,0,0,5054,5052,
        1,0,0,0,5055,5058,3,836,418,0,5056,5057,5,522,0,0,5057,5059,3,838,
        419,0,5058,5056,1,0,0,0,5058,5059,1,0,0,0,5059,769,1,0,0,0,5060,
        5061,3,742,371,0,5061,5062,5,522,0,0,5062,5064,1,0,0,0,5063,5060,
        1,0,0,0,5063,5064,1,0,0,0,5064,5065,1,0,0,0,5065,5066,3,838,419,
        0,5066,771,1,0,0,0,5067,5070,3,836,418,0,5068,5069,5,522,0,0,5069,
        5071,3,838,419,0,5070,5068,1,0,0,0,5070,5071,1,0,0,0,5071,773,1,
        0,0,0,5072,5073,5,555,0,0,5073,5075,3,790,395,0,5074,5072,1,0,0,
        0,5074,5075,1,0,0,0,5075,5076,1,0,0,0,5076,5079,3,838,419,0,5077,
        5078,5,522,0,0,5078,5080,3,838,419,0,5079,5077,1,0,0,0,5079,5080,
        1,0,0,0,5080,5083,1,0,0,0,5081,5083,3,812,406,0,5082,5074,1,0,0,
        0,5082,5081,1,0,0,0,5083,775,1,0,0,0,5084,5085,3,836,418,0,5085,
        777,1,0,0,0,5086,5089,3,836,418,0,5087,5089,3,812,406,0,5088,5086,
        1,0,0,0,5088,5087,1,0,0,0,5089,779,1,0,0,0,5090,5093,3,836,418,0,
        5091,5093,3,812,406,0,5092,5090,1,0,0,0,5092,5091,1,0,0,0,5093,781,
        1,0,0,0,5094,5097,3,836,418,0,5095,5096,5,522,0,0,5096,5098,3,838,
        419,0,5097,5095,1,0,0,0,5097,5098,1,0,0,0,5098,783,1,0,0,0,5099,
        5100,3,836,418,0,5100,785,1,0,0,0,5101,5106,3,836,418,0,5102,5103,
        5,522,0,0,5103,5105,3,838,419,0,5104,5102,1,0,0,0,5105,5108,1,0,
        0,0,5106,5104,1,0,0,0,5106,5107,1,0,0,0,5107,787,1,0,0,0,5108,5106,
        1,0,0,0,5109,5112,3,836,418,0,5110,5111,5,522,0,0,5111,5113,3,838,
        419,0,5112,5110,1,0,0,0,5112,5113,1,0,0,0,5113,5117,1,0,0,0,5114,
        5115,5,537,0,0,5115,5118,3,784,392,0,5116,5118,3,716,358,0,5117,
        5114,1,0,0,0,5117,5116,1,0,0,0,5117,5118,1,0,0,0,5118,789,1,0,0,
        0,5119,5124,3,838,419,0,5120,5121,5,522,0,0,5121,5123,3,838,419,
        0,5122,5120,1,0,0,0,5123,5126,1,0,0,0,5124,5122,1,0,0,0,5124,5125,
        1,0,0,0,5125,791,1,0,0,0,5126,5124,1,0,0,0,5127,5128,5,200,0,0,5128,
        5129,5,529,0,0,5129,5130,5,496,0,0,5130,5131,7,32,0,0,5131,5132,
        3,452,226,0,5132,5134,5,530,0,0,5133,5135,3,666,333,0,5134,5133,
        1,0,0,0,5134,5135,1,0,0,0,5135,793,1,0,0,0,5136,5138,5,529,0,0,5137,
        5139,3,802,401,0,5138,5137,1,0,0,0,5138,5139,1,0,0,0,5139,5144,1,
        0,0,0,5140,5141,5,535,0,0,5141,5143,3,802,401,0,5142,5140,1,0,0,
        0,5143,5146,1,0,0,0,5144,5142,1,0,0,0,5144,5145,1,0,0,0,5145,5147,
        1,0,0,0,5146,5144,1,0,0,0,5147,5149,5,530,0,0,5148,5150,3,792,396,
        0,5149,5148,1,0,0,0,5149,5150,1,0,0,0,5150,795,1,0,0,0,5151,5156,
        5,529,0,0,5152,5154,3,802,401,0,5153,5155,3,800,400,0,5154,5153,
        1,0,0,0,5154,5155,1,0,0,0,5155,5157,1,0,0,0,5156,5152,1,0,0,0,5156,
        5157,1,0,0,0,5157,5165,1,0,0,0,5158,5159,5,535,0,0,5159,5161,3,802,
        401,0,5160,5162,3,800,400,0,5161,5160,1,0,0,0,5161,5162,1,0,0,0,
        5162,5164,1,0,0,0,5163,5158,1,0,0,0,5164,5167,1,0,0,0,5165,5163,
        1,0,0,0,5165,5166,1,0,0,0,5166,5168,1,0,0,0,5167,5165,1,0,0,0,5168,
        5170,5,530,0,0,5169,5171,3,792,396,0,5170,5169,1,0,0,0,5170,5171,
        1,0,0,0,5171,797,1,0,0,0,5172,5173,5,529,0,0,5173,5186,3,28,14,0,
        5174,5177,5,535,0,0,5175,5178,3,830,415,0,5176,5178,5,260,0,0,5177,
        5175,1,0,0,0,5177,5176,1,0,0,0,5178,5184,1,0,0,0,5179,5182,5,535,
        0,0,5180,5183,3,830,415,0,5181,5183,5,260,0,0,5182,5180,1,0,0,0,
        5182,5181,1,0,0,0,5183,5185,1,0,0,0,5184,5179,1,0,0,0,5184,5185,
        1,0,0,0,5185,5187,1,0,0,0,5186,5174,1,0,0,0,5186,5187,1,0,0,0,5187,
        5188,1,0,0,0,5188,5208,5,425,0,0,5189,5190,3,788,394,0,5190,5191,
        5,522,0,0,5191,5192,5,532,0,0,5192,5209,1,0,0,0,5193,5209,5,532,
        0,0,5194,5196,3,584,292,0,5195,5197,3,718,359,0,5196,5195,1,0,0,
        0,5196,5197,1,0,0,0,5197,5205,1,0,0,0,5198,5199,5,535,0,0,5199,5201,
        3,584,292,0,5200,5202,3,718,359,0,5201,5200,1,0,0,0,5201,5202,1,
        0,0,0,5202,5204,1,0,0,0,5203,5198,1,0,0,0,5204,5207,1,0,0,0,5205,
        5203,1,0,0,0,5205,5206,1,0,0,0,5206,5209,1,0,0,0,5207,5205,1,0,0,
        0,5208,5189,1,0,0,0,5208,5193,1,0,0,0,5208,5194,1,0,0,0,5209,5210,
        1,0,0,0,5210,5212,5,530,0,0,5211,5213,3,792,396,0,5212,5211,1,0,
        0,0,5212,5213,1,0,0,0,5213,799,1,0,0,0,5214,5215,7,68,0,0,5215,5216,
        5,261,0,0,5216,801,1,0,0,0,5217,5218,3,836,418,0,5218,5219,5,552,
        0,0,5219,5220,5,549,0,0,5220,5222,1,0,0,0,5221,5217,1,0,0,0,5221,
        5222,1,0,0,0,5222,5223,1,0,0,0,5223,5224,3,586,293,0,5224,803,1,
        0,0,0,5225,5234,3,806,403,0,5226,5228,5,311,0,0,5227,5226,1,0,0,
        0,5227,5228,1,0,0,0,5228,5229,1,0,0,0,5229,5231,3,762,381,0,5230,
        5232,7,12,0,0,5231,5230,1,0,0,0,5231,5232,1,0,0,0,5232,5234,1,0,
        0,0,5233,5225,1,0,0,0,5233,5227,1,0,0,0,5234,805,1,0,0,0,5235,5237,
        3,810,405,0,5236,5238,3,808,404,0,5237,5236,1,0,0,0,5237,5238,1,
        0,0,0,5238,5245,1,0,0,0,5239,5241,5,444,0,0,5240,5242,5,213,0,0,
        5241,5240,1,0,0,0,5241,5242,1,0,0,0,5242,5243,1,0,0,0,5243,5244,
        5,393,0,0,5244,5246,5,466,0,0,5245,5239,1,0,0,0,5245,5246,1,0,0,
        0,5246,5264,1,0,0,0,5247,5248,5,191,0,0,5248,5253,7,69,0,0,5249,
        5250,5,529,0,0,5250,5251,3,586,293,0,5251,5252,5,530,0,0,5252,5254,
        1,0,0,0,5253,5249,1,0,0,0,5253,5254,1,0,0,0,5254,5255,1,0,0,0,5255,
        5256,5,403,0,0,5256,5261,7,70,0,0,5257,5258,5,529,0,0,5258,5259,
        3,586,293,0,5259,5260,5,530,0,0,5260,5262,1,0,0,0,5261,5257,1,0,
        0,0,5261,5262,1,0,0,0,5262,5264,1,0,0,0,5263,5235,1,0,0,0,5263,5247,
        1,0,0,0,5264,807,1,0,0,0,5265,5266,5,529,0,0,5266,5269,3,830,415,
        0,5267,5268,5,535,0,0,5268,5270,3,830,415,0,5269,5267,1,0,0,0,5269,
        5270,1,0,0,0,5270,5272,1,0,0,0,5271,5273,7,71,0,0,5272,5271,1,0,
        0,0,5272,5273,1,0,0,0,5273,5274,1,0,0,0,5274,5275,5,530,0,0,5275,
        809,1,0,0,0,5276,5339,5,37,0,0,5277,5339,5,295,0,0,5278,5339,5,239,
        0,0,5279,5339,5,36,0,0,5280,5339,5,35,0,0,5281,5339,5,38,0,0,5282,
        5339,5,240,0,0,5283,5339,5,296,0,0,5284,5339,5,297,0,0,5285,5339,
        5,342,0,0,5286,5339,5,361,0,0,5287,5339,5,362,0,0,5288,5339,5,264,
        0,0,5289,5339,5,101,0,0,5290,5339,5,189,0,0,5291,5339,5,188,0,0,
        5292,5339,5,263,0,0,5293,5339,5,366,0,0,5294,5339,5,262,0,0,5295,
        5339,5,102,0,0,5296,5298,5,119,0,0,5297,5299,5,300,0,0,5298,5297,
        1,0,0,0,5298,5299,1,0,0,0,5299,5339,1,0,0,0,5300,5339,5,151,0,0,
        5301,5339,5,309,0,0,5302,5339,5,242,0,0,5303,5305,5,219,0,0,5304,
        5306,5,306,0,0,5305,5304,1,0,0,0,5305,5306,1,0,0,0,5306,5339,1,0,
        0,0,5307,5339,5,55,0,0,5308,5339,5,57,0,0,5309,5339,5,430,0,0,5310,
        5339,5,429,0,0,5311,5339,5,383,0,0,5312,5339,5,306,0,0,5313,5339,
        5,42,0,0,5314,5339,5,95,0,0,5315,5339,5,331,0,0,5316,5339,5,423,
        0,0,5317,5339,5,463,0,0,5318,5339,5,235,0,0,5319,5339,5,96,0,0,5320,
        5339,5,168,0,0,5321,5339,5,229,0,0,5322,5339,5,341,0,0,5323,5339,
        5,399,0,0,5324,5339,5,400,0,0,5325,5339,5,401,0,0,5326,5339,5,398,
        0,0,5327,5339,5,394,0,0,5328,5339,5,397,0,0,5329,5339,5,396,0,0,
        5330,5339,5,395,0,0,5331,5339,5,465,0,0,5332,5339,5,121,0,0,5333,
        5339,5,34,0,0,5334,5339,5,39,0,0,5335,5339,5,60,0,0,5336,5339,5,
        244,0,0,5337,5339,5,231,0,0,5338,5276,1,0,0,0,5338,5277,1,0,0,0,
        5338,5278,1,0,0,0,5338,5279,1,0,0,0,5338,5280,1,0,0,0,5338,5281,
        1,0,0,0,5338,5282,1,0,0,0,5338,5283,1,0,0,0,5338,5284,1,0,0,0,5338,
        5285,1,0,0,0,5338,5286,1,0,0,0,5338,5287,1,0,0,0,5338,5288,1,0,0,
        0,5338,5289,1,0,0,0,5338,5290,1,0,0,0,5338,5291,1,0,0,0,5338,5292,
        1,0,0,0,5338,5293,1,0,0,0,5338,5294,1,0,0,0,5338,5295,1,0,0,0,5338,
        5296,1,0,0,0,5338,5300,1,0,0,0,5338,5301,1,0,0,0,5338,5302,1,0,0,
        0,5338,5303,1,0,0,0,5338,5307,1,0,0,0,5338,5308,1,0,0,0,5338,5309,
        1,0,0,0,5338,5310,1,0,0,0,5338,5311,1,0,0,0,5338,5312,1,0,0,0,5338,
        5313,1,0,0,0,5338,5314,1,0,0,0,5338,5315,1,0,0,0,5338,5316,1,0,0,
        0,5338,5317,1,0,0,0,5338,5318,1,0,0,0,5338,5319,1,0,0,0,5338,5320,
        1,0,0,0,5338,5321,1,0,0,0,5338,5322,1,0,0,0,5338,5323,1,0,0,0,5338,
        5324,1,0,0,0,5338,5325,1,0,0,0,5338,5326,1,0,0,0,5338,5327,1,0,0,
        0,5338,5328,1,0,0,0,5338,5329,1,0,0,0,5338,5330,1,0,0,0,5338,5331,
        1,0,0,0,5338,5332,1,0,0,0,5338,5333,1,0,0,0,5338,5334,1,0,0,0,5338,
        5335,1,0,0,0,5338,5336,1,0,0,0,5338,5337,1,0,0,0,5339,811,1,0,0,
        0,5340,5344,5,539,0,0,5341,5342,5,540,0,0,5342,5344,5,523,0,0,5343,
        5340,1,0,0,0,5343,5341,1,0,0,0,5344,5353,1,0,0,0,5345,5347,5,179,
        0,0,5346,5345,1,0,0,0,5346,5347,1,0,0,0,5347,5351,1,0,0,0,5348,5352,
        5,539,0,0,5349,5350,5,540,0,0,5350,5352,5,523,0,0,5351,5348,1,0,
        0,0,5351,5349,1,0,0,0,5352,5354,1,0,0,0,5353,5346,1,0,0,0,5353,5354,
        1,0,0,0,5354,5359,1,0,0,0,5355,5356,5,522,0,0,5356,5358,3,824,412,
        0,5357,5355,1,0,0,0,5358,5361,1,0,0,0,5359,5357,1,0,0,0,5359,5360,
        1,0,0,0,5360,5367,1,0,0,0,5361,5359,1,0,0,0,5362,5367,3,814,407,
        0,5363,5367,3,816,408,0,5364,5367,3,818,409,0,5365,5367,3,820,410,
        0,5366,5343,1,0,0,0,5366,5362,1,0,0,0,5366,5363,1,0,0,0,5366,5364,
        1,0,0,0,5366,5365,1,0,0,0,5367,813,1,0,0,0,5368,5369,5,7,0,0,5369,
        5370,5,476,0,0,5370,815,1,0,0,0,5371,5372,5,476,0,0,5372,817,1,0,
        0,0,5373,5374,5,7,0,0,5374,5375,5,477,0,0,5375,819,1,0,0,0,5376,
        5377,5,477,0,0,5377,821,1,0,0,0,5378,5383,3,824,412,0,5379,5380,
        5,522,0,0,5380,5382,3,824,412,0,5381,5379,1,0,0,0,5382,5385,1,0,
        0,0,5383,5381,1,0,0,0,5383,5384,1,0,0,0,5384,823,1,0,0,0,5385,5383,
        1,0,0,0,5386,5387,5,555,0,0,5387,5389,3,790,395,0,5388,5386,1,0,
        0,0,5388,5389,1,0,0,0,5389,5390,1,0,0,0,5390,5395,3,838,419,0,5391,
        5392,5,522,0,0,5392,5394,3,838,419,0,5393,5391,1,0,0,0,5394,5397,
        1,0,0,0,5395,5393,1,0,0,0,5395,5396,1,0,0,0,5396,5399,1,0,0,0,5397,
        5395,1,0,0,0,5398,5400,3,794,397,0,5399,5398,1,0,0,0,5399,5400,1,
        0,0,0,5400,825,1,0,0,0,5401,5402,5,555,0,0,5402,5404,3,790,395,0,
        5403,5401,1,0,0,0,5403,5404,1,0,0,0,5404,5405,1,0,0,0,5405,5410,
        3,838,419,0,5406,5407,5,522,0,0,5407,5409,3,838,419,0,5408,5406,
        1,0,0,0,5409,5412,1,0,0,0,5410,5408,1,0,0,0,5410,5411,1,0,0,0,5411,
        827,1,0,0,0,5412,5410,1,0,0,0,5413,5416,5,394,0,0,5414,5417,3,834,
        417,0,5415,5417,3,812,406,0,5416,5414,1,0,0,0,5416,5415,1,0,0,0,
        5417,5422,1,0,0,0,5418,5419,5,23,0,0,5419,5420,5,393,0,0,5420,5421,
        5,466,0,0,5421,5423,3,834,417,0,5422,5418,1,0,0,0,5422,5423,1,0,
        0,0,5423,5476,1,0,0,0,5424,5428,5,191,0,0,5425,5429,3,834,417,0,
        5426,5429,3,812,406,0,5427,5429,3,824,412,0,5428,5425,1,0,0,0,5428,
        5426,1,0,0,0,5428,5427,1,0,0,0,5429,5430,1,0,0,0,5430,5444,7,72,
        0,0,5431,5434,5,529,0,0,5432,5435,5,523,0,0,5433,5435,3,812,406,
        0,5434,5432,1,0,0,0,5434,5433,1,0,0,0,5435,5441,1,0,0,0,5436,5439,
        5,535,0,0,5437,5440,5,523,0,0,5438,5440,3,812,406,0,5439,5437,1,
        0,0,0,5439,5438,1,0,0,0,5440,5442,1,0,0,0,5441,5436,1,0,0,0,5441,
        5442,1,0,0,0,5442,5443,1,0,0,0,5443,5445,5,530,0,0,5444,5431,1,0,
        0,0,5444,5445,1,0,0,0,5445,5461,1,0,0,0,5446,5459,5,403,0,0,5447,
        5460,5,96,0,0,5448,5460,5,168,0,0,5449,5460,5,229,0,0,5450,5457,
        5,341,0,0,5451,5454,5,529,0,0,5452,5455,5,523,0,0,5453,5455,3,812,
        406,0,5454,5452,1,0,0,0,5454,5453,1,0,0,0,5455,5456,1,0,0,0,5456,
        5458,5,530,0,0,5457,5451,1,0,0,0,5457,5458,1,0,0,0,5458,5460,1,0,
        0,0,5459,5447,1,0,0,0,5459,5448,1,0,0,0,5459,5449,1,0,0,0,5459,5450,
        1,0,0,0,5460,5462,1,0,0,0,5461,5446,1,0,0,0,5461,5462,1,0,0,0,5462,
        5476,1,0,0,0,5463,5476,3,830,415,0,5464,5465,5,95,0,0,5465,5476,
        3,834,417,0,5466,5476,3,834,417,0,5467,5476,5,260,0,0,5468,5476,
        5,410,0,0,5469,5476,5,146,0,0,5470,5476,5,98,0,0,5471,5476,5,353,
        0,0,5472,5476,5,230,0,0,5473,5476,5,224,0,0,5474,5476,5,106,0,0,
        5475,5413,1,0,0,0,5475,5424,1,0,0,0,5475,5463,1,0,0,0,5475,5464,
        1,0,0,0,5475,5466,1,0,0,0,5475,5467,1,0,0,0,5475,5468,1,0,0,0,5475,
        5469,1,0,0,0,5475,5470,1,0,0,0,5475,5471,1,0,0,0,5475,5472,1,0,0,
        0,5475,5473,1,0,0,0,5475,5474,1,0,0,0,5476,829,1,0,0,0,5477,5478,
        7,73,0,0,5478,831,1,0,0,0,5479,5480,5,534,0,0,5480,5481,3,830,415,
        0,5481,833,1,0,0,0,5482,5483,7,74,0,0,5483,835,1,0,0,0,5484,5485,
        5,555,0,0,5485,5487,3,790,395,0,5486,5484,1,0,0,0,5486,5487,1,0,
        0,0,5487,5488,1,0,0,0,5488,5489,3,838,419,0,5489,837,1,0,0,0,5490,
        5493,3,850,425,0,5491,5493,5,526,0,0,5492,5490,1,0,0,0,5492,5491,
        1,0,0,0,5493,839,1,0,0,0,5494,5502,5,545,0,0,5495,5496,5,543,0,0,
        5496,5502,5,549,0,0,5497,5498,5,548,0,0,5498,5502,5,552,0,0,5499,
        5500,5,546,0,0,5500,5502,5,552,0,0,5501,5494,1,0,0,0,5501,5495,1,
        0,0,0,5501,5497,1,0,0,0,5501,5499,1,0,0,0,5502,841,1,0,0,0,5503,
        5507,5,544,0,0,5504,5505,5,549,0,0,5505,5507,5,552,0,0,5506,5503,
        1,0,0,0,5506,5504,1,0,0,0,5507,843,1,0,0,0,5508,5512,5,542,0,0,5509,
        5510,5,543,0,0,5510,5512,5,552,0,0,5511,5508,1,0,0,0,5511,5509,1,
        0,0,0,5512,845,1,0,0,0,5513,5517,5,550,0,0,5514,5515,5,551,0,0,5515,
        5517,5,551,0,0,5516,5513,1,0,0,0,5516,5514,1,0,0,0,5517,847,1,0,
        0,0,5518,5519,5,529,0,0,5519,5520,5,533,0,0,5520,5521,5,530,0,0,
        5521,849,1,0,0,0,5522,5523,7,75,0,0,5523,851,1,0,0,0,712,855,860,
        868,878,894,898,903,908,917,919,925,936,952,956,966,973,980,987,
        992,1005,1021,1024,1027,1032,1040,1057,1068,1072,1076,1080,1083,
        1088,1093,1107,1118,1127,1145,1150,1155,1169,1176,1181,1191,1202,
        1208,1211,1214,1217,1222,1227,1233,1236,1242,1262,1266,1269,1272,
        1275,1278,1291,1295,1298,1301,1308,1312,1315,1318,1322,1325,1328,
        1331,1341,1348,1350,1365,1377,1385,1388,1395,1410,1422,1432,1438,
        1448,1451,1454,1475,1480,1484,1492,1500,1505,1508,1510,1513,1522,
        1525,1528,1532,1535,1543,1548,1553,1560,1570,1588,1595,1605,1615,
        1622,1627,1633,1643,1648,1655,1660,1666,1669,1672,1689,1694,1703,
        1708,1714,1717,1724,1727,1734,1739,1743,1748,1753,1763,1769,1779,
        1784,1791,1797,1801,1804,1807,1824,1829,1837,1851,1858,1868,1870,
        1891,1907,1916,1921,1925,1928,1938,1950,1956,1971,1975,1980,1983,
        1996,2000,2012,2017,2021,2025,2031,2034,2037,2064,2070,2074,2080,
        2092,2101,2103,2109,2113,2116,2125,2136,2140,2143,2147,2155,2164,
        2173,2175,2206,2210,2217,2221,2225,2229,2241,2245,2259,2265,2272,
        2277,2287,2293,2295,2304,2314,2319,2334,2338,2341,2345,2350,2354,
        2360,2368,2375,2380,2382,2387,2392,2400,2407,2411,2414,2428,2434,
        2442,2452,2463,2466,2473,2476,2483,2494,2500,2504,2514,2517,2523,
        2534,2536,2538,2541,2545,2548,2552,2556,2561,2572,2576,2584,2587,
        2592,2594,2603,2613,2618,2624,2628,2631,2639,2642,2646,2650,2655,
        2658,2662,2666,2670,2682,2696,2701,2705,2714,2718,2726,2729,2732,
        2736,2739,2742,2745,2749,2759,2766,2773,2778,2783,2790,2796,2806,
        2808,2813,2817,2820,2824,2827,2829,2832,2835,2839,2844,2848,2850,
        2863,2870,2884,2887,2897,2901,2909,2921,2931,2936,2946,2954,2957,
        2963,2967,2972,2982,2987,3000,3012,3017,3027,3032,3034,3039,3043,
        3049,3053,3066,3070,3080,3083,3085,3090,3099,3112,3120,3129,3133,
        3138,3149,3151,3167,3172,3178,3184,3202,3209,3212,3220,3229,3231,
        3235,3238,3243,3245,3249,3261,3270,3278,3283,3287,3292,3295,3303,
        3311,3317,3320,3323,3331,3341,3353,3360,3364,3368,3371,3374,3379,
        3384,3387,3398,3403,3406,3409,3415,3418,3424,3427,3430,3435,3438,
        3446,3452,3462,3467,3476,3486,3490,3492,3495,3507,3511,3514,3534,
        3539,3544,3551,3554,3563,3570,3575,3579,3587,3593,3601,3604,3612,
        3620,3623,3626,3635,3641,3647,3649,3662,3664,3673,3675,3679,3685,
        3689,3703,3709,3726,3734,3736,3745,3750,3754,3760,3769,3774,3777,
        3786,3792,3797,3806,3828,3831,3839,3848,3863,3868,3884,3889,3900,
        3918,3928,3931,3935,3945,3951,3959,3962,3971,3977,3982,3993,3997,
        4004,4009,4013,4019,4023,4033,4042,4046,4055,4057,4059,4076,4084,
        4096,4106,4114,4123,4126,4133,4141,4148,4152,4159,4163,4168,4172,
        4180,4184,4191,4200,4214,4227,4232,4254,4258,4261,4268,4271,4275,
        4278,4285,4288,4294,4297,4301,4304,4311,4316,4330,4336,4338,4342,
        4350,4362,4367,4372,4378,4381,4385,4395,4411,4415,4424,4430,4444,
        4455,4459,4462,4471,4477,4487,4495,4498,4501,4510,4515,4524,4530,
        4535,4538,4543,4548,4552,4558,4564,4573,4578,4586,4590,4595,4601,
        4608,4613,4620,4624,4629,4637,4640,4643,4646,4650,4655,4660,4664,
        4671,4676,4678,4689,4693,4695,4706,4717,4726,4729,4733,4736,4740,
        4753,4758,4766,4773,4778,4782,4787,4792,4795,4802,4812,4820,4824,
        4834,4837,4839,4849,4851,4857,4863,4865,4879,4881,4888,4891,4900,
        4909,4917,4922,4926,4929,4933,4940,4952,4963,4966,4970,4989,4994,
        5001,5012,5022,5027,5036,5044,5052,5058,5063,5070,5074,5079,5082,
        5088,5092,5097,5106,5112,5117,5124,5134,5138,5144,5149,5154,5156,
        5161,5165,5170,5177,5182,5184,5186,5196,5201,5205,5208,5212,5221,
        5227,5231,5233,5237,5241,5245,5253,5261,5263,5269,5272,5298,5305,
        5338,5343,5346,5351,5353,5359,5366,5383,5388,5395,5399,5403,5410,
        5416,5422,5428,5434,5439,5441,5444,5454,5457,5459,5461,5475,5486,
        5492,5501,5506,5511,5516
    ]

class HanaParser ( Parser ):

    grammarFileName = "Hana.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'R'", "'''", "'=>'", "'..'", "'!='", 
                     "'<>'", "'::'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'%'", "'&'", 
                     "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
                     "'@'", "':='", "<INVALID>", "':'", "';'", "'<='", "'<'", 
                     "'>='", "<INVALID>", "'^'", "'~'", "'!'", "'>'", "'||'", 
                     "'|'", "'='", "'['", "']'", "'_'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", 
                      "ALL", "ALTER", "ALPHANUM", "ANALYZE", "AND", "ANY", 
                      "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
                      "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
                      "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", 
                      "BINARY_FLOAT", "BINARY_INTEGER", "BIGINT", "BLOB", 
                      "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", 
                      "BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", 
                      "CASCADE", "CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", 
                      "CHECK", "CHR", "CLOB", "CLOSE", "CLUSTER", "COLLECT", 
                      "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
                      "COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", 
                      "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
                      "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
                      "CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
                      "CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
                      "DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", 
                      "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", 
                      "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
                      "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
                      "ENCODING", "END", "ENTITYESCAPING", "ERRORS", "ESCAPE", 
                      "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", 
                      "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", 
                      "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", "FALSE", 
                      "FETCH", "FINAL", "FIRST", "FIRST_VALUE", "FLOAT", 
                      "FOLLOWING", "FOLLOWS", "FOR", "FORALL", "FORCE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "GROUPING", "HASH", "HAVING", "HANDLER", "HIDE", "HOUR", 
                      "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", 
                      "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", 
                      "INDICES", "INFINITE", "INLINE", "INNER", "INOUT", 
                      "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", 
                      "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "INVOKER", 
                      "IS", "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", 
                      "LANGUAGE", "LAST", "LAST_VALUE", "LEADING", "LEFT", 
                      "LEVEL", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", 
                      "LIMIT", "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", 
                      "LOGON", "LONG", "LOOP", "MAIN", "MAP", "MATCHED", 
                      "MAXVALUE", "MEASURES", "MEMBER", "MERGE", "MINUS", 
                      "MINUTE", "MINVALUE", "MLSLABEL", "MODE", "MODEL", 
                      "MODIFY", "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", 
                      "NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", 
                      "NEW", "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", 
                      "NOENTITYESCAPING", "NOMAXVALUE", "NOMINVALUE", "NONE", 
                      "NOORDER", "NOSCHEMACHECK", "NOT", "NOWAIT", "NULL", 
                      "NULLS", "NUMBER", "NUMERIC", "NVARCHAR", "OBJECT", 
                      "OF", "OFF", "OID", "OLD", "ON", "ONLY", "OPEN", "OPTION", 
                      "OR", "ORADATA", "ORDER", "ORDINALITY", "OSERROR", 
                      "OUT", "OUTER", "OVER", "OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", 
                      "PARAMETERS", "PARENT", "PARTITION", "PASSING", "PATH", 
                      "PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIVOT", 
                      "PLAN", "PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", 
                      "PRECEDING", "PRECISION", "PRESENT", "PRIOR", "PROCEDURE", 
                      "RAISE", "RANGE", "RAW", "READ", "READS", "REAL", 
                      "RECORD", "REF", "REFERENCE", "REFERENCING", "REJECT", 
                      "RELIES_ON", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", 
                      "RESULT", "RESULT_CACHE", "RETURN", "RETURNING", "REUSE", 
                      "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", 
                      "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", "SAVE", 
                      "SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", 
                      "SECOND", "SECONDDATE", "SECURITY", "SEED", "SEGMENT", 
                      "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", 
                      "SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", 
                      "SET", "SETS", "SETTINGS", "SHARE", "SHOW", "SHUTDOWN", 
                      "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", 
                      "SIZE", "SKIP_", "SMALLINT", "SMALLDECIMAL", "SNAPSHOT", 
                      "SOME", "SPECIFICATION", "SQL", "SQLDATA", "SQLERROR", 
                      "SQLEXCEPTION", "SQLSCRIPT", "STANDALONE", "START", 
                      "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", 
                      "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", 
                      "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", 
                      "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
                      "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
                      "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TIMEZONE_REGION", "TINYINT", "TO", "TRAILING", "TRANSACTION", 
                      "TRANSLATE", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
                      "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", 
                      "UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", 
                      "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", "VARYING", 
                      "VERSION", "VERSIONS", "VIEW", "WAIT", "WARNING", 
                      "WELLFORMED", "WHEN", "WHENEVER", "WHERE", "WHILE", 
                      "WITH", "WITHIN", "WORK", "WRITE", "XML", "XMLAGG", 
                      "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", 
                      "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", 
                      "XMLPI", "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
                      "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", 
                      "AUTONOMOUS", "CONDITION", "ELSEIF", "EXECUTION", 
                      "OVERVIEW", "RESIGNAL", "MESSAGE_TEXT", "SHORTTEXT", 
                      "SIGNAL", "SQL_ERROR_CODE", "SQL_ERROR_MESSAGE", "SQLWARNING", 
                      "TEXT", "UNNEST", "VARBINARY", "STRING_AGG", "CORR_SPEARMAN", 
                      "VAR", "STDDEV_POP", "VAR_POP", "STDDEV_SAMP", "VAR_SAMP", 
                      "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", 
                      "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
                      "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", 
                      "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", 
                      "REGR_", "STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
                      "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", 
                      "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
                      "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
                      "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "REGULAR_ID" ]

    RULE_swallow_to_semi = 0
    RULE_compilation_unit = 1
    RULE_sql_script = 2
    RULE_unit_statement = 3
    RULE_set_schema = 4
    RULE_drop_procedure = 5
    RULE_create_procedure_body = 6
    RULE_param_name = 7
    RULE_param_type = 8
    RULE_sql_type = 9
    RULE_table_type = 10
    RULE_table_type_definition = 11
    RULE_column_list_definition = 12
    RULE_column_elem = 13
    RULE_column_name = 14
    RULE_data_type = 15
    RULE_parameter = 16
    RULE_parameter_clause = 17
    RULE_lang = 18
    RULE_security_mode = 19
    RULE_default_schema_name = 20
    RULE_view_name = 21
    RULE_proc_decl_list = 22
    RULE_proc_decl = 23
    RULE_proc_decl_op = 24
    RULE_proc_variable = 25
    RULE_proc_table_variable = 26
    RULE_variable_name_list = 27
    RULE_array_datatype = 28
    RULE_array_constructor = 29
    RULE_proc_default = 30
    RULE_proc_cursor = 31
    RULE_proc_cursor_param_list = 32
    RULE_variable_name = 33
    RULE_cursor_name = 34
    RULE_proc_cursor_param = 35
    RULE_proc_condition = 36
    RULE_sql_error_code = 37
    RULE_proc_handler_list = 38
    RULE_proc_handler = 39
    RULE_proc_condition_value_list = 40
    RULE_proc_condition_value = 41
    RULE_proc_stmt_list = 42
    RULE_proc_stmt = 43
    RULE_proc_sql = 44
    RULE_update_stmt = 45
    RULE_insert_stmt = 46
    RULE_proc_signal = 47
    RULE_proc_resignal = 48
    RULE_signal_value = 49
    RULE_signal_name = 50
    RULE_set_signal_info = 51
    RULE_message_string = 52
    RULE_proc_if = 53
    RULE_proc_elsif_list = 54
    RULE_proc_else = 55
    RULE_proc_block = 56
    RULE_proc_block_option = 57
    RULE_proc_assign = 58
    RULE_proc_single_assign = 59
    RULE_unnest_function = 60
    RULE_table_name = 61
    RULE_as_col_names = 62
    RULE_column_name_list = 63
    RULE_proc_call = 64
    RULE_param_list = 65
    RULE_proc_param = 66
    RULE_named_param = 67
    RULE_procedure_body = 68
    RULE_procedure_body_ = 69
    RULE_parameter_name = 70
    RULE_for_each_row = 71
    RULE_alter_attribute_definition = 72
    RULE_attribute_definition = 73
    RULE_alter_collection_clauses = 74
    RULE_dependent_handling_clause = 75
    RULE_dependent_exceptions_part = 76
    RULE_type_definition = 77
    RULE_object_type_def = 78
    RULE_object_as_part = 79
    RULE_object_under_part = 80
    RULE_nested_table_type_def = 81
    RULE_sqlj_object_type = 82
    RULE_type_body = 83
    RULE_type_body_elements = 84
    RULE_map_order_func_declaration = 85
    RULE_subprog_decl_in_type = 86
    RULE_proc_decl_in_type = 87
    RULE_func_decl_in_type = 88
    RULE_constructor_declaration = 89
    RULE_modifier_clause = 90
    RULE_object_member_spec = 91
    RULE_sqlj_object_type_attr = 92
    RULE_element_spec = 93
    RULE_element_spec_options = 94
    RULE_subprogram_spec = 95
    RULE_type_procedure_spec = 96
    RULE_type_function_spec = 97
    RULE_constructor_spec = 98
    RULE_map_order_function_spec = 99
    RULE_pragma_clause = 100
    RULE_pragma_elements = 101
    RULE_type_elements_parameter = 102
    RULE_create_sequence = 103
    RULE_sequence_spec = 104
    RULE_sequence_start_clause = 105
    RULE_invoker_rights_clause = 106
    RULE_compiler_parameters_clause = 107
    RULE_call_spec = 108
    RULE_java_spec = 109
    RULE_c_spec = 110
    RULE_c_agent_in_clause = 111
    RULE_c_parameters_clause = 112
    RULE_default_value_part = 113
    RULE_declare_spec = 114
    RULE_variable_declaration = 115
    RULE_subtype_declaration = 116
    RULE_cursor_declaration = 117
    RULE_parameter_spec = 118
    RULE_exception_declaration = 119
    RULE_pragma_declaration = 120
    RULE_record_declaration = 121
    RULE_record_type_dec = 122
    RULE_field_spec = 123
    RULE_record_var_dec = 124
    RULE_table_declaration = 125
    RULE_table_type_dec = 126
    RULE_table_indexed_by_part = 127
    RULE_varray_type_def = 128
    RULE_table_var_dec = 129
    RULE_seq_of_statements = 130
    RULE_label_declaration = 131
    RULE_statement = 132
    RULE_assignment_statement = 133
    RULE_continue_statement = 134
    RULE_exit_statement = 135
    RULE_goto_statement = 136
    RULE_if_statement = 137
    RULE_elsif_part = 138
    RULE_else_part = 139
    RULE_loop_statement = 140
    RULE_cursor_loop_param = 141
    RULE_forall_statement = 142
    RULE_bounds_clause = 143
    RULE_between_bound = 144
    RULE_lower_bound = 145
    RULE_upper_bound = 146
    RULE_null_statement = 147
    RULE_raise_statement = 148
    RULE_return_statement = 149
    RULE_function_call = 150
    RULE_body = 151
    RULE_exception_clause = 152
    RULE_exception_handler = 153
    RULE_trigger_block = 154
    RULE_block = 155
    RULE_sql_statement = 156
    RULE_execute_immediate = 157
    RULE_dynamic_returning_clause = 158
    RULE_data_manipulation_language_statements = 159
    RULE_cursor_manipulation_statements = 160
    RULE_close_statement = 161
    RULE_open_statement = 162
    RULE_fetch_statement = 163
    RULE_open_for_statement = 164
    RULE_transaction_control_statements = 165
    RULE_set_transaction_command = 166
    RULE_set_constraint_command = 167
    RULE_commit_statement = 168
    RULE_write_clause = 169
    RULE_rollback_statement = 170
    RULE_savepoint_statement = 171
    RULE_explain_statement = 172
    RULE_select_statement = 173
    RULE_subquery_factoring_clause = 174
    RULE_factoring_element = 175
    RULE_search_clause = 176
    RULE_cycle_clause = 177
    RULE_subquery = 178
    RULE_subquery_operation_part = 179
    RULE_subquery_basic_elements = 180
    RULE_query_block = 181
    RULE_selected_element = 182
    RULE_from_clause = 183
    RULE_select_list_elements = 184
    RULE_table_ref_list = 185
    RULE_table_ref = 186
    RULE_table_ref_aux = 187
    RULE_join_clause = 188
    RULE_join_on_part = 189
    RULE_join_using_part = 190
    RULE_outer_join_type = 191
    RULE_query_partition_clause = 192
    RULE_flashback_query_clause = 193
    RULE_pivot_clause = 194
    RULE_pivot_element = 195
    RULE_pivot_for_clause = 196
    RULE_pivot_in_clause = 197
    RULE_pivot_in_clause_element = 198
    RULE_pivot_in_clause_elements = 199
    RULE_unpivot_clause = 200
    RULE_unpivot_in_clause = 201
    RULE_unpivot_in_elements = 202
    RULE_hierarchical_query_clause = 203
    RULE_start_part = 204
    RULE_group_by_clause = 205
    RULE_group_by_elements = 206
    RULE_rollup_cube_clause = 207
    RULE_grouping_sets_clause = 208
    RULE_grouping_sets_elements = 209
    RULE_having_clause = 210
    RULE_model_clause = 211
    RULE_cell_reference_options = 212
    RULE_return_rows_clause = 213
    RULE_reference_model = 214
    RULE_main_model = 215
    RULE_model_column_clauses = 216
    RULE_model_column_partition_part = 217
    RULE_model_column_list = 218
    RULE_model_column = 219
    RULE_model_rules_clause = 220
    RULE_model_rules_part = 221
    RULE_model_rules_element = 222
    RULE_cell_assignment = 223
    RULE_model_iterate_clause = 224
    RULE_until_part = 225
    RULE_order_by_clause = 226
    RULE_order_by_elements = 227
    RULE_for_update_clause = 228
    RULE_for_update_of_part = 229
    RULE_for_update_options = 230
    RULE_update_statement = 231
    RULE_update_set_clause = 232
    RULE_column_based_update_set_clause = 233
    RULE_delete_statement = 234
    RULE_insert_statement = 235
    RULE_declare_statement = 236
    RULE_exception_statement = 237
    RULE_proc_condition_value_ = 238
    RULE_single_table_insert = 239
    RULE_multi_table_insert = 240
    RULE_multi_table_element = 241
    RULE_conditional_insert_clause = 242
    RULE_conditional_insert_when_part = 243
    RULE_conditional_insert_else_part = 244
    RULE_insert_into_clause = 245
    RULE_values_clause = 246
    RULE_merge_statement = 247
    RULE_merge_update_clause = 248
    RULE_merge_element = 249
    RULE_merge_update_delete_part = 250
    RULE_merge_insert_clause = 251
    RULE_selected_tableview = 252
    RULE_lock_table_statement = 253
    RULE_wait_nowait_part = 254
    RULE_lock_table_element = 255
    RULE_lock_mode = 256
    RULE_general_table_ref = 257
    RULE_static_returning_clause = 258
    RULE_error_logging_clause = 259
    RULE_error_logging_into_part = 260
    RULE_error_logging_reject_part = 261
    RULE_dml_table_expression_clause = 262
    RULE_table_collection_expression = 263
    RULE_subquery_restriction_clause = 264
    RULE_sample_clause = 265
    RULE_seed_part = 266
    RULE_cursor_expression = 267
    RULE_expression_list = 268
    RULE_condition = 269
    RULE_condition_wrapper = 270
    RULE_condition_ = 271
    RULE_predicate = 272
    RULE_comparison_predicate = 273
    RULE_relational_operator = 274
    RULE_range_predicate = 275
    RULE_in_predicate = 276
    RULE_exist_predicate = 277
    RULE_like_predicate = 278
    RULE_null_predicate = 279
    RULE_expression__list = 280
    RULE_expression_ = 281
    RULE_correlation_name = 282
    RULE_operator = 283
    RULE_case_expression_ = 284
    RULE_simple_case_expression_ = 285
    RULE_search_case_expression_ = 286
    RULE_function_expression_ = 287
    RULE_aggregate_expression_ = 288
    RULE_agg_name = 289
    RULE_delimiter = 290
    RULE_aggregate_order_by_clause = 291
    RULE_expression = 292
    RULE_expression_wrapper = 293
    RULE_logical_and_expression = 294
    RULE_negated_expression = 295
    RULE_equality_expression = 296
    RULE_multiset_expression = 297
    RULE_multiset_type = 298
    RULE_relational_expression = 299
    RULE_relational_expression_operator = 300
    RULE_compound_expression = 301
    RULE_like_type = 302
    RULE_like_escape_part = 303
    RULE_in_elements = 304
    RULE_between_elements = 305
    RULE_concatenation = 306
    RULE_concatenation_wrapper = 307
    RULE_additive_expression = 308
    RULE_multiply_expression = 309
    RULE_datetime_expression = 310
    RULE_interval_expression = 311
    RULE_model_expression = 312
    RULE_model_expression_element = 313
    RULE_single_column_for_loop = 314
    RULE_for_like_part = 315
    RULE_for_increment_decrement_type = 316
    RULE_multi_column_for_loop = 317
    RULE_unary_expression = 318
    RULE_case_statement = 319
    RULE_simple_case_statement = 320
    RULE_simple_case_when_part = 321
    RULE_searched_case_statement = 322
    RULE_searched_case_when_part = 323
    RULE_case_else_part = 324
    RULE_atom = 325
    RULE_expression_or_vector = 326
    RULE_vector_expr = 327
    RULE_quantified_expression = 328
    RULE_standard_function = 329
    RULE_over_clause_keyword = 330
    RULE_within_or_over_clause_keyword = 331
    RULE_standard_prediction_function_keyword = 332
    RULE_over_clause = 333
    RULE_windowing_clause = 334
    RULE_windowing_type = 335
    RULE_windowing_elements = 336
    RULE_using_clause = 337
    RULE_using_element = 338
    RULE_collect_order_by_part = 339
    RULE_within_or_over_part = 340
    RULE_cost_matrix_clause = 341
    RULE_xml_passing_clause = 342
    RULE_xml_attributes_clause = 343
    RULE_xml_namespaces_clause = 344
    RULE_xml_table_column = 345
    RULE_xml_general_default_part = 346
    RULE_xml_multiuse_expression_element = 347
    RULE_xmlroot_param_version_part = 348
    RULE_xmlroot_param_standalone_part = 349
    RULE_xmlserialize_param_enconding_part = 350
    RULE_xmlserialize_param_version_part = 351
    RULE_xmlserialize_param_ident_part = 352
    RULE_sql_plus_command = 353
    RULE_whenever_command = 354
    RULE_set_command = 355
    RULE_exit_command = 356
    RULE_prompt_command = 357
    RULE_partition_extension_clause = 358
    RULE_column_alias = 359
    RULE_table_alias = 360
    RULE_alias_quoted_string = 361
    RULE_where_clause = 362
    RULE_current_of_clause = 363
    RULE_into_clause = 364
    RULE_xml_column_name = 365
    RULE_cost_class_name = 366
    RULE_attribute_name = 367
    RULE_savepoint_name = 368
    RULE_rollback_segment_name = 369
    RULE_table_var_name = 370
    RULE_schema_name = 371
    RULE_routine_name = 372
    RULE_package_name = 373
    RULE_implementation_type_name = 374
    RULE_reference_model_name = 375
    RULE_main_model_name = 376
    RULE_aggregate_function_name = 377
    RULE_query_name = 378
    RULE_constraint_name = 379
    RULE_label_name = 380
    RULE_type_name = 381
    RULE_sequence_name = 382
    RULE_exception_name = 383
    RULE_function_name = 384
    RULE_proc_name = 385
    RULE_trigger_name = 386
    RULE_variable_name_old = 387
    RULE_index_name = 388
    RULE_cursor_name_old = 389
    RULE_record_name = 390
    RULE_collection_name = 391
    RULE_link_name = 392
    RULE_column_name_old = 393
    RULE_tableview_name = 394
    RULE_char_set_name = 395
    RULE_keep_clause = 396
    RULE_function_argument = 397
    RULE_function_argument_analytic = 398
    RULE_function_argument_modeling = 399
    RULE_respect_or_ignore_nulls = 400
    RULE_argument = 401
    RULE_type_spec = 402
    RULE_datatype = 403
    RULE_precision_part = 404
    RULE_native_datatype_element = 405
    RULE_bind_variable = 406
    RULE_bind_sql_error_code = 407
    RULE_const_sql_error_code = 408
    RULE_bind_sql_error_message = 409
    RULE_const_sql_error_message = 410
    RULE_general_element = 411
    RULE_general_element_part = 412
    RULE_table_element = 413
    RULE_constant = 414
    RULE_numeric = 415
    RULE_numeric_negative = 416
    RULE_quoted_string = 417
    RULE_id = 418
    RULE_id_expression = 419
    RULE_not_equal_op = 420
    RULE_greater_than_or_equals_op = 421
    RULE_less_than_or_equals_op = 422
    RULE_concatenation_op = 423
    RULE_outer_join_sign = 424
    RULE_regular_id = 425

    ruleNames =  [ "swallow_to_semi", "compilation_unit", "sql_script", 
                   "unit_statement", "set_schema", "drop_procedure", "create_procedure_body", 
                   "param_name", "param_type", "sql_type", "table_type", 
                   "table_type_definition", "column_list_definition", "column_elem", 
                   "column_name", "data_type", "parameter", "parameter_clause", 
                   "lang", "security_mode", "default_schema_name", "view_name", 
                   "proc_decl_list", "proc_decl", "proc_decl_op", "proc_variable", 
                   "proc_table_variable", "variable_name_list", "array_datatype", 
                   "array_constructor", "proc_default", "proc_cursor", "proc_cursor_param_list", 
                   "variable_name", "cursor_name", "proc_cursor_param", 
                   "proc_condition", "sql_error_code", "proc_handler_list", 
                   "proc_handler", "proc_condition_value_list", "proc_condition_value", 
                   "proc_stmt_list", "proc_stmt", "proc_sql", "update_stmt", 
                   "insert_stmt", "proc_signal", "proc_resignal", "signal_value", 
                   "signal_name", "set_signal_info", "message_string", "proc_if", 
                   "proc_elsif_list", "proc_else", "proc_block", "proc_block_option", 
                   "proc_assign", "proc_single_assign", "unnest_function", 
                   "table_name", "as_col_names", "column_name_list", "proc_call", 
                   "param_list", "proc_param", "named_param", "procedure_body", 
                   "procedure_body_", "parameter_name", "for_each_row", 
                   "alter_attribute_definition", "attribute_definition", 
                   "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "type_definition", "object_type_def", 
                   "object_as_part", "object_under_part", "nested_table_type_def", 
                   "sqlj_object_type", "type_body", "type_body_elements", 
                   "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "create_sequence", "sequence_spec", 
                   "sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause", 
                   "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
                   "c_parameters_clause", "default_value_part", "declare_spec", 
                   "variable_declaration", "subtype_declaration", "cursor_declaration", 
                   "parameter_spec", "exception_declaration", "pragma_declaration", 
                   "record_declaration", "record_type_dec", "field_spec", 
                   "record_var_dec", "table_declaration", "table_type_dec", 
                   "table_indexed_by_part", "varray_type_def", "table_var_dec", 
                   "seq_of_statements", "label_declaration", "statement", 
                   "assignment_statement", "continue_statement", "exit_statement", 
                   "goto_statement", "if_statement", "elsif_part", "else_part", 
                   "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "body", "exception_clause", "exception_handler", 
                   "trigger_block", "block", "sql_statement", "execute_immediate", 
                   "dynamic_returning_clause", "data_manipulation_language_statements", 
                   "cursor_manipulation_statements", "close_statement", 
                   "open_statement", "fetch_statement", "open_for_statement", 
                   "transaction_control_statements", "set_transaction_command", 
                   "set_constraint_command", "commit_statement", "write_clause", 
                   "rollback_statement", "savepoint_statement", "explain_statement", 
                   "select_statement", "subquery_factoring_clause", "factoring_element", 
                   "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
                   "subquery_basic_elements", "query_block", "selected_element", 
                   "from_clause", "select_list_elements", "table_ref_list", 
                   "table_ref", "table_ref_aux", "join_clause", "join_on_part", 
                   "join_using_part", "outer_join_type", "query_partition_clause", 
                   "flashback_query_clause", "pivot_clause", "pivot_element", 
                   "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
                   "pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", 
                   "unpivot_in_elements", "hierarchical_query_clause", "start_part", 
                   "group_by_clause", "group_by_elements", "rollup_cube_clause", 
                   "grouping_sets_clause", "grouping_sets_elements", "having_clause", 
                   "model_clause", "cell_reference_options", "return_rows_clause", 
                   "reference_model", "main_model", "model_column_clauses", 
                   "model_column_partition_part", "model_column_list", "model_column", 
                   "model_rules_clause", "model_rules_part", "model_rules_element", 
                   "cell_assignment", "model_iterate_clause", "until_part", 
                   "order_by_clause", "order_by_elements", "for_update_clause", 
                   "for_update_of_part", "for_update_options", "update_statement", 
                   "update_set_clause", "column_based_update_set_clause", 
                   "delete_statement", "insert_statement", "declare_statement", 
                   "exception_statement", "proc_condition_value_", "single_table_insert", 
                   "multi_table_insert", "multi_table_element", "conditional_insert_clause", 
                   "conditional_insert_when_part", "conditional_insert_else_part", 
                   "insert_into_clause", "values_clause", "merge_statement", 
                   "merge_update_clause", "merge_element", "merge_update_delete_part", 
                   "merge_insert_clause", "selected_tableview", "lock_table_statement", 
                   "wait_nowait_part", "lock_table_element", "lock_mode", 
                   "general_table_ref", "static_returning_clause", "error_logging_clause", 
                   "error_logging_into_part", "error_logging_reject_part", 
                   "dml_table_expression_clause", "table_collection_expression", 
                   "subquery_restriction_clause", "sample_clause", "seed_part", 
                   "cursor_expression", "expression_list", "condition", 
                   "condition_wrapper", "condition_", "predicate", "comparison_predicate", 
                   "relational_operator", "range_predicate", "in_predicate", 
                   "exist_predicate", "like_predicate", "null_predicate", 
                   "expression__list", "expression_", "correlation_name", 
                   "operator", "case_expression_", "simple_case_expression_", 
                   "search_case_expression_", "function_expression_", "aggregate_expression_", 
                   "agg_name", "delimiter", "aggregate_order_by_clause", 
                   "expression", "expression_wrapper", "logical_and_expression", 
                   "negated_expression", "equality_expression", "multiset_expression", 
                   "multiset_type", "relational_expression", "relational_expression_operator", 
                   "compound_expression", "like_type", "like_escape_part", 
                   "in_elements", "between_elements", "concatenation", "concatenation_wrapper", 
                   "additive_expression", "multiply_expression", "datetime_expression", 
                   "interval_expression", "model_expression", "model_expression_element", 
                   "single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
                   "multi_column_for_loop", "unary_expression", "case_statement", 
                   "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
                   "searched_case_when_part", "case_else_part", "atom", 
                   "expression_or_vector", "vector_expr", "quantified_expression", 
                   "standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
                   "standard_prediction_function_keyword", "over_clause", 
                   "windowing_clause", "windowing_type", "windowing_elements", 
                   "using_clause", "using_element", "collect_order_by_part", 
                   "within_or_over_part", "cost_matrix_clause", "xml_passing_clause", 
                   "xml_attributes_clause", "xml_namespaces_clause", "xml_table_column", 
                   "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "exit_command", "prompt_command", 
                   "partition_extension_clause", "column_alias", "table_alias", 
                   "alias_quoted_string", "where_clause", "current_of_clause", 
                   "into_clause", "xml_column_name", "cost_class_name", 
                   "attribute_name", "savepoint_name", "rollback_segment_name", 
                   "table_var_name", "schema_name", "routine_name", "package_name", 
                   "implementation_type_name", "reference_model_name", "main_model_name", 
                   "aggregate_function_name", "query_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "function_name", "proc_name", "trigger_name", "variable_name_old", 
                   "index_name", "cursor_name_old", "record_name", "collection_name", 
                   "link_name", "column_name_old", "tableview_name", "char_set_name", 
                   "keep_clause", "function_argument", "function_argument_analytic", 
                   "function_argument_modeling", "respect_or_ignore_nulls", 
                   "argument", "type_spec", "datatype", "precision_part", 
                   "native_datatype_element", "bind_variable", "bind_sql_error_code", 
                   "const_sql_error_code", "bind_sql_error_message", "const_sql_error_message", 
                   "general_element", "general_element_part", "table_element", 
                   "constant", "numeric", "numeric_negative", "quoted_string", 
                   "id", "id_expression", "not_equal_op", "greater_than_or_equals_op", 
                   "less_than_or_equals_op", "concatenation_op", "outer_join_sign", 
                   "regular_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    A_LETTER=8
    ADD=9
    AFTER=10
    AGENT=11
    AGGREGATE=12
    ALL=13
    ALTER=14
    ALPHANUM=15
    ANALYZE=16
    AND=17
    ANY=18
    ARRAY=19
    AS=20
    ASC=21
    ASSOCIATE=22
    AT=23
    ATTRIBUTE=24
    AUDIT=25
    AUTHID=26
    AUTO=27
    AUTOMATIC=28
    AUTONOMOUS_TRANSACTION=29
    BATCH=30
    BEFORE=31
    BEGIN=32
    BETWEEN=33
    BFILE=34
    BINARY_DOUBLE=35
    BINARY_FLOAT=36
    BINARY_INTEGER=37
    BIGINT=38
    BLOB=39
    BLOCK=40
    BODY=41
    BOOLEAN=42
    BOTH=43
    BREADTH=44
    BULK=45
    BY=46
    BYTE=47
    C_LETTER=48
    CACHE=49
    CALL=50
    CANONICAL=51
    CASCADE=52
    CASE=53
    CAST=54
    CHAR=55
    CHAR_CS=56
    CHARACTER=57
    CHECK=58
    CHR=59
    CLOB=60
    CLOSE=61
    CLUSTER=62
    COLLECT=63
    COLUMNS=64
    COMMENT=65
    COMMIT=66
    COMMITTED=67
    COMPATIBILITY=68
    COMPILE=69
    COMPOUND=70
    CONNECT=71
    CONNECT_BY_ROOT=72
    CONSTANT=73
    CONSTRAINT=74
    CONSTRAINTS=75
    CONSTRUCTOR=76
    CONTENT=77
    CONTEXT=78
    CONTINUE=79
    CONVERT=80
    CORRUPT_XID=81
    CORRUPT_XID_ALL=82
    COST=83
    COUNT=84
    CREATE=85
    CROSS=86
    CUBE=87
    CURRENT=88
    CURRENT_USER=89
    CURSOR=90
    CUSTOMDATUM=91
    CYCLE=92
    DATA=93
    DATABASE=94
    DATE=95
    DAY=96
    DB_ROLE_CHANGE=97
    DBTIMEZONE=98
    DDL=99
    DEBUG=100
    DEC=101
    DECIMAL=102
    DECLARE=103
    DECOMPOSE=104
    DECREMENT=105
    DEFAULT=106
    DEFAULTS=107
    DEFERRED=108
    DEFINER=109
    DELETE=110
    DEPTH=111
    DESC=112
    DETERMINISTIC=113
    DIMENSION=114
    DISABLE=115
    DISASSOCIATE=116
    DISTINCT=117
    DOCUMENT=118
    DOUBLE=119
    DROP=120
    DSINTERVAL_UNCONSTRAINED=121
    EACH=122
    ELEMENT=123
    ELSE=124
    ELSIF=125
    EMPTY=126
    ENABLE=127
    ENCODING=128
    END=129
    ENTITYESCAPING=130
    ERRORS=131
    ESCAPE=132
    EVALNAME=133
    EXCEPTION=134
    EXCEPTION_INIT=135
    EXCEPTIONS=136
    EXCLUDE=137
    EXCLUSIVE=138
    EXECUTE=139
    EXISTS=140
    EXIT=141
    EXPLAIN=142
    EXTERNAL=143
    EXTRACT=144
    FAILURE=145
    FALSE=146
    FETCH=147
    FINAL=148
    FIRST=149
    FIRST_VALUE=150
    FLOAT=151
    FOLLOWING=152
    FOLLOWS=153
    FOR=154
    FORALL=155
    FORCE=156
    FROM=157
    FULL=158
    FUNCTION=159
    GOTO=160
    GRANT=161
    GROUP=162
    GROUPING=163
    HASH=164
    HAVING=165
    HANDLER=166
    HIDE=167
    HOUR=168
    IF=169
    IGNORE=170
    IMMEDIATE=171
    IN=172
    INCLUDE=173
    INCLUDING=174
    INCREMENT=175
    INDENT=176
    INDEX=177
    INDEXED=178
    INDICATOR=179
    INDICES=180
    INFINITE=181
    INLINE=182
    INNER=183
    INOUT=184
    INSERT=185
    INSTANTIABLE=186
    INSTEAD=187
    INT=188
    INTEGER=189
    INTERSECT=190
    INTERVAL=191
    INTO=192
    INVALIDATE=193
    INVOKER=194
    IS=195
    ISOLATION=196
    ITERATE=197
    JAVA=198
    JOIN=199
    KEEP=200
    LANGUAGE=201
    LAST=202
    LAST_VALUE=203
    LEADING=204
    LEFT=205
    LEVEL=206
    LIBRARY=207
    LIKE=208
    LIKE2=209
    LIKE4=210
    LIKEC=211
    LIMIT=212
    LOCAL=213
    LOCK=214
    LOCKED=215
    LOG=216
    LOGOFF=217
    LOGON=218
    LONG=219
    LOOP=220
    MAIN=221
    MAP=222
    MATCHED=223
    MAXVALUE=224
    MEASURES=225
    MEMBER=226
    MERGE=227
    MINUS=228
    MINUTE=229
    MINVALUE=230
    MLSLABEL=231
    MODE=232
    MODEL=233
    MODIFY=234
    MONTH=235
    MULTISET=236
    NAME=237
    NAN=238
    NATURAL=239
    NATURALN=240
    NAV=241
    NCHAR=242
    NCHAR_CS=243
    NCLOB=244
    NESTED=245
    NEW=246
    NO=247
    NOAUDIT=248
    NOCACHE=249
    NOCOPY=250
    NOCYCLE=251
    NOENTITYESCAPING=252
    NOMAXVALUE=253
    NOMINVALUE=254
    NONE=255
    NOORDER=256
    NOSCHEMACHECK=257
    NOT=258
    NOWAIT=259
    NULL=260
    NULLS=261
    NUMBER=262
    NUMERIC=263
    NVARCHAR=264
    OBJECT=265
    OF=266
    OFF=267
    OID=268
    OLD=269
    ON=270
    ONLY=271
    OPEN=272
    OPTION=273
    OR=274
    ORADATA=275
    ORDER=276
    ORDINALITY=277
    OSERROR=278
    OUT=279
    OUTER=280
    OVER=281
    OVERRIDING=282
    PACKAGE=283
    PARALLEL_ENABLE=284
    PARAMETERS=285
    PARENT=286
    PARTITION=287
    PASSING=288
    PATH=289
    PERCENT_ROWTYPE=290
    PERCENT_TYPE=291
    PIPELINED=292
    PIVOT=293
    PLAN=294
    PLS_INTEGER=295
    POSITIVE=296
    POSITIVEN=297
    PRAGMA=298
    PRECEDING=299
    PRECISION=300
    PRESENT=301
    PRIOR=302
    PROCEDURE=303
    RAISE=304
    RANGE=305
    RAW=306
    READ=307
    READS=308
    REAL=309
    RECORD=310
    REF=311
    REFERENCE=312
    REFERENCING=313
    REJECT=314
    RELIES_ON=315
    RENAME=316
    REPLACE=317
    RESPECT=318
    RESTRICT_REFERENCES=319
    RESULT=320
    RESULT_CACHE=321
    RETURN=322
    RETURNING=323
    REUSE=324
    REVERSE=325
    REVOKE=326
    RIGHT=327
    ROLLBACK=328
    ROLLUP=329
    ROW=330
    ROWID=331
    ROWS=332
    RULES=333
    SAMPLE=334
    SAVE=335
    SAVEPOINT=336
    SCHEMA=337
    SCHEMACHECK=338
    SCN=339
    SEARCH=340
    SECOND=341
    SECONDDATE=342
    SECURITY=343
    SEED=344
    SEGMENT=345
    SELECT=346
    SELF=347
    SEQUENCE=348
    SEQUENTIAL=349
    SERIALIZABLE=350
    SERIALLY_REUSABLE=351
    SERVERERROR=352
    SESSIONTIMEZONE=353
    SET=354
    SETS=355
    SETTINGS=356
    SHARE=357
    SHOW=358
    SHUTDOWN=359
    SIBLINGS=360
    SIGNTYPE=361
    SIMPLE_INTEGER=362
    SINGLE=363
    SIZE=364
    SKIP_=365
    SMALLINT=366
    SMALLDECIMAL=367
    SNAPSHOT=368
    SOME=369
    SPECIFICATION=370
    SQL=371
    SQLDATA=372
    SQLERROR=373
    SQLEXCEPTION=374
    SQLSCRIPT=375
    STANDALONE=376
    START=377
    STARTUP=378
    STATEMENT=379
    STATEMENT_ID=380
    STATIC=381
    STATISTICS=382
    STRING=383
    SUBMULTISET=384
    SUBPARTITION=385
    SUBSTITUTABLE=386
    SUBTYPE=387
    SUCCESS=388
    SUSPEND=389
    TABLE=390
    THE=391
    THEN=392
    TIME=393
    TIMESTAMP=394
    TIMESTAMP_LTZ_UNCONSTRAINED=395
    TIMESTAMP_TZ_UNCONSTRAINED=396
    TIMESTAMP_UNCONSTRAINED=397
    TIMEZONE_ABBR=398
    TIMEZONE_HOUR=399
    TIMEZONE_MINUTE=400
    TIMEZONE_REGION=401
    TINYINT=402
    TO=403
    TRAILING=404
    TRANSACTION=405
    TRANSLATE=406
    TREAT=407
    TRIGGER=408
    TRIM=409
    TRUE=410
    TRUNCATE=411
    TYPE=412
    UNBOUNDED=413
    UNDER=414
    UNION=415
    UNIQUE=416
    UNLIMITED=417
    UNPIVOT=418
    UNTIL=419
    UPDATE=420
    UPDATED=421
    UPSERT=422
    UROWID=423
    USE=424
    USING=425
    VALIDATE=426
    VALUE=427
    VALUES=428
    VARCHAR=429
    VARCHAR2=430
    VARIABLE=431
    VARRAY=432
    VARYING=433
    VERSION=434
    VERSIONS=435
    VIEW=436
    WAIT=437
    WARNING=438
    WELLFORMED=439
    WHEN=440
    WHENEVER=441
    WHERE=442
    WHILE=443
    WITH=444
    WITHIN=445
    WORK=446
    WRITE=447
    XML=448
    XMLAGG=449
    XMLATTRIBUTES=450
    XMLCAST=451
    XMLCOLATTVAL=452
    XMLELEMENT=453
    XMLEXISTS=454
    XMLFOREST=455
    XMLNAMESPACES=456
    XMLPARSE=457
    XMLPI=458
    XMLQUERY=459
    XMLROOT=460
    XMLSERIALIZE=461
    XMLTABLE=462
    YEAR=463
    YES=464
    YMINTERVAL_UNCONSTRAINED=465
    ZONE=466
    AUTONOMOUS=467
    CONDITION=468
    ELSEIF=469
    EXECUTION=470
    OVERVIEW=471
    RESIGNAL=472
    MESSAGE_TEXT=473
    SHORTTEXT=474
    SIGNAL=475
    SQL_ERROR_CODE=476
    SQL_ERROR_MESSAGE=477
    SQLWARNING=478
    TEXT=479
    UNNEST=480
    VARBINARY=481
    STRING_AGG=482
    CORR_SPEARMAN=483
    VAR=484
    STDDEV_POP=485
    VAR_POP=486
    STDDEV_SAMP=487
    VAR_SAMP=488
    PREDICTION=489
    PREDICTION_BOUNDS=490
    PREDICTION_COST=491
    PREDICTION_DETAILS=492
    PREDICTION_PROBABILITY=493
    PREDICTION_SET=494
    CUME_DIST=495
    DENSE_RANK=496
    LISTAGG=497
    PERCENT_RANK=498
    PERCENTILE_CONT=499
    PERCENTILE_DISC=500
    RANK=501
    AVG=502
    CORR=503
    LAG=504
    LEAD=505
    MAX=506
    MEDIAN=507
    MIN=508
    NTILE=509
    RATIO_TO_REPORT=510
    ROW_NUMBER=511
    SUM=512
    VARIANCE=513
    REGR_=514
    STDDEV=515
    VAR_=516
    COVAR_=517
    NATIONAL_CHAR_STRING_LIT=518
    BIT_STRING_LIT=519
    HEX_STRING_LIT=520
    DOUBLE_PERIOD=521
    PERIOD=522
    UNSIGNED_INTEGER=523
    APPROXIMATE_NUM_LIT=524
    CHAR_STRING=525
    DELIMITED_ID=526
    PERCENT=527
    AMPERSAND=528
    LEFT_PAREN=529
    RIGHT_PAREN=530
    DOUBLE_ASTERISK=531
    ASTERISK=532
    PLUS_SIGN=533
    MINUS_SIGN=534
    COMMA=535
    SOLIDUS=536
    AT_SIGN=537
    ASSIGN_OP=538
    BINDVAR=539
    COLON=540
    SEMICOLON=541
    LESS_THAN_OR_EQUALS_OP=542
    LESS_THAN_OP=543
    GREATER_THAN_OR_EQUALS_OP=544
    NOT_EQUAL_OP=545
    CARRET_OPERATOR_PART=546
    TILDE_OPERATOR_PART=547
    EXCLAMATION_OPERATOR_PART=548
    GREATER_THAN_OP=549
    CONCATENATION_OP=550
    VERTICAL_BAR=551
    EQUALS_OP=552
    LEFT_BRACKET=553
    RIGHT_BRACKET=554
    INTRODUCER=555
    SPACES=556
    SINGLE_LINE_COMMENT=557
    MULTI_LINE_COMMENT=558
    PROMPT=559
    REGULAR_ID=560

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Swallow_to_semiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SEMICOLON)
            else:
                return self.getToken(HanaParser.SEMICOLON, i)

        def getRuleIndex(self):
            return HanaParser.RULE_swallow_to_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwallow_to_semi" ):
                listener.enterSwallow_to_semi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwallow_to_semi" ):
                listener.exitSwallow_to_semi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwallow_to_semi" ):
                return visitor.visitSwallow_to_semi(self)
            else:
                return visitor.visitChildren(self)




    def swallow_to_semi(self):

        localctx = HanaParser.Swallow_to_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_swallow_to_semi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 852
                _la = self._input.LA(1)
                if _la <= 0 or _la==541:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 855 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -1) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & -1) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & -1) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & -1) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & 562949416550399) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HanaParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Unit_statementContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilation_unit" ):
                return visitor.visitCompilation_unit(self)
            else:
                return visitor.visitChildren(self)




    def compilation_unit(self):

        localctx = HanaParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 144115222469410817) != 0) or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & 4398583382017) != 0) or _la==346 or _la==354 or _la==420 or _la==444 or _la==529:
                self.state = 857
                self.unit_statement()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 863
            self.match(HanaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_scriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HanaParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Unit_statementContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_sql_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_script" ):
                listener.enterSql_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_script" ):
                listener.exitSql_script(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_script" ):
                return visitor.visitSql_script(self)
            else:
                return visitor.visitChildren(self)




    def sql_script(self):

        localctx = HanaParser.Sql_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 144115222469410817) != 0) or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & 4398583382017) != 0) or _la==346 or _la==354 or _la==420 or _la==444 or _la==529:
                self.state = 865
                self.unit_statement()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 871
            self.match(HanaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unit_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_schema(self):
            return self.getTypedRuleContext(HanaParser.Set_schemaContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(HanaParser.Create_procedure_bodyContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(HanaParser.Create_sequenceContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(HanaParser.Drop_procedureContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(HanaParser.Data_manipulation_language_statementsContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_unit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_statement" ):
                listener.enterUnit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_statement" ):
                listener.exitUnit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_statement" ):
                return visitor.visitUnit_statement(self)
            else:
                return visitor.visitChildren(self)




    def unit_statement(self):

        localctx = HanaParser.Unit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unit_statement)
        try:
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.set_schema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.create_procedure_body()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.create_sequence()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 876
                self.drop_procedure()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 877
                self.data_manipulation_language_statements()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def SCHEMA(self):
            return self.getToken(HanaParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(HanaParser.Schema_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_set_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_schema" ):
                listener.enterSet_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_schema" ):
                listener.exitSet_schema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_schema" ):
                return visitor.visitSet_schema(self)
            else:
                return visitor.visitChildren(self)




    def set_schema(self):

        localctx = HanaParser.Set_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_set_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(HanaParser.SET)
            self.state = 881
            self.match(HanaParser.SCHEMA)
            self.state = 882
            self.schema_name()
            self.state = 883
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(HanaParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(HanaParser.PROCEDURE, 0)

        def proc_name(self):
            return self.getTypedRuleContext(HanaParser.Proc_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = HanaParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_drop_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(HanaParser.DROP)
            self.state = 886
            self.match(HanaParser.PROCEDURE)
            self.state = 887
            self.proc_name()
            self.state = 888
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_procedure_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(HanaParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(HanaParser.PROCEDURE, 0)

        def proc_name(self):
            return self.getTypedRuleContext(HanaParser.Proc_nameContext,0)


        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def BEGIN(self):
            return self.getToken(HanaParser.BEGIN, 0)

        def procedure_body(self):
            return self.getTypedRuleContext(HanaParser.Procedure_bodyContext,0)


        def END(self):
            return self.getToken(HanaParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def parameter_clause(self):
            return self.getTypedRuleContext(HanaParser.Parameter_clauseContext,0)


        def LANGUAGE(self):
            return self.getToken(HanaParser.LANGUAGE, 0)

        def lang(self):
            return self.getTypedRuleContext(HanaParser.LangContext,0)


        def SQL(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SQL)
            else:
                return self.getToken(HanaParser.SQL, i)

        def SECURITY(self):
            return self.getToken(HanaParser.SECURITY, 0)

        def security_mode(self):
            return self.getTypedRuleContext(HanaParser.Security_modeContext,0)


        def DEFAULT(self):
            return self.getToken(HanaParser.DEFAULT, 0)

        def SCHEMA(self):
            return self.getToken(HanaParser.SCHEMA, 0)

        def default_schema_name(self):
            return self.getTypedRuleContext(HanaParser.Default_schema_nameContext,0)


        def READS(self):
            return self.getToken(HanaParser.READS, 0)

        def DATA(self):
            return self.getToken(HanaParser.DATA, 0)

        def SEQUENTIAL(self):
            return self.getToken(HanaParser.SEQUENTIAL, 0)

        def EXECUTION(self):
            return self.getToken(HanaParser.EXECUTION, 0)

        def WITH(self):
            return self.getToken(HanaParser.WITH, 0)

        def RESULT(self):
            return self.getToken(HanaParser.RESULT, 0)

        def VIEW(self):
            return self.getToken(HanaParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(HanaParser.View_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_create_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure_body" ):
                listener.enterCreate_procedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure_body" ):
                listener.exitCreate_procedure_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_procedure_body" ):
                return visitor.visitCreate_procedure_body(self)
            else:
                return visitor.visitChildren(self)




    def create_procedure_body(self):

        localctx = HanaParser.Create_procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_create_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(HanaParser.CREATE)
            self.state = 891
            self.match(HanaParser.PROCEDURE)
            self.state = 892
            self.proc_name()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 893
                self.parameter_clause()


            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==201:
                self.state = 896
                self.match(HanaParser.LANGUAGE)
                self.state = 897
                self.lang()


            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==371:
                self.state = 900
                self.match(HanaParser.SQL)
                self.state = 901
                self.match(HanaParser.SECURITY)
                self.state = 902
                self.security_mode()


            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 905
                self.match(HanaParser.DEFAULT)
                self.state = 906
                self.match(HanaParser.SCHEMA)
                self.state = 907
                self.default_schema_name()


            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==308:
                self.state = 910
                self.match(HanaParser.READS)
                self.state = 911
                self.match(HanaParser.SQL)
                self.state = 912
                self.match(HanaParser.DATA)
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==444:
                    self.state = 913
                    self.match(HanaParser.WITH)
                    self.state = 914
                    self.match(HanaParser.RESULT)
                    self.state = 915
                    self.match(HanaParser.VIEW)
                    self.state = 916
                    self.view_name()




            self.state = 921
            self.match(HanaParser.AS)
            self.state = 922
            self.match(HanaParser.BEGIN)
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 923
                self.match(HanaParser.SEQUENTIAL)
                self.state = 924
                self.match(HanaParser.EXECUTION)


            self.state = 927
            self.procedure_body()
            self.state = 928
            self.match(HanaParser.END)
            self.state = 929
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_param_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_name" ):
                listener.enterParam_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_name" ):
                listener.exitParam_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_name" ):
                return visitor.visitParam_name(self)
            else:
                return visitor.visitChildren(self)




    def param_name(self):

        localctx = HanaParser.Param_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_param_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_type(self):
            return self.getTypedRuleContext(HanaParser.Sql_typeContext,0)


        def table_type(self):
            return self.getTypedRuleContext(HanaParser.Table_typeContext,0)


        def table_type_definition(self):
            return self.getTypedRuleContext(HanaParser.Table_type_definitionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_param_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type" ):
                listener.enterParam_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type" ):
                listener.exitParam_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_type" ):
                return visitor.visitParam_type(self)
            else:
                return visitor.visitChildren(self)




    def param_type(self):

        localctx = HanaParser.Param_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_param_type)
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.sql_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.table_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 935
                self.table_type_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HanaParser.DATE, 0)

        def TIME(self):
            return self.getToken(HanaParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(HanaParser.TIMESTAMP, 0)

        def SECONDDATE(self):
            return self.getToken(HanaParser.SECONDDATE, 0)

        def TINYINT(self):
            return self.getToken(HanaParser.TINYINT, 0)

        def SMALLINT(self):
            return self.getToken(HanaParser.SMALLINT, 0)

        def INTEGER(self):
            return self.getToken(HanaParser.INTEGER, 0)

        def INT(self):
            return self.getToken(HanaParser.INT, 0)

        def BIGINT(self):
            return self.getToken(HanaParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(HanaParser.DECIMAL, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.NumericContext)
            else:
                return self.getTypedRuleContext(HanaParser.NumericContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def SMALLDECIMAL(self):
            return self.getToken(HanaParser.SMALLDECIMAL, 0)

        def REAL(self):
            return self.getToken(HanaParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(HanaParser.DOUBLE, 0)

        def VARCHAR(self):
            return self.getToken(HanaParser.VARCHAR, 0)

        def NVARCHAR(self):
            return self.getToken(HanaParser.NVARCHAR, 0)

        def ALPHANUM(self):
            return self.getToken(HanaParser.ALPHANUM, 0)

        def VARBINARY(self):
            return self.getToken(HanaParser.VARBINARY, 0)

        def BLOB(self):
            return self.getToken(HanaParser.BLOB, 0)

        def CLOB(self):
            return self.getToken(HanaParser.CLOB, 0)

        def NCLOB(self):
            return self.getToken(HanaParser.NCLOB, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_sql_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_type" ):
                listener.enterSql_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_type" ):
                listener.exitSql_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_type" ):
                return visitor.visitSql_type(self)
            else:
                return visitor.visitChildren(self)




    def sql_type(self):

        localctx = HanaParser.Sql_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_sql_type)
        self._la = 0 # Token type
        try:
            self.state = 992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.match(HanaParser.DATE)
                pass
            elif token in [393]:
                self.enterOuterAlt(localctx, 2)
                self.state = 939
                self.match(HanaParser.TIME)
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 3)
                self.state = 940
                self.match(HanaParser.TIMESTAMP)
                pass
            elif token in [342]:
                self.enterOuterAlt(localctx, 4)
                self.state = 941
                self.match(HanaParser.SECONDDATE)
                pass
            elif token in [402]:
                self.enterOuterAlt(localctx, 5)
                self.state = 942
                self.match(HanaParser.TINYINT)
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 6)
                self.state = 943
                self.match(HanaParser.SMALLINT)
                pass
            elif token in [189]:
                self.enterOuterAlt(localctx, 7)
                self.state = 944
                self.match(HanaParser.INTEGER)
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 8)
                self.state = 945
                self.match(HanaParser.INT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 9)
                self.state = 946
                self.match(HanaParser.BIGINT)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 10)
                self.state = 947
                self.match(HanaParser.DECIMAL)
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 948
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 949
                    self.numeric()
                    self.state = 952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==535:
                        self.state = 950
                        self.match(HanaParser.COMMA)
                        self.state = 951
                        self.numeric()


                    self.state = 954
                    self.match(HanaParser.RIGHT_PAREN)


                pass
            elif token in [367]:
                self.enterOuterAlt(localctx, 11)
                self.state = 958
                self.match(HanaParser.SMALLDECIMAL)
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 12)
                self.state = 959
                self.match(HanaParser.REAL)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 13)
                self.state = 960
                self.match(HanaParser.DOUBLE)
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 14)
                self.state = 961
                self.match(HanaParser.VARCHAR)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 962
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 963
                    self.numeric()
                    self.state = 964
                    self.match(HanaParser.RIGHT_PAREN)


                pass
            elif token in [264]:
                self.enterOuterAlt(localctx, 15)
                self.state = 968
                self.match(HanaParser.NVARCHAR)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 969
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 970
                    self.numeric()
                    self.state = 971
                    self.match(HanaParser.RIGHT_PAREN)


                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 16)
                self.state = 975
                self.match(HanaParser.ALPHANUM)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 976
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 977
                    self.numeric()
                    self.state = 978
                    self.match(HanaParser.RIGHT_PAREN)


                pass
            elif token in [481]:
                self.enterOuterAlt(localctx, 17)
                self.state = 982
                self.match(HanaParser.VARBINARY)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 983
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 984
                    self.numeric()
                    self.state = 985
                    self.match(HanaParser.RIGHT_PAREN)


                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 18)
                self.state = 989
                self.match(HanaParser.BLOB)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 19)
                self.state = 990
                self.match(HanaParser.CLOB)
                pass
            elif token in [244]:
                self.enterOuterAlt(localctx, 20)
                self.state = 991
                self.match(HanaParser.NCLOB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_table_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type" ):
                listener.enterTable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type" ):
                listener.exitTable_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type" ):
                return visitor.visitTable_type(self)
            else:
                return visitor.visitChildren(self)




    def table_type(self):

        localctx = HanaParser.Table_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_table_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(HanaParser.TABLE, 0)

        def column_list_definition(self):
            return self.getTypedRuleContext(HanaParser.Column_list_definitionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_definition" ):
                return visitor.visitTable_type_definition(self)
            else:
                return visitor.visitChildren(self)




    def table_type_definition(self):

        localctx = HanaParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(HanaParser.TABLE)
            self.state = 997
            self.column_list_definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_list_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def column_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_elemContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_elemContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_column_list_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list_definition" ):
                listener.enterColumn_list_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list_definition" ):
                listener.exitColumn_list_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_list_definition" ):
                return visitor.visitColumn_list_definition(self)
            else:
                return visitor.visitChildren(self)




    def column_list_definition(self):

        localctx = HanaParser.Column_list_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_column_list_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1000
            self.column_elem()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1001
                self.match(HanaParser.COMMA)
                self.state = 1002
                self.column_elem()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1008
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(HanaParser.Column_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(HanaParser.Data_typeContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_column_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_elem" ):
                listener.enterColumn_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_elem" ):
                listener.exitColumn_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_elem" ):
                return visitor.visitColumn_elem(self)
            else:
                return visitor.visitChildren(self)




    def column_elem(self):

        localctx = HanaParser.Column_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_column_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.column_name()
            self.state = 1011
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = HanaParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_type(self):
            return self.getTypedRuleContext(HanaParser.Sql_typeContext,0)


        def SHORTTEXT(self):
            return self.getToken(HanaParser.SHORTTEXT, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def numeric(self):
            return self.getTypedRuleContext(HanaParser.NumericContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def TEXT(self):
            return self.getToken(HanaParser.TEXT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = HanaParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 1024
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 38, 39, 60, 95, 102, 119, 188, 189, 244, 264, 309, 342, 366, 367, 393, 394, 402, 429, 481]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self.sql_type()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.match(HanaParser.SHORTTEXT)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 1017
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 1018
                    self.numeric()
                    self.state = 1019
                    self.match(HanaParser.RIGHT_PAREN)


                pass
            elif token in [479]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1023
                self.match(HanaParser.TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_name(self):
            return self.getTypedRuleContext(HanaParser.Param_nameContext,0)


        def param_type(self):
            return self.getTypedRuleContext(HanaParser.Param_typeContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(HanaParser.Default_value_partContext,0)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def OUT(self):
            return self.getToken(HanaParser.OUT, 0)

        def INOUT(self):
            return self.getToken(HanaParser.INOUT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = HanaParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 1026
                _la = self._input.LA(1)
                if not(_la==172 or _la==184 or _la==279):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1029
            self.param_name()
            self.state = 1030
            self.param_type()
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==538:
                self.state = 1031
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ParameterContext)
            else:
                return self.getTypedRuleContext(HanaParser.ParameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_parameter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_clause" ):
                listener.enterParameter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_clause" ):
                listener.exitParameter_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_clause" ):
                return visitor.visitParameter_clause(self)
            else:
                return visitor.visitChildren(self)




    def parameter_clause(self):

        localctx = HanaParser.Parameter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_parameter_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1035
            self.parameter()
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1036
                self.match(HanaParser.COMMA)
                self.state = 1037
                self.parameter()
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1043
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LangContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQLSCRIPT(self):
            return self.getToken(HanaParser.SQLSCRIPT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_lang

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLang" ):
                listener.enterLang(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLang" ):
                listener.exitLang(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLang" ):
                return visitor.visitLang(self)
            else:
                return visitor.visitChildren(self)




    def lang(self):

        localctx = HanaParser.LangContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_lang)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            _la = self._input.LA(1)
            if not(_la==1 or _la==375):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER(self):
            return self.getToken(HanaParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(HanaParser.INVOKER, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_security_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_mode" ):
                listener.enterSecurity_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_mode" ):
                listener.exitSecurity_mode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurity_mode" ):
                return visitor.visitSecurity_mode(self)
            else:
                return visitor.visitChildren(self)




    def security_mode(self):

        localctx = HanaParser.Security_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_security_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            _la = self._input.LA(1)
            if not(_la==109 or _la==194):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_default_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_schema_name" ):
                listener.enterDefault_schema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_schema_name" ):
                listener.exitDefault_schema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_schema_name" ):
                return visitor.visitDefault_schema_name(self)
            else:
                return visitor.visitChildren(self)




    def default_schema_name(self):

        localctx = HanaParser.Default_schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_default_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_name" ):
                return visitor.visitView_name(self)
            else:
                return visitor.visitChildren(self)




    def view_name(self):

        localctx = HanaParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Proc_declContext)
            else:
                return self.getTypedRuleContext(HanaParser.Proc_declContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_decl_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl_list" ):
                listener.enterProc_decl_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl_list" ):
                listener.exitProc_decl_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_decl_list" ):
                return visitor.visitProc_decl_list(self)
            else:
                return visitor.visitChildren(self)




    def proc_decl_list(self):

        localctx = HanaParser.Proc_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_proc_decl_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.proc_decl()
            self.state = 1057
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1054
                    self.proc_decl() 
                self.state = 1059
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def proc_decl_op(self):
            return self.getTypedRuleContext(HanaParser.Proc_decl_opContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_proc_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl" ):
                listener.enterProc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl" ):
                listener.exitProc_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_decl" ):
                return visitor.visitProc_decl(self)
            else:
                return visitor.visitChildren(self)




    def proc_decl(self):

        localctx = HanaParser.Proc_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_proc_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(HanaParser.DECLARE)
            self.state = 1061
            self.proc_decl_op()
            self.state = 1062
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_decl_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_variable(self):
            return self.getTypedRuleContext(HanaParser.Proc_variableContext,0)


        def proc_table_variable(self):
            return self.getTypedRuleContext(HanaParser.Proc_table_variableContext,0)


        def proc_cursor(self):
            return self.getTypedRuleContext(HanaParser.Proc_cursorContext,0)


        def proc_condition(self):
            return self.getTypedRuleContext(HanaParser.Proc_conditionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_decl_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl_op" ):
                listener.enterProc_decl_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl_op" ):
                listener.exitProc_decl_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_decl_op" ):
                return visitor.visitProc_decl_op(self)
            else:
                return visitor.visitChildren(self)




    def proc_decl_op(self):

        localctx = HanaParser.Proc_decl_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_proc_decl_op)
        try:
            self.state = 1068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.proc_variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.proc_table_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1066
                self.proc_cursor()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1067
                self.proc_condition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name_list(self):
            return self.getTypedRuleContext(HanaParser.Variable_name_listContext,0)


        def sql_type(self):
            return self.getTypedRuleContext(HanaParser.Sql_typeContext,0)


        def array_datatype(self):
            return self.getTypedRuleContext(HanaParser.Array_datatypeContext,0)


        def CONSTANT(self):
            return self.getToken(HanaParser.CONSTANT, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def proc_default(self):
            return self.getTypedRuleContext(HanaParser.Proc_defaultContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_variable" ):
                listener.enterProc_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_variable" ):
                listener.exitProc_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_variable" ):
                return visitor.visitProc_variable(self)
            else:
                return visitor.visitChildren(self)




    def proc_variable(self):

        localctx = HanaParser.Proc_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_proc_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.variable_name_list()
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1071
                self.match(HanaParser.CONSTANT)


            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 1074
                self.sql_type()
                pass

            elif la_ == 2:
                self.state = 1075
                self.array_datatype()
                pass


            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 1078
                self.match(HanaParser.NOT)
                self.state = 1079
                self.match(HanaParser.NULL)


            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==538:
                self.state = 1082
                self.proc_default()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_table_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name_list(self):
            return self.getTypedRuleContext(HanaParser.Variable_name_listContext,0)


        def table_type_definition(self):
            return self.getTypedRuleContext(HanaParser.Table_type_definitionContext,0)


        def table_type(self):
            return self.getTypedRuleContext(HanaParser.Table_typeContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_table_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_table_variable" ):
                listener.enterProc_table_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_table_variable" ):
                listener.exitProc_table_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_table_variable" ):
                return visitor.visitProc_table_variable(self)
            else:
                return visitor.visitChildren(self)




    def proc_table_variable(self):

        localctx = HanaParser.Proc_table_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_proc_table_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.variable_name_list()
            self.state = 1088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [390]:
                self.state = 1086
                self.table_type_definition()
                pass
            elif token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 560]:
                self.state = 1087
                self.table_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Variable_nameContext,i)


        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_variable_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name_list" ):
                listener.enterVariable_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name_list" ):
                listener.exitVariable_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_name_list" ):
                return visitor.visitVariable_name_list(self)
            else:
                return visitor.visitChildren(self)




    def variable_name_list(self):

        localctx = HanaParser.Variable_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_variable_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.variable_name()
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==535:
                self.state = 1091
                self.match(HanaParser.COMMA)
                self.state = 1092
                self.variable_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_datatypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_type(self):
            return self.getTypedRuleContext(HanaParser.Sql_typeContext,0)


        def ARRAY(self):
            return self.getToken(HanaParser.ARRAY, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def array_constructor(self):
            return self.getTypedRuleContext(HanaParser.Array_constructorContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_array_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_datatype" ):
                listener.enterArray_datatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_datatype" ):
                listener.exitArray_datatype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_datatype" ):
                return visitor.visitArray_datatype(self)
            else:
                return visitor.visitChildren(self)




    def array_datatype(self):

        localctx = HanaParser.Array_datatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_array_datatype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.sql_type()
            self.state = 1096
            self.match(HanaParser.ARRAY)

            self.state = 1097
            self.match(HanaParser.EQUALS_OP)
            self.state = 1098
            self.array_constructor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_constructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HanaParser.ARRAY, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_array_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_constructor" ):
                listener.enterArray_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_constructor" ):
                listener.exitArray_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_constructor" ):
                return visitor.visitArray_constructor(self)
            else:
                return visitor.visitChildren(self)




    def array_constructor(self):

        localctx = HanaParser.Array_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_array_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(HanaParser.ARRAY)
            self.state = 1101
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1102
            self.expression()
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1103
                self.match(HanaParser.COMMA)
                self.state = 1104
                self.expression()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1110
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(HanaParser.DEFAULT, 0)

        def ASSIGN_OP(self):
            return self.getToken(HanaParser.ASSIGN_OP, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_proc_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_default" ):
                listener.enterProc_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_default" ):
                listener.exitProc_default(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_default" ):
                return visitor.visitProc_default(self)
            else:
                return visitor.visitChildren(self)




    def proc_default(self):

        localctx = HanaParser.Proc_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proc_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            _la = self._input.LA(1)
            if not(_la==106 or _la==538):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1113
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_cursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(HanaParser.CURSOR, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(HanaParser.Cursor_nameContext,0)


        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def proc_cursor_param_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_cursor_param_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_cursor" ):
                listener.enterProc_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_cursor" ):
                listener.exitProc_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_cursor" ):
                return visitor.visitProc_cursor(self)
            else:
                return visitor.visitChildren(self)




    def proc_cursor(self):

        localctx = HanaParser.Proc_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proc_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(HanaParser.CURSOR)
            self.state = 1116
            self.cursor_name()
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 1117
                self.proc_cursor_param_list()


            self.state = 1120
            self.match(HanaParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_cursor_param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_cursor_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Proc_cursor_paramContext)
            else:
                return self.getTypedRuleContext(HanaParser.Proc_cursor_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_proc_cursor_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_cursor_param_list" ):
                listener.enterProc_cursor_param_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_cursor_param_list" ):
                listener.exitProc_cursor_param_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_cursor_param_list" ):
                return visitor.visitProc_cursor_param_list(self)
            else:
                return visitor.visitChildren(self)




    def proc_cursor_param_list(self):

        localctx = HanaParser.Proc_cursor_param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proc_cursor_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.proc_cursor_param()
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1123
                self.match(HanaParser.COMMA)
                self.state = 1124
                self.proc_cursor_param()
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_name" ):
                return visitor.visitVariable_name(self)
            else:
                return visitor.visitChildren(self)




    def variable_name(self):

        localctx = HanaParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = HanaParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_cursor_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_cursor_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_name(self):
            return self.getTypedRuleContext(HanaParser.Param_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(HanaParser.Data_typeContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_cursor_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_cursor_param" ):
                listener.enterProc_cursor_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_cursor_param" ):
                listener.exitProc_cursor_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_cursor_param" ):
                return visitor.visitProc_cursor_param(self)
            else:
                return visitor.visitChildren(self)




    def proc_cursor_param(self):

        localctx = HanaParser.Proc_cursor_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proc_cursor_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.param_name()
            self.state = 1135
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(HanaParser.Variable_nameContext,0)


        def CONDITION(self):
            return self.getToken(HanaParser.CONDITION, 0)

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def sql_error_code(self):
            return self.getTypedRuleContext(HanaParser.Sql_error_codeContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_condition" ):
                listener.enterProc_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_condition" ):
                listener.exitProc_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_condition" ):
                return visitor.visitProc_condition(self)
            else:
                return visitor.visitChildren(self)




    def proc_condition(self):

        localctx = HanaParser.Proc_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proc_condition)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1137
                self.variable_name()
                self.state = 1138
                self.match(HanaParser.CONDITION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1140
                self.variable_name()
                self.state = 1141
                self.match(HanaParser.CONDITION)
                self.state = 1142
                self.match(HanaParser.FOR)
                self.state = 1143
                self.sql_error_code()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_error_codeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self):
            return self.getTypedRuleContext(HanaParser.NumericContext,0)


        def SQL_ERROR_CODE(self):
            return self.getToken(HanaParser.SQL_ERROR_CODE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_sql_error_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_error_code" ):
                listener.enterSql_error_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_error_code" ):
                listener.exitSql_error_code(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_error_code" ):
                return visitor.visitSql_error_code(self)
            else:
                return visitor.visitChildren(self)




    def sql_error_code(self):

        localctx = HanaParser.Sql_error_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_sql_error_code)
        try:
            self.state = 1150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [523, 524]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.numeric()
                pass
            elif token in [476]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1148
                self.match(HanaParser.SQL_ERROR_CODE)
                self.state = 1149
                self.numeric()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_handler_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Proc_handlerContext)
            else:
                return self.getTypedRuleContext(HanaParser.Proc_handlerContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_handler_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_handler_list" ):
                listener.enterProc_handler_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_handler_list" ):
                listener.exitProc_handler_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_handler_list" ):
                return visitor.visitProc_handler_list(self)
            else:
                return visitor.visitChildren(self)




    def proc_handler_list(self):

        localctx = HanaParser.Proc_handler_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proc_handler_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1152
                self.proc_handler()
                self.state = 1155 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==103):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_handlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def EXIT(self):
            return self.getToken(HanaParser.EXIT, 0)

        def HANDLER(self):
            return self.getToken(HanaParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def proc_condition_value_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_condition_value_listContext,0)


        def proc_stmt(self):
            return self.getTypedRuleContext(HanaParser.Proc_stmtContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_handler" ):
                listener.enterProc_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_handler" ):
                listener.exitProc_handler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_handler" ):
                return visitor.visitProc_handler(self)
            else:
                return visitor.visitChildren(self)




    def proc_handler(self):

        localctx = HanaParser.Proc_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proc_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(HanaParser.DECLARE)
            self.state = 1158
            self.match(HanaParser.EXIT)
            self.state = 1159
            self.match(HanaParser.HANDLER)
            self.state = 1160
            self.match(HanaParser.FOR)
            self.state = 1161
            self.proc_condition_value_list()
            self.state = 1162
            self.proc_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_condition_value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_condition_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Proc_condition_valueContext)
            else:
                return self.getTypedRuleContext(HanaParser.Proc_condition_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_proc_condition_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_condition_value_list" ):
                listener.enterProc_condition_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_condition_value_list" ):
                listener.exitProc_condition_value_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_condition_value_list" ):
                return visitor.visitProc_condition_value_list(self)
            else:
                return visitor.visitChildren(self)




    def proc_condition_value_list(self):

        localctx = HanaParser.Proc_condition_value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_proc_condition_value_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.proc_condition_value()
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1165
                self.match(HanaParser.COMMA)
                self.state = 1166
                self.proc_condition_value()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_condition_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQLEXCEPTION(self):
            return self.getToken(HanaParser.SQLEXCEPTION, 0)

        def SQLWARNING(self):
            return self.getToken(HanaParser.SQLWARNING, 0)

        def sql_error_code(self):
            return self.getTypedRuleContext(HanaParser.Sql_error_codeContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(HanaParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_condition_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_condition_value" ):
                listener.enterProc_condition_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_condition_value" ):
                listener.exitProc_condition_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_condition_value" ):
                return visitor.visitProc_condition_value(self)
            else:
                return visitor.visitChildren(self)




    def proc_condition_value(self):

        localctx = HanaParser.Proc_condition_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_proc_condition_value)
        try:
            self.state = 1176
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [374]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.match(HanaParser.SQLEXCEPTION)
                pass
            elif token in [478]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.match(HanaParser.SQLWARNING)
                pass
            elif token in [476, 523, 524]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1174
                self.sql_error_code()
                pass
            elif token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 560]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1175
                self.variable_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Proc_stmtContext)
            else:
                return self.getTypedRuleContext(HanaParser.Proc_stmtContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_stmt_list" ):
                listener.enterProc_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_stmt_list" ):
                listener.exitProc_stmt_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_stmt_list" ):
                return visitor.visitProc_stmt_list(self)
            else:
                return visitor.visitChildren(self)




    def proc_stmt_list(self):

        localctx = HanaParser.Proc_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_proc_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1178
                self.proc_stmt()
                self.state = 1181 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -297888769761534208) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4612267003553256515) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325406703649) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866444661686497) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099435868161) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488429087) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_block(self):
            return self.getTypedRuleContext(HanaParser.Proc_blockContext,0)


        def proc_assign(self):
            return self.getTypedRuleContext(HanaParser.Proc_assignContext,0)


        def proc_single_assign(self):
            return self.getTypedRuleContext(HanaParser.Proc_single_assignContext,0)


        def proc_sql(self):
            return self.getTypedRuleContext(HanaParser.Proc_sqlContext,0)


        def proc_call(self):
            return self.getTypedRuleContext(HanaParser.Proc_callContext,0)


        def proc_if(self):
            return self.getTypedRuleContext(HanaParser.Proc_ifContext,0)


        def proc_signal(self):
            return self.getTypedRuleContext(HanaParser.Proc_signalContext,0)


        def proc_resignal(self):
            return self.getTypedRuleContext(HanaParser.Proc_resignalContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_stmt" ):
                listener.enterProc_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_stmt" ):
                listener.exitProc_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_stmt" ):
                return visitor.visitProc_stmt(self)
            else:
                return visitor.visitChildren(self)




    def proc_stmt(self):

        localctx = HanaParser.Proc_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_proc_stmt)
        try:
            self.state = 1191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self.proc_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self.proc_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1185
                self.proc_single_assign()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1186
                self.proc_sql()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1187
                self.proc_call()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1188
                self.proc_if()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1189
                self.proc_signal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1190
                self.proc_resignal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def insert_stmt(self):
            return self.getTypedRuleContext(HanaParser.Insert_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(HanaParser.Update_stmtContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_sql" ):
                listener.enterProc_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_sql" ):
                listener.exitProc_sql(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_sql" ):
                return visitor.visitProc_sql(self)
            else:
                return visitor.visitChildren(self)




    def proc_sql(self):

        localctx = HanaParser.Proc_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_proc_sql)
        try:
            self.state = 1202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [346, 529]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.subquery()
                self.state = 1194
                self.match(HanaParser.SEMICOLON)
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.insert_stmt()
                self.state = 1197
                self.match(HanaParser.SEMICOLON)
                pass
            elif token in [420]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1199
                self.update_stmt()
                self.state = 1200
                self.match(HanaParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(HanaParser.UPDATE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(HanaParser.General_table_refContext,0)


        def update_set_clause(self):
            return self.getTypedRuleContext(HanaParser.Update_set_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(HanaParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(HanaParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(HanaParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(HanaParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = HanaParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(HanaParser.UPDATE)
            self.state = 1205
            self.general_table_ref()
            self.state = 1206
            self.update_set_clause()
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 1207
                self.from_clause()


            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==442:
                self.state = 1210
                self.where_clause()


            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322 or _la==323:
                self.state = 1213
                self.static_returning_clause()


            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==216:
                self.state = 1216
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(HanaParser.INSERT, 0)

        def single_table_insert(self):
            return self.getTypedRuleContext(HanaParser.Single_table_insertContext,0)


        def multi_table_insert(self):
            return self.getTypedRuleContext(HanaParser.Multi_table_insertContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = HanaParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_insert_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(HanaParser.INSERT)
            self.state = 1222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.state = 1220
                self.single_table_insert()
                pass
            elif token in [13, 149, 440]:
                self.state = 1221
                self.multi_table_insert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_signalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNAL(self):
            return self.getToken(HanaParser.SIGNAL, 0)

        def signal_value(self):
            return self.getTypedRuleContext(HanaParser.Signal_valueContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def set_signal_info(self):
            return self.getTypedRuleContext(HanaParser.Set_signal_infoContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_signal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_signal" ):
                listener.enterProc_signal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_signal" ):
                listener.exitProc_signal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_signal" ):
                return visitor.visitProc_signal(self)
            else:
                return visitor.visitChildren(self)




    def proc_signal(self):

        localctx = HanaParser.Proc_signalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_proc_signal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(HanaParser.SIGNAL)
            self.state = 1225
            self.signal_value()
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==354:
                self.state = 1226
                self.set_signal_info()


            self.state = 1229
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_resignalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESIGNAL(self):
            return self.getToken(HanaParser.RESIGNAL, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def signal_value(self):
            return self.getTypedRuleContext(HanaParser.Signal_valueContext,0)


        def set_signal_info(self):
            return self.getTypedRuleContext(HanaParser.Set_signal_infoContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_resignal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_resignal" ):
                listener.enterProc_resignal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_resignal" ):
                listener.exitProc_resignal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_resignal" ):
                return visitor.visitProc_resignal(self)
            else:
                return visitor.visitChildren(self)




    def proc_resignal(self):

        localctx = HanaParser.Proc_resignalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_proc_resignal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(HanaParser.RESIGNAL)
            self.state = 1233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 1232
                self.signal_value()


            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==354:
                self.state = 1235
                self.set_signal_info()


            self.state = 1238
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signal_name(self):
            return self.getTypedRuleContext(HanaParser.Signal_nameContext,0)


        def sql_error_code(self):
            return self.getTypedRuleContext(HanaParser.Sql_error_codeContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_signal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignal_value" ):
                listener.enterSignal_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignal_value" ):
                listener.exitSignal_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignal_value" ):
                return visitor.visitSignal_value(self)
            else:
                return visitor.visitChildren(self)




    def signal_value(self):

        localctx = HanaParser.Signal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_signal_value)
        try:
            self.state = 1242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 560]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                self.signal_name()
                pass
            elif token in [476, 523, 524]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.sql_error_code()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signal_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_signal_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignal_name" ):
                listener.enterSignal_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignal_name" ):
                listener.exitSignal_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignal_name" ):
                return visitor.visitSignal_name(self)
            else:
                return visitor.visitChildren(self)




    def signal_name(self):

        localctx = HanaParser.Signal_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_signal_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_signal_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(HanaParser.MESSAGE_TEXT, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def message_string(self):
            return self.getTypedRuleContext(HanaParser.Message_stringContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_set_signal_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_signal_info" ):
                listener.enterSet_signal_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_signal_info" ):
                listener.exitSet_signal_info(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_signal_info" ):
                return visitor.visitSet_signal_info(self)
            else:
                return visitor.visitChildren(self)




    def set_signal_info(self):

        localctx = HanaParser.Set_signal_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_set_signal_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(HanaParser.SET)
            self.state = 1247
            self.match(HanaParser.MESSAGE_TEXT)
            self.state = 1248
            self.match(HanaParser.EQUALS_OP)
            self.state = 1249
            self.match(HanaParser.T__1)
            self.state = 1250
            self.message_string()
            self.state = 1251
            self.match(HanaParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Message_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_message_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessage_string" ):
                listener.enterMessage_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessage_string" ):
                listener.exitMessage_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessage_string" ):
                return visitor.visitMessage_string(self)
            else:
                return visitor.visitChildren(self)




    def message_string(self):

        localctx = HanaParser.Message_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_message_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.IF)
            else:
                return self.getToken(HanaParser.IF, i)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def END(self):
            return self.getToken(HanaParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def SEQUENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SEQUENTIAL)
            else:
                return self.getToken(HanaParser.SEQUENTIAL, i)

        def EXECUTION(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.EXECUTION)
            else:
                return self.getToken(HanaParser.EXECUTION, i)

        def proc_decl_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_decl_listContext,0)


        def proc_handler_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_handler_listContext,0)


        def proc_stmt_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_stmt_listContext,0)


        def proc_elsif_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_elsif_listContext,0)


        def proc_else(self):
            return self.getTypedRuleContext(HanaParser.Proc_elseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_if" ):
                listener.enterProc_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_if" ):
                listener.exitProc_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_if" ):
                return visitor.visitProc_if(self)
            else:
                return visitor.visitChildren(self)




    def proc_if(self):

        localctx = HanaParser.Proc_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_proc_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(HanaParser.IF)
            self.state = 1256
            self.condition()
            self.state = 1257
            self.match(HanaParser.THEN)
            self.state = 1262
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1258
                    self.match(HanaParser.SEQUENTIAL)
                    self.state = 1259
                    self.match(HanaParser.EXECUTION) 
                self.state = 1264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 1266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 1265
                self.proc_decl_list()


            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1268
                self.proc_handler_list()


            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888769761534208) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4612267003553256515) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325406703649) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866444661686497) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099435868161) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488429087) != 0):
                self.state = 1271
                self.proc_stmt_list()


            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==469:
                self.state = 1274
                self.proc_elsif_list()


            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1277
                self.proc_else()


            self.state = 1280
            self.match(HanaParser.END)
            self.state = 1281
            self.match(HanaParser.IF)
            self.state = 1282
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_elsif_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(HanaParser.ELSEIF, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def SEQUENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SEQUENTIAL)
            else:
                return self.getToken(HanaParser.SEQUENTIAL, i)

        def EXECUTION(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.EXECUTION)
            else:
                return self.getToken(HanaParser.EXECUTION, i)

        def proc_decl_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_decl_listContext,0)


        def proc_handler_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_handler_listContext,0)


        def proc_stmt_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_stmt_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_elsif_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_elsif_list" ):
                listener.enterProc_elsif_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_elsif_list" ):
                listener.exitProc_elsif_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_elsif_list" ):
                return visitor.visitProc_elsif_list(self)
            else:
                return visitor.visitChildren(self)




    def proc_elsif_list(self):

        localctx = HanaParser.Proc_elsif_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proc_elsif_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(HanaParser.ELSEIF)
            self.state = 1285
            self.condition()
            self.state = 1286
            self.match(HanaParser.THEN)
            self.state = 1291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1287
                    self.match(HanaParser.SEQUENTIAL)
                    self.state = 1288
                    self.match(HanaParser.EXECUTION) 
                self.state = 1293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 1295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 1294
                self.proc_decl_list()


            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1297
                self.proc_handler_list()


            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888769761534208) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4612267003553256515) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325406703649) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866444661686497) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099435868161) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488429087) != 0):
                self.state = 1300
                self.proc_stmt_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(HanaParser.ELSE, 0)

        def SEQUENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SEQUENTIAL)
            else:
                return self.getToken(HanaParser.SEQUENTIAL, i)

        def EXECUTION(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.EXECUTION)
            else:
                return self.getToken(HanaParser.EXECUTION, i)

        def proc_decl_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_decl_listContext,0)


        def proc_handler_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_handler_listContext,0)


        def proc_stmt_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_stmt_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_else" ):
                listener.enterProc_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_else" ):
                listener.exitProc_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_else" ):
                return visitor.visitProc_else(self)
            else:
                return visitor.visitChildren(self)




    def proc_else(self):

        localctx = HanaParser.Proc_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proc_else)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(HanaParser.ELSE)
            self.state = 1308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1304
                    self.match(HanaParser.SEQUENTIAL)
                    self.state = 1305
                    self.match(HanaParser.EXECUTION) 
                self.state = 1310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 1311
                self.proc_decl_list()


            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1314
                self.proc_handler_list()


            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888769761534208) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4612267003553256515) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325406703649) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866444661686497) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099435868161) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488429087) != 0):
                self.state = 1317
                self.proc_stmt_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(HanaParser.BEGIN, 0)

        def END(self):
            return self.getToken(HanaParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def proc_block_option(self):
            return self.getTypedRuleContext(HanaParser.Proc_block_optionContext,0)


        def proc_decl_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_decl_listContext,0)


        def proc_handler_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_handler_listContext,0)


        def proc_stmt_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_stmt_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_block" ):
                listener.enterProc_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_block" ):
                listener.exitProc_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_block" ):
                return visitor.visitProc_block(self)
            else:
                return visitor.visitChildren(self)




    def proc_block(self):

        localctx = HanaParser.Proc_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proc_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(HanaParser.BEGIN)
            self.state = 1322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 1321
                self.proc_block_option()


            self.state = 1325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 1324
                self.proc_decl_list()


            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1327
                self.proc_handler_list()


            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888769761534208) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4612267003553256515) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325406703649) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866444661686497) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099435868161) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488429087) != 0):
                self.state = 1330
                self.proc_stmt_list()


            self.state = 1333
            self.match(HanaParser.END)
            self.state = 1334
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_block_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEQUENTIAL(self):
            return self.getToken(HanaParser.SEQUENTIAL, 0)

        def EXECUTION(self):
            return self.getToken(HanaParser.EXECUTION, 0)

        def AUTONOMOUS(self):
            return self.getToken(HanaParser.AUTONOMOUS, 0)

        def TRANSACTION(self):
            return self.getToken(HanaParser.TRANSACTION, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_proc_block_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_block_option" ):
                listener.enterProc_block_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_block_option" ):
                listener.exitProc_block_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_block_option" ):
                return visitor.visitProc_block_option(self)
            else:
                return visitor.visitChildren(self)




    def proc_block_option(self):

        localctx = HanaParser.Proc_block_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proc_block_option)
        self._la = 0 # Token type
        try:
            self.state = 1350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [349]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1336
                self.match(HanaParser.SEQUENTIAL)
                self.state = 1337
                self.match(HanaParser.EXECUTION)
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==467:
                    self.state = 1339
                    self.match(HanaParser.AUTONOMOUS)
                    self.state = 1340
                    self.match(HanaParser.TRANSACTION)


                pass
            elif token in [467]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.match(HanaParser.AUTONOMOUS)
                self.state = 1344
                self.match(HanaParser.TRANSACTION)
                self.state = 1348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 1346
                    self.match(HanaParser.SEQUENTIAL)
                    self.state = 1347
                    self.match(HanaParser.EXECUTION)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(HanaParser.Variable_nameContext,0)


        def ASSIGN_OP(self):
            return self.getToken(HanaParser.ASSIGN_OP, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def LEFT_BRACKET(self):
            return self.getToken(HanaParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(HanaParser.RIGHT_BRACKET, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_proc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_assign" ):
                listener.enterProc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_assign" ):
                listener.exitProc_assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_assign" ):
                return visitor.visitProc_assign(self)
            else:
                return visitor.visitChildren(self)




    def proc_assign(self):

        localctx = HanaParser.Proc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proc_assign)
        try:
            self.state = 1365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1352
                self.variable_name()
                self.state = 1353
                self.match(HanaParser.ASSIGN_OP)

                self.state = 1354
                self.expression()
                self.state = 1355
                self.match(HanaParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1357
                self.variable_name()
                self.state = 1358
                self.match(HanaParser.LEFT_BRACKET)
                self.state = 1359
                self.expression()
                self.state = 1360
                self.match(HanaParser.RIGHT_BRACKET)
                self.state = 1361
                self.match(HanaParser.EQUALS_OP)
                self.state = 1362
                self.expression()
                self.state = 1363
                self.match(HanaParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_single_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(HanaParser.Variable_nameContext,0)


        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def unnest_function(self):
            return self.getTypedRuleContext(HanaParser.Unnest_functionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_single_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_single_assign" ):
                listener.enterProc_single_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_single_assign" ):
                listener.exitProc_single_assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_single_assign" ):
                return visitor.visitProc_single_assign(self)
            else:
                return visitor.visitChildren(self)




    def proc_single_assign(self):

        localctx = HanaParser.Proc_single_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proc_single_assign)
        try:
            self.state = 1377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1367
                self.variable_name()
                self.state = 1368
                self.match(HanaParser.EQUALS_OP)
                self.state = 1369
                self.select_statement()
                self.state = 1370
                self.match(HanaParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.variable_name()
                self.state = 1373
                self.match(HanaParser.EQUALS_OP)
                self.state = 1374
                self.unnest_function()
                self.state = 1375
                self.match(HanaParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unnest_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNNEST(self):
            return self.getToken(HanaParser.UNNEST, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def variable_name_list(self):
            return self.getTypedRuleContext(HanaParser.Variable_name_listContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def WITH(self):
            return self.getToken(HanaParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(HanaParser.ORDINALITY, 0)

        def as_col_names(self):
            return self.getTypedRuleContext(HanaParser.As_col_namesContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_unnest_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest_function" ):
                listener.enterUnnest_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest_function" ):
                listener.exitUnnest_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnest_function" ):
                return visitor.visitUnnest_function(self)
            else:
                return visitor.visitChildren(self)




    def unnest_function(self):

        localctx = HanaParser.Unnest_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_unnest_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(HanaParser.UNNEST)
            self.state = 1380
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1381
            self.variable_name_list()
            self.state = 1382
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 1383
                self.match(HanaParser.WITH)
                self.state = 1384
                self.match(HanaParser.ORDINALITY)


            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1387
                self.as_col_names()


            self.state = 1390
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(HanaParser.Schema_nameContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = HanaParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1392
                self.schema_name()
                self.state = 1393
                self.match(HanaParser.PERIOD)


            self.state = 1397
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_col_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(HanaParser.Table_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(HanaParser.Column_name_listContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_as_col_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_col_names" ):
                listener.enterAs_col_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_col_names" ):
                listener.exitAs_col_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_col_names" ):
                return visitor.visitAs_col_names(self)
            else:
                return visitor.visitChildren(self)




    def as_col_names(self):

        localctx = HanaParser.As_col_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_as_col_names)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.match(HanaParser.AS)
            self.state = 1400
            self.table_name()
            self.state = 1401
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1402
            self.column_name_list()
            self.state = 1403
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = HanaParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.column_name()
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1406
                self.match(HanaParser.COMMA)
                self.state = 1407
                self.column_name()
                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(HanaParser.CALL, 0)

        def proc_name(self):
            return self.getTypedRuleContext(HanaParser.Proc_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def param_list(self):
            return self.getTypedRuleContext(HanaParser.Param_listContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.WITH)
            else:
                return self.getToken(HanaParser.WITH, i)

        def OVERVIEW(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.OVERVIEW)
            else:
                return self.getToken(HanaParser.OVERVIEW, i)

        def getRuleIndex(self):
            return HanaParser.RULE_proc_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_call" ):
                listener.enterProc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_call" ):
                listener.exitProc_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_call" ):
                return visitor.visitProc_call(self)
            else:
                return visitor.visitChildren(self)




    def proc_call(self):

        localctx = HanaParser.Proc_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_proc_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.match(HanaParser.CALL)
            self.state = 1414
            self.proc_name()
            self.state = 1415
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1416
            self.param_list()
            self.state = 1417
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 1422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==444:
                self.state = 1418
                self.match(HanaParser.WITH)
                self.state = 1419
                self.match(HanaParser.OVERVIEW)
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1425
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Proc_paramContext)
            else:
                return self.getTypedRuleContext(HanaParser.Proc_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = HanaParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.proc_param()
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1428
                self.match(HanaParser.COMMA)
                self.state = 1429
                self.proc_param()
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(HanaParser.Bind_variableContext,0)


        def named_param(self):
            return self.getTypedRuleContext(HanaParser.Named_paramContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_param" ):
                listener.enterProc_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_param" ):
                listener.exitProc_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_param" ):
                return visitor.visitProc_param(self)
            else:
                return visitor.visitChildren(self)




    def proc_param(self):

        localctx = HanaParser.Proc_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_proc_param)
        try:
            self.state = 1438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.id_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.bind_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1437
                self.named_param()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def bind_variable(self):
            return self.getTypedRuleContext(HanaParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_named_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_param" ):
                listener.enterNamed_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_param" ):
                listener.exitNamed_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_param" ):
                return visitor.visitNamed_param(self)
            else:
                return visitor.visitChildren(self)




    def named_param(self):

        localctx = HanaParser.Named_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_named_param)
        try:
            self.state = 1448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1440
                self.id_expression()
                self.state = 1441
                self.match(HanaParser.T__2)
                self.state = 1442
                self.id_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1444
                self.id_expression()
                self.state = 1445
                self.match(HanaParser.T__2)
                self.state = 1446
                self.bind_variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def proc_stmt_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_stmt_listContext,0)


        def proc_decl_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_decl_listContext,0)


        def proc_handler_list(self):
            return self.getTypedRuleContext(HanaParser.Proc_handler_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_body" ):
                listener.enterProcedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_body" ):
                listener.exitProcedure_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_body" ):
                return visitor.visitProcedure_body(self)
            else:
                return visitor.visitChildren(self)




    def procedure_body(self):

        localctx = HanaParser.Procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 1450
                self.proc_decl_list()


            self.state = 1454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 1453
                self.proc_handler_list()


            self.state = 1456
            self.proc_stmt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_body_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_procedure_body_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_body_" ):
                listener.enterProcedure_body_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_body_" ):
                listener.exitProcedure_body_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_body_" ):
                return visitor.visitProcedure_body_(self)
            else:
                return visitor.visitChildren(self)




    def procedure_body_(self):

        localctx = HanaParser.Procedure_body_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_procedure_body_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_name" ):
                return visitor.visitParameter_name(self)
            else:
                return visitor.visitChildren(self)




    def parameter_name(self):

        localctx = HanaParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1460
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_each_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def EACH(self):
            return self.getToken(HanaParser.EACH, 0)

        def ROW(self):
            return self.getToken(HanaParser.ROW, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_for_each_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_row" ):
                listener.enterFor_each_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_row" ):
                listener.exitFor_each_row(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_each_row" ):
                return visitor.visitFor_each_row(self)
            else:
                return visitor.visitChildren(self)




    def for_each_row(self):

        localctx = HanaParser.For_each_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_for_each_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(HanaParser.FOR)
            self.state = 1463
            self.match(HanaParser.EACH)
            self.state = 1464
            self.match(HanaParser.ROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_attribute_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(HanaParser.ATTRIBUTE, 0)

        def ADD(self):
            return self.getToken(HanaParser.ADD, 0)

        def MODIFY(self):
            return self.getToken(HanaParser.MODIFY, 0)

        def DROP(self):
            return self.getToken(HanaParser.DROP, 0)

        def attribute_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Attribute_definitionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Attribute_definitionContext,i)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_alter_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_attribute_definition" ):
                listener.enterAlter_attribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_attribute_definition" ):
                listener.exitAlter_attribute_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_attribute_definition" ):
                return visitor.visitAlter_attribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def alter_attribute_definition(self):

        localctx = HanaParser.Alter_attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_alter_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            _la = self._input.LA(1)
            if not(_la==9 or _la==120 or _la==234):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1467
            self.match(HanaParser.ATTRIBUTE)
            self.state = 1480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.state = 1468
                self.attribute_definition()
                pass
            elif token in [529]:
                self.state = 1469
                self.match(HanaParser.LEFT_PAREN)
                self.state = 1470
                self.attribute_definition()
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 1471
                    self.match(HanaParser.COMMA)
                    self.state = 1472
                    self.attribute_definition()
                    self.state = 1477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1478
                self.match(HanaParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(HanaParser.Attribute_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_attribute_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_definition" ):
                listener.enterAttribute_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_definition" ):
                listener.exitAttribute_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_definition" ):
                return visitor.visitAttribute_definition(self)
            else:
                return visitor.visitChildren(self)




    def attribute_definition(self):

        localctx = HanaParser.Attribute_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_attribute_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.attribute_name()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888499178594560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326836143653249) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325438160929) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 1483
                self.type_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_collection_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(HanaParser.MODIFY, 0)

        def LIMIT(self):
            return self.getToken(HanaParser.LIMIT, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def ELEMENT(self):
            return self.getToken(HanaParser.ELEMENT, 0)

        def TYPE(self):
            return self.getToken(HanaParser.TYPE, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_alter_collection_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_collection_clauses" ):
                listener.enterAlter_collection_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_collection_clauses" ):
                listener.exitAlter_collection_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_collection_clauses" ):
                return visitor.visitAlter_collection_clauses(self)
            else:
                return visitor.visitChildren(self)




    def alter_collection_clauses(self):

        localctx = HanaParser.Alter_collection_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_alter_collection_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.match(HanaParser.MODIFY)
            self.state = 1492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [212]:
                self.state = 1487
                self.match(HanaParser.LIMIT)
                self.state = 1488
                self.expression()
                pass
            elif token in [123]:
                self.state = 1489
                self.match(HanaParser.ELEMENT)
                self.state = 1490
                self.match(HanaParser.TYPE)
                self.state = 1491
                self.type_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dependent_handling_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALIDATE(self):
            return self.getToken(HanaParser.INVALIDATE, 0)

        def CASCADE(self):
            return self.getToken(HanaParser.CASCADE, 0)

        def CONVERT(self):
            return self.getToken(HanaParser.CONVERT, 0)

        def TO(self):
            return self.getToken(HanaParser.TO, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(HanaParser.SUBSTITUTABLE, 0)

        def INCLUDING(self):
            return self.getToken(HanaParser.INCLUDING, 0)

        def TABLE(self):
            return self.getToken(HanaParser.TABLE, 0)

        def DATA(self):
            return self.getToken(HanaParser.DATA, 0)

        def dependent_exceptions_part(self):
            return self.getTypedRuleContext(HanaParser.Dependent_exceptions_partContext,0)


        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_dependent_handling_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_handling_clause" ):
                listener.enterDependent_handling_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_handling_clause" ):
                listener.exitDependent_handling_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_handling_clause" ):
                return visitor.visitDependent_handling_clause(self)
            else:
                return visitor.visitChildren(self)




    def dependent_handling_clause(self):

        localctx = HanaParser.Dependent_handling_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dependent_handling_clause)
        self._la = 0 # Token type
        try:
            self.state = 1510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1494
                self.match(HanaParser.INVALIDATE)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1495
                self.match(HanaParser.CASCADE)
                self.state = 1505
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [80]:
                    self.state = 1496
                    self.match(HanaParser.CONVERT)
                    self.state = 1497
                    self.match(HanaParser.TO)
                    self.state = 1498
                    self.match(HanaParser.SUBSTITUTABLE)
                    pass
                elif token in [174, 258]:
                    self.state = 1500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258:
                        self.state = 1499
                        self.match(HanaParser.NOT)


                    self.state = 1502
                    self.match(HanaParser.INCLUDING)
                    self.state = 1503
                    self.match(HanaParser.TABLE)
                    self.state = 1504
                    self.match(HanaParser.DATA)
                    pass
                elif token in [-1, 136, 156]:
                    pass
                else:
                    pass
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136 or _la==156:
                    self.state = 1507
                    self.dependent_exceptions_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dependent_exceptions_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTIONS(self):
            return self.getToken(HanaParser.EXCEPTIONS, 0)

        def INTO(self):
            return self.getToken(HanaParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def FORCE(self):
            return self.getToken(HanaParser.FORCE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_dependent_exceptions_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependent_exceptions_part" ):
                listener.enterDependent_exceptions_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependent_exceptions_part" ):
                listener.exitDependent_exceptions_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDependent_exceptions_part" ):
                return visitor.visitDependent_exceptions_part(self)
            else:
                return visitor.visitChildren(self)




    def dependent_exceptions_part(self):

        localctx = HanaParser.Dependent_exceptions_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dependent_exceptions_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1512
                self.match(HanaParser.FORCE)


            self.state = 1515
            self.match(HanaParser.EXCEPTIONS)
            self.state = 1516
            self.match(HanaParser.INTO)
            self.state = 1517
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(HanaParser.Type_nameContext,0)


        def OID(self):
            return self.getToken(HanaParser.OID, 0)

        def CHAR_STRING(self):
            return self.getToken(HanaParser.CHAR_STRING, 0)

        def object_type_def(self):
            return self.getTypedRuleContext(HanaParser.Object_type_defContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = HanaParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.type_name()
            self.state = 1522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 1520
                self.match(HanaParser.OID)
                self.state = 1521
                self.match(HanaParser.CHAR_STRING)


            self.state = 1525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==26 or _la==195 or _la==414:
                self.state = 1524
                self.object_type_def()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_as_part(self):
            return self.getTypedRuleContext(HanaParser.Object_as_partContext,0)


        def object_under_part(self):
            return self.getTypedRuleContext(HanaParser.Object_under_partContext,0)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(HanaParser.Invoker_rights_clauseContext,0)


        def sqlj_object_type(self):
            return self.getTypedRuleContext(HanaParser.Sqlj_object_typeContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Object_member_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def modifier_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Modifier_clauseContext)
            else:
                return self.getTypedRuleContext(HanaParser.Modifier_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_object_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_def" ):
                listener.enterObject_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_def" ):
                listener.exitObject_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_type_def" ):
                return visitor.visitObject_type_def(self)
            else:
                return visitor.visitChildren(self)




    def object_type_def(self):

        localctx = HanaParser.Object_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_object_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1527
                self.invoker_rights_clause()


            self.state = 1532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 195]:
                self.state = 1530
                self.object_as_part()
                pass
            elif token in [414]:
                self.state = 1531
                self.object_under_part()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 1534
                self.sqlj_object_type()


            self.state = 1548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 1537
                self.match(HanaParser.LEFT_PAREN)
                self.state = 1538
                self.object_member_spec()
                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 1539
                    self.match(HanaParser.COMMA)
                    self.state = 1540
                    self.object_member_spec()
                    self.state = 1545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1546
                self.match(HanaParser.RIGHT_PAREN)


            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==148 or _la==186 or _la==258 or _la==282:
                self.state = 1550
                self.modifier_clause()
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_as_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def OBJECT(self):
            return self.getToken(HanaParser.OBJECT, 0)

        def varray_type_def(self):
            return self.getTypedRuleContext(HanaParser.Varray_type_defContext,0)


        def nested_table_type_def(self):
            return self.getTypedRuleContext(HanaParser.Nested_table_type_defContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_object_as_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_as_part" ):
                listener.enterObject_as_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_as_part" ):
                listener.exitObject_as_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_as_part" ):
                return visitor.visitObject_as_part(self)
            else:
                return visitor.visitChildren(self)




    def object_as_part(self):

        localctx = HanaParser.Object_as_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_object_as_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            _la = self._input.LA(1)
            if not(_la==20 or _la==195):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [265]:
                self.state = 1557
                self.match(HanaParser.OBJECT)
                pass
            elif token in [432, 433]:
                self.state = 1558
                self.varray_type_def()
                pass
            elif token in [390]:
                self.state = 1559
                self.nested_table_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_under_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(HanaParser.UNDER, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_object_under_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_under_part" ):
                listener.enterObject_under_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_under_part" ):
                listener.exitObject_under_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_under_part" ):
                return visitor.visitObject_under_part(self)
            else:
                return visitor.visitChildren(self)




    def object_under_part(self):

        localctx = HanaParser.Object_under_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_object_under_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.match(HanaParser.UNDER)
            self.state = 1563
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nested_table_type_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(HanaParser.TABLE, 0)

        def OF(self):
            return self.getToken(HanaParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_nested_table_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_table_type_def" ):
                listener.enterNested_table_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_table_type_def" ):
                listener.exitNested_table_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNested_table_type_def" ):
                return visitor.visitNested_table_type_def(self)
            else:
                return visitor.visitChildren(self)




    def nested_table_type_def(self):

        localctx = HanaParser.Nested_table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_nested_table_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self.match(HanaParser.TABLE)
            self.state = 1566
            self.match(HanaParser.OF)
            self.state = 1567
            self.type_spec()
            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1568
                self.match(HanaParser.NOT)
                self.state = 1569
                self.match(HanaParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sqlj_object_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(HanaParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(HanaParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def LANGUAGE(self):
            return self.getToken(HanaParser.LANGUAGE, 0)

        def JAVA(self):
            return self.getToken(HanaParser.JAVA, 0)

        def USING(self):
            return self.getToken(HanaParser.USING, 0)

        def SQLDATA(self):
            return self.getToken(HanaParser.SQLDATA, 0)

        def CUSTOMDATUM(self):
            return self.getToken(HanaParser.CUSTOMDATUM, 0)

        def ORADATA(self):
            return self.getToken(HanaParser.ORADATA, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_sqlj_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type" ):
                listener.enterSqlj_object_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type" ):
                listener.exitSqlj_object_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type" ):
                return visitor.visitSqlj_object_type(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type(self):

        localctx = HanaParser.Sqlj_object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_sqlj_object_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(HanaParser.EXTERNAL)
            self.state = 1573
            self.match(HanaParser.NAME)
            self.state = 1574
            self.expression()
            self.state = 1575
            self.match(HanaParser.LANGUAGE)
            self.state = 1576
            self.match(HanaParser.JAVA)
            self.state = 1577
            self.match(HanaParser.USING)
            self.state = 1578
            _la = self._input.LA(1)
            if not(_la==91 or _la==275 or _la==372):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(HanaParser.BODY, 0)

        def type_name(self):
            return self.getTypedRuleContext(HanaParser.Type_nameContext,0)


        def type_body_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_body_elementsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_body_elementsContext,i)


        def END(self):
            return self.getToken(HanaParser.END, 0)

        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_type_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body" ):
                listener.enterType_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body" ):
                listener.exitType_body(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body" ):
                return visitor.visitType_body(self)
            else:
                return visitor.visitChildren(self)




    def type_body(self):

        localctx = HanaParser.Type_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_type_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self.match(HanaParser.BODY)
            self.state = 1581
            self.type_name()
            self.state = 1582
            _la = self._input.LA(1)
            if not(_la==20 or _la==195):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1583
            self.type_body_elements()
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1584
                self.match(HanaParser.COMMA)
                self.state = 1585
                self.type_body_elements()
                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1591
            self.match(HanaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_body_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_order_func_declaration(self):
            return self.getTypedRuleContext(HanaParser.Map_order_func_declarationContext,0)


        def subprog_decl_in_type(self):
            return self.getTypedRuleContext(HanaParser.Subprog_decl_in_typeContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_type_body_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body_elements" ):
                listener.enterType_body_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body_elements" ):
                listener.exitType_body_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_body_elements" ):
                return visitor.visitType_body_elements(self)
            else:
                return visitor.visitChildren(self)




    def type_body_elements(self):

        localctx = HanaParser.Type_body_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_type_body_elements)
        try:
            self.state = 1595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [222, 276]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1593
                self.map_order_func_declaration()
                pass
            elif token in [226, 381]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1594
                self.subprog_decl_in_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_order_func_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(HanaParser.MEMBER, 0)

        def func_decl_in_type(self):
            return self.getTypedRuleContext(HanaParser.Func_decl_in_typeContext,0)


        def MAP(self):
            return self.getToken(HanaParser.MAP, 0)

        def ORDER(self):
            return self.getToken(HanaParser.ORDER, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_map_order_func_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_func_declaration" ):
                listener.enterMap_order_func_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_func_declaration" ):
                listener.exitMap_order_func_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_func_declaration" ):
                return visitor.visitMap_order_func_declaration(self)
            else:
                return visitor.visitChildren(self)




    def map_order_func_declaration(self):

        localctx = HanaParser.Map_order_func_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_map_order_func_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            _la = self._input.LA(1)
            if not(_la==222 or _la==276):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1598
            self.match(HanaParser.MEMBER)
            self.state = 1599
            self.func_decl_in_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subprog_decl_in_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(HanaParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(HanaParser.STATIC, 0)

        def proc_decl_in_type(self):
            return self.getTypedRuleContext(HanaParser.Proc_decl_in_typeContext,0)


        def func_decl_in_type(self):
            return self.getTypedRuleContext(HanaParser.Func_decl_in_typeContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(HanaParser.Constructor_declarationContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_subprog_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprog_decl_in_type" ):
                listener.enterSubprog_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprog_decl_in_type" ):
                listener.exitSubprog_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprog_decl_in_type" ):
                return visitor.visitSubprog_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def subprog_decl_in_type(self):

        localctx = HanaParser.Subprog_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_subprog_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            _la = self._input.LA(1)
            if not(_la==226 or _la==381):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [303]:
                self.state = 1602
                self.proc_decl_in_type()
                pass
            elif token in [159]:
                self.state = 1603
                self.func_decl_in_type()
                pass
            elif token in [76, 148, 186]:
                self.state = 1604
                self.constructor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_decl_in_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(HanaParser.PROCEDURE, 0)

        def proc_name(self):
            return self.getTypedRuleContext(HanaParser.Proc_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(HanaParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(HanaParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Declare_specContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl_in_type" ):
                listener.enterProc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl_in_type" ):
                listener.exitProc_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_decl_in_type" ):
                return visitor.visitProc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def proc_decl_in_type(self):

        localctx = HanaParser.Proc_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_proc_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.match(HanaParser.PROCEDURE)
            self.state = 1608
            self.proc_name()
            self.state = 1609
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1610
            self.type_elements_parameter()
            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1611
                self.match(HanaParser.COMMA)
                self.state = 1612
                self.type_elements_parameter()
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1618
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 1619
            _la = self._input.LA(1)
            if not(_la==20 or _la==195):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1620
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 1621
                    self.match(HanaParser.DECLARE)


                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838289039745) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135736201247) != 0):
                    self.state = 1624
                    self.declare_spec()
                    self.state = 1629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1630
                self.body()
                self.state = 1631
                self.match(HanaParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_decl_in_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(HanaParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(HanaParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(HanaParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(HanaParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Declare_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_func_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl_in_type" ):
                listener.enterFunc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl_in_type" ):
                listener.exitFunc_decl_in_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl_in_type" ):
                return visitor.visitFunc_decl_in_type(self)
            else:
                return visitor.visitChildren(self)




    def func_decl_in_type(self):

        localctx = HanaParser.Func_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_func_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(HanaParser.FUNCTION)
            self.state = 1636
            self.function_name()
            self.state = 1648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 1637
                self.match(HanaParser.LEFT_PAREN)
                self.state = 1638
                self.type_elements_parameter()
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 1639
                    self.match(HanaParser.COMMA)
                    self.state = 1640
                    self.type_elements_parameter()
                    self.state = 1645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1646
                self.match(HanaParser.RIGHT_PAREN)


            self.state = 1650
            self.match(HanaParser.RETURN)
            self.state = 1651
            self.type_spec()
            self.state = 1652
            _la = self._input.LA(1)
            if not(_la==20 or _la==195):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1653
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 1654
                    self.match(HanaParser.DECLARE)


                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838289039745) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135736201247) != 0):
                    self.state = 1657
                    self.declare_spec()
                    self.state = 1662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1663
                self.body()
                self.state = 1664
                self.match(HanaParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(HanaParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(HanaParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SELF)
            else:
                return self.getToken(HanaParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.AS)
            else:
                return self.getToken(HanaParser.AS, i)

        def RESULT(self):
            return self.getToken(HanaParser.RESULT, 0)

        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(HanaParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(HanaParser.BodyContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def FINAL(self):
            return self.getToken(HanaParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(HanaParser.INSTANTIABLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def OUT(self):
            return self.getToken(HanaParser.OUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Declare_specContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_declaration" ):
                return visitor.visitConstructor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constructor_declaration(self):

        localctx = HanaParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1668
                self.match(HanaParser.FINAL)


            self.state = 1672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==186:
                self.state = 1671
                self.match(HanaParser.INSTANTIABLE)


            self.state = 1674
            self.match(HanaParser.CONSTRUCTOR)
            self.state = 1675
            self.match(HanaParser.FUNCTION)
            self.state = 1676
            self.type_spec()
            self.state = 1694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 1677
                self.match(HanaParser.LEFT_PAREN)

                self.state = 1678
                self.match(HanaParser.SELF)
                self.state = 1679
                self.match(HanaParser.IN)
                self.state = 1680
                self.match(HanaParser.OUT)
                self.state = 1681
                self.type_spec()
                self.state = 1682
                self.match(HanaParser.COMMA)
                self.state = 1684
                self.type_elements_parameter()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 1685
                    self.match(HanaParser.COMMA)
                    self.state = 1686
                    self.type_elements_parameter()
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1692
                self.match(HanaParser.RIGHT_PAREN)


            self.state = 1696
            self.match(HanaParser.RETURN)
            self.state = 1697
            self.match(HanaParser.SELF)
            self.state = 1698
            self.match(HanaParser.AS)
            self.state = 1699
            self.match(HanaParser.RESULT)
            self.state = 1700
            _la = self._input.LA(1)
            if not(_la==20 or _la==195):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1701
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 1702
                    self.match(HanaParser.DECLARE)


                self.state = 1708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838289039745) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135736201247) != 0):
                    self.state = 1705
                    self.declare_spec()
                    self.state = 1710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1711
                self.body()
                self.state = 1712
                self.match(HanaParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modifier_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTANTIABLE(self):
            return self.getToken(HanaParser.INSTANTIABLE, 0)

        def FINAL(self):
            return self.getToken(HanaParser.FINAL, 0)

        def OVERRIDING(self):
            return self.getToken(HanaParser.OVERRIDING, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_modifier_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_clause" ):
                listener.enterModifier_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_clause" ):
                listener.exitModifier_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_clause" ):
                return visitor.visitModifier_clause(self)
            else:
                return visitor.visitChildren(self)




    def modifier_clause(self):

        localctx = HanaParser.Modifier_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_modifier_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 1716
                self.match(HanaParser.NOT)


            self.state = 1719
            _la = self._input.LA(1)
            if not(_la==148 or _la==186 or _la==282):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_member_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def sqlj_object_type_attr(self):
            return self.getTypedRuleContext(HanaParser.Sqlj_object_type_attrContext,0)


        def element_spec(self):
            return self.getTypedRuleContext(HanaParser.Element_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_object_member_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_member_spec" ):
                listener.enterObject_member_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_member_spec" ):
                listener.exitObject_member_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_member_spec" ):
                return visitor.visitObject_member_spec(self)
            else:
                return visitor.visitChildren(self)




    def object_member_spec(self):

        localctx = HanaParser.Object_member_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_object_member_spec)
        self._la = 0 # Token type
        try:
            self.state = 1727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1721
                self.id_()
                self.state = 1722
                self.type_spec()
                self.state = 1724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 1723
                    self.sqlj_object_type_attr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1726
                self.element_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sqlj_object_type_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(HanaParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(HanaParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_sqlj_object_type_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type_attr" ):
                listener.enterSqlj_object_type_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type_attr" ):
                listener.exitSqlj_object_type_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlj_object_type_attr" ):
                return visitor.visitSqlj_object_type_attr(self)
            else:
                return visitor.visitChildren(self)




    def sqlj_object_type_attr(self):

        localctx = HanaParser.Sqlj_object_type_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_sqlj_object_type_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self.match(HanaParser.EXTERNAL)
            self.state = 1730
            self.match(HanaParser.NAME)
            self.state = 1731
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_clause(self):
            return self.getTypedRuleContext(HanaParser.Modifier_clauseContext,0)


        def element_spec_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Element_spec_optionsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Element_spec_optionsContext,i)


        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def pragma_clause(self):
            return self.getTypedRuleContext(HanaParser.Pragma_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec" ):
                listener.enterElement_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec" ):
                listener.exitElement_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec" ):
                return visitor.visitElement_spec(self)
            else:
                return visitor.visitChildren(self)




    def element_spec(self):

        localctx = HanaParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1733
                self.modifier_clause()


            self.state = 1737 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1736
                self.element_spec_options()
                self.state = 1739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==76 or _la==148 or _la==186 or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & 18014398509482001) != 0) or _la==381):
                    break

            self.state = 1743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1741
                self.match(HanaParser.COMMA)
                self.state = 1742
                self.pragma_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_spec_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subprogram_spec(self):
            return self.getTypedRuleContext(HanaParser.Subprogram_specContext,0)


        def constructor_spec(self):
            return self.getTypedRuleContext(HanaParser.Constructor_specContext,0)


        def map_order_function_spec(self):
            return self.getTypedRuleContext(HanaParser.Map_order_function_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_element_spec_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec_options" ):
                listener.enterElement_spec_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec_options" ):
                listener.exitElement_spec_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_spec_options" ):
                return visitor.visitElement_spec_options(self)
            else:
                return visitor.visitChildren(self)




    def element_spec_options(self):

        localctx = HanaParser.Element_spec_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_element_spec_options)
        try:
            self.state = 1748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 381]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1745
                self.subprogram_spec()
                pass
            elif token in [76, 148, 186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1746
                self.constructor_spec()
                pass
            elif token in [222, 276]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1747
                self.map_order_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subprogram_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(HanaParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(HanaParser.STATIC, 0)

        def type_procedure_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_procedure_specContext,0)


        def type_function_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_function_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_subprogram_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprogram_spec" ):
                listener.enterSubprogram_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprogram_spec" ):
                listener.exitSubprogram_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubprogram_spec" ):
                return visitor.visitSubprogram_spec(self)
            else:
                return visitor.visitChildren(self)




    def subprogram_spec(self):

        localctx = HanaParser.Subprogram_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_subprogram_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            _la = self._input.LA(1)
            if not(_la==226 or _la==381):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [303]:
                self.state = 1751
                self.type_procedure_spec()
                pass
            elif token in [159]:
                self.state = 1752
                self.type_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_procedure_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(HanaParser.PROCEDURE, 0)

        def proc_name(self):
            return self.getTypedRuleContext(HanaParser.Proc_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def call_spec(self):
            return self.getTypedRuleContext(HanaParser.Call_specContext,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_type_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_procedure_spec" ):
                listener.enterType_procedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_procedure_spec" ):
                listener.exitType_procedure_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_procedure_spec" ):
                return visitor.visitType_procedure_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_procedure_spec(self):

        localctx = HanaParser.Type_procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_type_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.match(HanaParser.PROCEDURE)
            self.state = 1756
            self.proc_name()
            self.state = 1757
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1758
            self.type_elements_parameter()
            self.state = 1763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1759
                self.match(HanaParser.COMMA)
                self.state = 1760
                self.type_elements_parameter()
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1766
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==195:
                self.state = 1767
                _la = self._input.LA(1)
                if not(_la==20 or _la==195):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1768
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_function_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(HanaParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(HanaParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def SELF(self):
            return self.getToken(HanaParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.AS)
            else:
                return self.getToken(HanaParser.AS, i)

        def RESULT(self):
            return self.getToken(HanaParser.RESULT, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def call_spec(self):
            return self.getTypedRuleContext(HanaParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(HanaParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(HanaParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def VARIABLE(self):
            return self.getToken(HanaParser.VARIABLE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_type_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_function_spec" ):
                listener.enterType_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_function_spec" ):
                listener.exitType_function_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_function_spec" ):
                return visitor.visitType_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_function_spec(self):

        localctx = HanaParser.Type_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_type_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.match(HanaParser.FUNCTION)
            self.state = 1772
            self.function_name()
            self.state = 1784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 1773
                self.match(HanaParser.LEFT_PAREN)
                self.state = 1774
                self.type_elements_parameter()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 1775
                    self.match(HanaParser.COMMA)
                    self.state = 1776
                    self.type_elements_parameter()
                    self.state = 1781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1782
                self.match(HanaParser.RIGHT_PAREN)


            self.state = 1786
            self.match(HanaParser.RETURN)
            self.state = 1791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1787
                self.type_spec()
                pass

            elif la_ == 2:
                self.state = 1788
                self.match(HanaParser.SELF)
                self.state = 1789
                self.match(HanaParser.AS)
                self.state = 1790
                self.match(HanaParser.RESULT)
                pass


            self.state = 1801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 195]:
                self.state = 1793
                _la = self._input.LA(1)
                if not(_la==20 or _la==195):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1794
                self.call_spec()
                pass
            elif token in [143]:
                self.state = 1795
                self.match(HanaParser.EXTERNAL)
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==431:
                    self.state = 1796
                    self.match(HanaParser.VARIABLE)


                self.state = 1799
                self.match(HanaParser.NAME)
                self.state = 1800
                self.expression()
                pass
            elif token in [76, 148, 186, 222, 226, 276, 381, 530, 535]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructor_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(HanaParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(HanaParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SELF)
            else:
                return self.getToken(HanaParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.AS)
            else:
                return self.getToken(HanaParser.AS, i)

        def RESULT(self):
            return self.getToken(HanaParser.RESULT, 0)

        def FINAL(self):
            return self.getToken(HanaParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(HanaParser.INSTANTIABLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_elements_parameterContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def call_spec(self):
            return self.getTypedRuleContext(HanaParser.Call_specContext,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def OUT(self):
            return self.getToken(HanaParser.OUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_constructor_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_spec" ):
                listener.enterConstructor_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_spec" ):
                listener.exitConstructor_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor_spec" ):
                return visitor.visitConstructor_spec(self)
            else:
                return visitor.visitChildren(self)




    def constructor_spec(self):

        localctx = HanaParser.Constructor_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_constructor_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1803
                self.match(HanaParser.FINAL)


            self.state = 1807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==186:
                self.state = 1806
                self.match(HanaParser.INSTANTIABLE)


            self.state = 1809
            self.match(HanaParser.CONSTRUCTOR)
            self.state = 1810
            self.match(HanaParser.FUNCTION)
            self.state = 1811
            self.type_spec()
            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 1812
                self.match(HanaParser.LEFT_PAREN)

                self.state = 1813
                self.match(HanaParser.SELF)
                self.state = 1814
                self.match(HanaParser.IN)
                self.state = 1815
                self.match(HanaParser.OUT)
                self.state = 1816
                self.type_spec()
                self.state = 1817
                self.match(HanaParser.COMMA)
                self.state = 1819
                self.type_elements_parameter()
                self.state = 1824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 1820
                    self.match(HanaParser.COMMA)
                    self.state = 1821
                    self.type_elements_parameter()
                    self.state = 1826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1827
                self.match(HanaParser.RIGHT_PAREN)


            self.state = 1831
            self.match(HanaParser.RETURN)
            self.state = 1832
            self.match(HanaParser.SELF)
            self.state = 1833
            self.match(HanaParser.AS)
            self.state = 1834
            self.match(HanaParser.RESULT)
            self.state = 1837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==195:
                self.state = 1835
                _la = self._input.LA(1)
                if not(_la==20 or _la==195):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1836
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_order_function_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(HanaParser.MEMBER, 0)

        def type_function_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_function_specContext,0)


        def MAP(self):
            return self.getToken(HanaParser.MAP, 0)

        def ORDER(self):
            return self.getToken(HanaParser.ORDER, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_map_order_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_function_spec" ):
                listener.enterMap_order_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_function_spec" ):
                listener.exitMap_order_function_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap_order_function_spec" ):
                return visitor.visitMap_order_function_spec(self)
            else:
                return visitor.visitChildren(self)




    def map_order_function_spec(self):

        localctx = HanaParser.Map_order_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_map_order_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            _la = self._input.LA(1)
            if not(_la==222 or _la==276):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1840
            self.match(HanaParser.MEMBER)
            self.state = 1841
            self.type_function_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(HanaParser.PRAGMA, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(HanaParser.RESTRICT_REFERENCES, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def pragma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Pragma_elementsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Pragma_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_pragma_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_clause" ):
                listener.enterPragma_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_clause" ):
                listener.exitPragma_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_clause" ):
                return visitor.visitPragma_clause(self)
            else:
                return visitor.visitChildren(self)




    def pragma_clause(self):

        localctx = HanaParser.Pragma_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_pragma_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.match(HanaParser.PRAGMA)
            self.state = 1844
            self.match(HanaParser.RESTRICT_REFERENCES)
            self.state = 1845
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1846
            self.pragma_elements()
            self.state = 1851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1847
                self.match(HanaParser.COMMA)
                self.state = 1848
                self.pragma_elements()
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1854
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def DEFAULT(self):
            return self.getToken(HanaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_pragma_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_elements" ):
                listener.enterPragma_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_elements" ):
                listener.exitPragma_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_elements" ):
                return visitor.visitPragma_elements(self)
            else:
                return visitor.visitChildren(self)




    def pragma_elements(self):

        localctx = HanaParser.Pragma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pragma_elements)
        try:
            self.state = 1858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1856
                self.id_()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1857
                self.match(HanaParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_elements_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(HanaParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_type_elements_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_elements_parameter" ):
                listener.enterType_elements_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_elements_parameter" ):
                listener.exitType_elements_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_elements_parameter" ):
                return visitor.visitType_elements_parameter(self)
            else:
                return visitor.visitChildren(self)




    def type_elements_parameter(self):

        localctx = HanaParser.Type_elements_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_type_elements_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self.parameter_name()
            self.state = 1861
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(HanaParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(HanaParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(HanaParser.Sequence_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def sequence_start_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Sequence_start_clauseContext)
            else:
                return self.getTypedRuleContext(HanaParser.Sequence_start_clauseContext,i)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_sequence" ):
                return visitor.visitCreate_sequence(self)
            else:
                return visitor.visitChildren(self)




    def create_sequence(self):

        localctx = HanaParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self.match(HanaParser.CREATE)
            self.state = 1864
            self.match(HanaParser.SEQUENCE)
            self.state = 1865
            self.sequence_name()
            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49 or _la==92 or ((((_la - 175)) & ~0x3f) == 0 and ((1 << (_la - 175)) & 36591746972385281) != 0) or ((((_la - 249)) & ~0x3f) == 0 and ((1 << (_la - 249)) & 134217909) != 0) or _la==377:
                self.state = 1868
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [377]:
                    self.state = 1866
                    self.sequence_start_clause()
                    pass
                elif token in [49, 92, 175, 224, 230, 249, 251, 253, 254, 256, 276]:
                    self.state = 1867
                    self.sequence_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1873
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(HanaParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(HanaParser.UNSIGNED_INTEGER, 0)

        def MAXVALUE(self):
            return self.getToken(HanaParser.MAXVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(HanaParser.NOMAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(HanaParser.MINVALUE, 0)

        def NOMINVALUE(self):
            return self.getToken(HanaParser.NOMINVALUE, 0)

        def CYCLE(self):
            return self.getToken(HanaParser.CYCLE, 0)

        def NOCYCLE(self):
            return self.getToken(HanaParser.NOCYCLE, 0)

        def CACHE(self):
            return self.getToken(HanaParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(HanaParser.NOCACHE, 0)

        def ORDER(self):
            return self.getToken(HanaParser.ORDER, 0)

        def NOORDER(self):
            return self.getToken(HanaParser.NOORDER, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_sequence_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_spec" ):
                listener.enterSequence_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_spec" ):
                listener.exitSequence_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_spec" ):
                return visitor.visitSequence_spec(self)
            else:
                return visitor.visitChildren(self)




    def sequence_spec(self):

        localctx = HanaParser.Sequence_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sequence_spec)
        try:
            self.state = 1891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [175]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1875
                self.match(HanaParser.INCREMENT)
                self.state = 1876
                self.match(HanaParser.BY)
                self.state = 1877
                self.match(HanaParser.UNSIGNED_INTEGER)
                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1878
                self.match(HanaParser.MAXVALUE)
                self.state = 1879
                self.match(HanaParser.UNSIGNED_INTEGER)
                pass
            elif token in [253]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1880
                self.match(HanaParser.NOMAXVALUE)
                pass
            elif token in [230]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1881
                self.match(HanaParser.MINVALUE)
                self.state = 1882
                self.match(HanaParser.UNSIGNED_INTEGER)
                pass
            elif token in [254]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1883
                self.match(HanaParser.NOMINVALUE)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1884
                self.match(HanaParser.CYCLE)
                pass
            elif token in [251]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1885
                self.match(HanaParser.NOCYCLE)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1886
                self.match(HanaParser.CACHE)
                self.state = 1887
                self.match(HanaParser.UNSIGNED_INTEGER)
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1888
                self.match(HanaParser.NOCACHE)
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1889
                self.match(HanaParser.ORDER)
                pass
            elif token in [256]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1890
                self.match(HanaParser.NOORDER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_start_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(HanaParser.START, 0)

        def WITH(self):
            return self.getToken(HanaParser.WITH, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(HanaParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_sequence_start_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_start_clause" ):
                listener.enterSequence_start_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_start_clause" ):
                listener.exitSequence_start_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_start_clause" ):
                return visitor.visitSequence_start_clause(self)
            else:
                return visitor.visitChildren(self)




    def sequence_start_clause(self):

        localctx = HanaParser.Sequence_start_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_sequence_start_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893
            self.match(HanaParser.START)
            self.state = 1894
            self.match(HanaParser.WITH)
            self.state = 1895
            self.match(HanaParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invoker_rights_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHID(self):
            return self.getToken(HanaParser.AUTHID, 0)

        def CURRENT_USER(self):
            return self.getToken(HanaParser.CURRENT_USER, 0)

        def DEFINER(self):
            return self.getToken(HanaParser.DEFINER, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_invoker_rights_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoker_rights_clause" ):
                listener.enterInvoker_rights_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoker_rights_clause" ):
                listener.exitInvoker_rights_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvoker_rights_clause" ):
                return visitor.visitInvoker_rights_clause(self)
            else:
                return visitor.visitChildren(self)




    def invoker_rights_clause(self):

        localctx = HanaParser.Invoker_rights_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_invoker_rights_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.match(HanaParser.AUTHID)
            self.state = 1898
            _la = self._input.LA(1)
            if not(_la==89 or _la==109):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compiler_parameters_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_compiler_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_parameters_clause" ):
                listener.enterCompiler_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_parameters_clause" ):
                listener.exitCompiler_parameters_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompiler_parameters_clause" ):
                return visitor.visitCompiler_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def compiler_parameters_clause(self):

        localctx = HanaParser.Compiler_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_compiler_parameters_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.id_()
            self.state = 1901
            self.match(HanaParser.EQUALS_OP)
            self.state = 1902
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(HanaParser.LANGUAGE, 0)

        def java_spec(self):
            return self.getTypedRuleContext(HanaParser.Java_specContext,0)


        def c_spec(self):
            return self.getTypedRuleContext(HanaParser.C_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_call_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_spec" ):
                listener.enterCall_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_spec" ):
                listener.exitCall_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_spec" ):
                return visitor.visitCall_spec(self)
            else:
                return visitor.visitChildren(self)




    def call_spec(self):

        localctx = HanaParser.Call_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_call_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.match(HanaParser.LANGUAGE)
            self.state = 1907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [198]:
                self.state = 1905
                self.java_spec()
                pass
            elif token in [48]:
                self.state = 1906
                self.c_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Java_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(HanaParser.JAVA, 0)

        def NAME(self):
            return self.getToken(HanaParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(HanaParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_java_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_spec" ):
                listener.enterJava_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_spec" ):
                listener.exitJava_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJava_spec" ):
                return visitor.visitJava_spec(self)
            else:
                return visitor.visitChildren(self)




    def java_spec(self):

        localctx = HanaParser.Java_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_java_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.match(HanaParser.JAVA)
            self.state = 1910
            self.match(HanaParser.NAME)
            self.state = 1911
            self.match(HanaParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C_LETTER(self):
            return self.getToken(HanaParser.C_LETTER, 0)

        def LIBRARY(self):
            return self.getToken(HanaParser.LIBRARY, 0)

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def NAME(self):
            return self.getToken(HanaParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(HanaParser.CHAR_STRING, 0)

        def c_agent_in_clause(self):
            return self.getTypedRuleContext(HanaParser.C_agent_in_clauseContext,0)


        def WITH(self):
            return self.getToken(HanaParser.WITH, 0)

        def CONTEXT(self):
            return self.getToken(HanaParser.CONTEXT, 0)

        def c_parameters_clause(self):
            return self.getTypedRuleContext(HanaParser.C_parameters_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_c_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_spec" ):
                listener.enterC_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_spec" ):
                listener.exitC_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_spec" ):
                return visitor.visitC_spec(self)
            else:
                return visitor.visitChildren(self)




    def c_spec(self):

        localctx = HanaParser.C_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_c_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.match(HanaParser.C_LETTER)
            self.state = 1916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==237:
                self.state = 1914
                self.match(HanaParser.NAME)
                self.state = 1915
                self.match(HanaParser.CHAR_STRING)


            self.state = 1918
            self.match(HanaParser.LIBRARY)
            self.state = 1919
            self.id_()
            self.state = 1921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 1920
                self.c_agent_in_clause()


            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 1923
                self.match(HanaParser.WITH)
                self.state = 1924
                self.match(HanaParser.CONTEXT)


            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==285:
                self.state = 1927
                self.c_parameters_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_agent_in_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGENT(self):
            return self.getToken(HanaParser.AGENT, 0)

        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_c_agent_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_agent_in_clause" ):
                listener.enterC_agent_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_agent_in_clause" ):
                listener.exitC_agent_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_agent_in_clause" ):
                return visitor.visitC_agent_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_agent_in_clause(self):

        localctx = HanaParser.C_agent_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_c_agent_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.match(HanaParser.AGENT)
            self.state = 1931
            self.match(HanaParser.IN)
            self.state = 1932
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1933
            self.expression()
            self.state = 1938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 1934
                self.match(HanaParser.COMMA)
                self.state = 1935
                self.expression()
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1941
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_parameters_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(HanaParser.PARAMETERS, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_c_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_parameters_clause" ):
                listener.enterC_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_parameters_clause" ):
                listener.exitC_parameters_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitC_parameters_clause" ):
                return visitor.visitC_parameters_clause(self)
            else:
                return visitor.visitChildren(self)




    def c_parameters_clause(self):

        localctx = HanaParser.C_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_c_parameters_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.match(HanaParser.PARAMETERS)
            self.state = 1944
            self.match(HanaParser.LEFT_PAREN)
            self.state = 1956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 529, 533, 534, 539, 540, 555, 560]:
                self.state = 1945
                self.expression()
                self.state = 1950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 1946
                    self.match(HanaParser.COMMA)
                    self.state = 1947
                    self.expression()
                    self.state = 1952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [522]:
                self.state = 1953
                self.match(HanaParser.PERIOD)
                self.state = 1954
                self.match(HanaParser.PERIOD)
                self.state = 1955
                self.match(HanaParser.PERIOD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1958
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def ASSIGN_OP(self):
            return self.getToken(HanaParser.ASSIGN_OP, 0)

        def DEFAULT(self):
            return self.getToken(HanaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_default_value_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_part" ):
                listener.enterDefault_value_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_part" ):
                listener.exitDefault_value_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value_part" ):
                return visitor.visitDefault_value_part(self)
            else:
                return visitor.visitChildren(self)




    def default_value_part(self):

        localctx = HanaParser.Default_value_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_default_value_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            _la = self._input.LA(1)
            if not(_la==106 or _la==538):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1961
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(HanaParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(HanaParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(HanaParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(HanaParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(HanaParser.Pragma_declarationContext,0)


        def record_declaration(self):
            return self.getTypedRuleContext(HanaParser.Record_declarationContext,0)


        def table_declaration(self):
            return self.getTypedRuleContext(HanaParser.Table_declarationContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(HanaParser.Create_procedure_bodyContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_declare_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_spec" ):
                listener.enterDeclare_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_spec" ):
                listener.exitDeclare_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_spec" ):
                return visitor.visitDeclare_spec(self)
            else:
                return visitor.visitChildren(self)




    def declare_spec(self):

        localctx = HanaParser.Declare_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_declare_spec)
        try:
            self.state = 1971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1963
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1964
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1965
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1966
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1967
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1968
                self.record_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1969
                self.table_declaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1970
                self.create_procedure_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(HanaParser.Variable_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def CONSTANT(self):
            return self.getToken(HanaParser.CONSTANT, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(HanaParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration" ):
                return visitor.visitVariable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration(self):

        localctx = HanaParser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self.variable_name()
            self.state = 1975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1974
                self.match(HanaParser.CONSTANT)


            self.state = 1977
            self.type_spec()
            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 1978
                self.match(HanaParser.NOT)
                self.state = 1979
                self.match(HanaParser.NULL)


            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==538:
                self.state = 1982
                self.default_value_part()


            self.state = 1985
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE(self):
            return self.getToken(HanaParser.SUBTYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(HanaParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def RANGE(self):
            return self.getToken(HanaParser.RANGE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_subtype_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_declaration" ):
                listener.enterSubtype_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_declaration" ):
                listener.exitSubtype_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtype_declaration" ):
                return visitor.visitSubtype_declaration(self)
            else:
                return visitor.visitChildren(self)




    def subtype_declaration(self):

        localctx = HanaParser.Subtype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_subtype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(HanaParser.SUBTYPE)
            self.state = 1988
            self.type_name()
            self.state = 1989
            self.match(HanaParser.IS)
            self.state = 1990
            self.type_spec()
            self.state = 1996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==305:
                self.state = 1991
                self.match(HanaParser.RANGE)
                self.state = 1992
                self.expression()
                self.state = 1993
                self.match(HanaParser.T__3)
                self.state = 1994
                self.expression()


            self.state = 2000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 1998
                self.match(HanaParser.NOT)
                self.state = 1999
                self.match(HanaParser.NULL)


            self.state = 2002
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(HanaParser.CURSOR, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(HanaParser.Cursor_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Parameter_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_cursor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_declaration" ):
                listener.enterCursor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_declaration" ):
                listener.exitCursor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_declaration" ):
                return visitor.visitCursor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def cursor_declaration(self):

        localctx = HanaParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.match(HanaParser.CURSOR)
            self.state = 2005
            self.cursor_name()
            self.state = 2017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 2006
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2007
                self.parameter_spec()
                self.state = 2012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2008
                    self.match(HanaParser.COMMA)
                    self.state = 2009
                    self.parameter_spec()
                    self.state = 2014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2015
                self.match(HanaParser.RIGHT_PAREN)


            self.state = 2021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322:
                self.state = 2019
                self.match(HanaParser.RETURN)
                self.state = 2020
                self.type_spec()


            self.state = 2025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 2023
                self.match(HanaParser.IS)
                self.state = 2024
                self.select_statement()


            self.state = 2027
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(HanaParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(HanaParser.Default_value_partContext,0)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_spec" ):
                listener.enterParameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_spec" ):
                listener.exitParameter_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_spec" ):
                return visitor.visitParameter_spec(self)
            else:
                return visitor.visitChildren(self)




    def parameter_spec(self):

        localctx = HanaParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self.parameter_name()
            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888499178594560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326836143653249) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756366798466323523) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325438160929) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 2030
                    self.match(HanaParser.IN)


                self.state = 2033
                self.type_spec()


            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==538:
                self.state = 2036
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exception_name(self):
            return self.getTypedRuleContext(HanaParser.Exception_nameContext,0)


        def EXCEPTION(self):
            return self.getToken(HanaParser.EXCEPTION, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_exception_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_declaration" ):
                listener.enterException_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_declaration" ):
                listener.exitException_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_declaration" ):
                return visitor.visitException_declaration(self)
            else:
                return visitor.visitChildren(self)




    def exception_declaration(self):

        localctx = HanaParser.Exception_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_exception_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.exception_name()
            self.state = 2040
            self.match(HanaParser.EXCEPTION)
            self.state = 2041
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.id1 = None # IdContext

        def PRAGMA(self):
            return self.getToken(HanaParser.PRAGMA, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(HanaParser.SERIALLY_REUSABLE, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(HanaParser.AUTONOMOUS_TRANSACTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(HanaParser.EXCEPTION_INIT, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def exception_name(self):
            return self.getTypedRuleContext(HanaParser.Exception_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def numeric_negative(self):
            return self.getTypedRuleContext(HanaParser.Numeric_negativeContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def INLINE(self):
            return self.getToken(HanaParser.INLINE, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def RESTRICT_REFERENCES(self):
            return self.getToken(HanaParser.RESTRICT_REFERENCES, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.IdContext)
            else:
                return self.getTypedRuleContext(HanaParser.IdContext,i)


        def DEFAULT(self):
            return self.getToken(HanaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_pragma_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_declaration" ):
                listener.enterPragma_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_declaration" ):
                listener.exitPragma_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_declaration" ):
                return visitor.visitPragma_declaration(self)
            else:
                return visitor.visitChildren(self)




    def pragma_declaration(self):

        localctx = HanaParser.Pragma_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_pragma_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.match(HanaParser.PRAGMA)
            self.state = 2074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [351]:
                self.state = 2044
                self.match(HanaParser.SERIALLY_REUSABLE)
                pass
            elif token in [29]:
                self.state = 2045
                self.match(HanaParser.AUTONOMOUS_TRANSACTION)
                pass
            elif token in [135]:
                self.state = 2046
                self.match(HanaParser.EXCEPTION_INIT)
                self.state = 2047
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2048
                self.exception_name()
                self.state = 2049
                self.match(HanaParser.COMMA)
                self.state = 2050
                self.numeric_negative()
                self.state = 2051
                self.match(HanaParser.RIGHT_PAREN)
                pass
            elif token in [182]:
                self.state = 2053
                self.match(HanaParser.INLINE)
                self.state = 2054
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2055
                localctx.id1 = self.id_()
                self.state = 2056
                self.match(HanaParser.COMMA)
                self.state = 2057
                self.expression()
                self.state = 2058
                self.match(HanaParser.RIGHT_PAREN)
                pass
            elif token in [319]:
                self.state = 2060
                self.match(HanaParser.RESTRICT_REFERENCES)
                self.state = 2061
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2064
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                    self.state = 2062
                    self.id_()
                    pass
                elif token in [106]:
                    self.state = 2063
                    self.match(HanaParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2068 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2066
                    self.match(HanaParser.COMMA)
                    self.state = 2067
                    self.id_()
                    self.state = 2070 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==535):
                        break

                self.state = 2072
                self.match(HanaParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2076
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_type_dec(self):
            return self.getTypedRuleContext(HanaParser.Record_type_decContext,0)


        def record_var_dec(self):
            return self.getTypedRuleContext(HanaParser.Record_var_decContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_record_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_declaration" ):
                listener.enterRecord_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_declaration" ):
                listener.exitRecord_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_declaration" ):
                return visitor.visitRecord_declaration(self)
            else:
                return visitor.visitChildren(self)




    def record_declaration(self):

        localctx = HanaParser.Record_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_record_declaration)
        try:
            self.state = 2080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2078
                self.record_type_dec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2079
                self.record_var_dec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_type_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(HanaParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(HanaParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def RECORD(self):
            return self.getToken(HanaParser.RECORD, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def field_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Field_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Field_specContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def REF(self):
            return self.getToken(HanaParser.REF, 0)

        def CURSOR(self):
            return self.getToken(HanaParser.CURSOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_record_type_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_type_dec" ):
                listener.enterRecord_type_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_type_dec" ):
                listener.exitRecord_type_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_type_dec" ):
                return visitor.visitRecord_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_type_dec(self):

        localctx = HanaParser.Record_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_record_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            self.match(HanaParser.TYPE)
            self.state = 2083
            self.type_name()
            self.state = 2084
            self.match(HanaParser.IS)
            self.state = 2103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [310]:
                self.state = 2085
                self.match(HanaParser.RECORD)
                self.state = 2086
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2087
                self.field_spec()
                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2088
                    self.match(HanaParser.COMMA)
                    self.state = 2089
                    self.field_spec()
                    self.state = 2094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2095
                self.match(HanaParser.RIGHT_PAREN)
                pass
            elif token in [311]:
                self.state = 2097
                self.match(HanaParser.REF)
                self.state = 2098
                self.match(HanaParser.CURSOR)
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==322:
                    self.state = 2099
                    self.match(HanaParser.RETURN)
                    self.state = 2100
                    self.type_spec()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2105
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(HanaParser.Column_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(HanaParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_field_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_spec" ):
                listener.enterField_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_spec" ):
                listener.exitField_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_spec" ):
                return visitor.visitField_spec(self)
            else:
                return visitor.visitChildren(self)




    def field_spec(self):

        localctx = HanaParser.Field_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_field_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.column_name()
            self.state = 2109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888499178594560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326836143653249) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325438160929) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 2108
                self.type_spec()


            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 2111
                self.match(HanaParser.NOT)
                self.state = 2112
                self.match(HanaParser.NULL)


            self.state = 2116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==538:
                self.state = 2115
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_var_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def record_name(self):
            return self.getTypedRuleContext(HanaParser.Record_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(HanaParser.Type_nameContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(HanaParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(HanaParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_record_var_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_var_dec" ):
                listener.enterRecord_var_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_var_dec" ):
                listener.exitRecord_var_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_var_dec" ):
                return visitor.visitRecord_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def record_var_dec(self):

        localctx = HanaParser.Record_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_record_var_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.record_name()
            self.state = 2119
            self.type_name()
            self.state = 2120
            _la = self._input.LA(1)
            if not(_la==290 or _la==291):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2121
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def table_type_dec(self):
            return self.getTypedRuleContext(HanaParser.Table_type_decContext,0)


        def table_var_dec(self):
            return self.getTypedRuleContext(HanaParser.Table_var_decContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_table_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_declaration" ):
                listener.enterTable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_declaration" ):
                listener.exitTable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_declaration" ):
                return visitor.visitTable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def table_declaration(self):

        localctx = HanaParser.Table_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_table_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 2123
                self.table_type_dec()
                pass

            elif la_ == 2:
                self.state = 2124
                self.table_var_dec()
                pass


            self.state = 2127
            self.match(HanaParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(HanaParser.TYPE, 0)

        def type_name(self):
            return self.getTypedRuleContext(HanaParser.Type_nameContext,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def TABLE(self):
            return self.getToken(HanaParser.TABLE, 0)

        def OF(self):
            return self.getToken(HanaParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def varray_type_def(self):
            return self.getTypedRuleContext(HanaParser.Varray_type_defContext,0)


        def table_indexed_by_part(self):
            return self.getTypedRuleContext(HanaParser.Table_indexed_by_partContext,0)


        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_table_type_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_dec" ):
                listener.enterTable_type_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_dec" ):
                listener.exitTable_type_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_dec" ):
                return visitor.visitTable_type_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_type_dec(self):

        localctx = HanaParser.Table_type_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_table_type_dec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.match(HanaParser.TYPE)
            self.state = 2130
            self.type_name()
            self.state = 2131
            self.match(HanaParser.IS)
            self.state = 2143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [390]:
                self.state = 2132
                self.match(HanaParser.TABLE)
                self.state = 2133
                self.match(HanaParser.OF)
                self.state = 2134
                self.type_spec()
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177 or _la==178:
                    self.state = 2135
                    self.table_indexed_by_part()


                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 2138
                    self.match(HanaParser.NOT)
                    self.state = 2139
                    self.match(HanaParser.NULL)


                pass
            elif token in [432, 433]:
                self.state = 2142
                self.varray_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_indexed_by_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.idx1 = None # Token
            self.idx2 = None # Token

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def INDEXED(self):
            return self.getToken(HanaParser.INDEXED, 0)

        def INDEX(self):
            return self.getToken(HanaParser.INDEX, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_table_indexed_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_indexed_by_part" ):
                listener.enterTable_indexed_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_indexed_by_part" ):
                listener.exitTable_indexed_by_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_indexed_by_part" ):
                return visitor.visitTable_indexed_by_part(self)
            else:
                return visitor.visitChildren(self)




    def table_indexed_by_part(self):

        localctx = HanaParser.Table_indexed_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_table_indexed_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178]:
                self.state = 2145
                localctx.idx1 = self.match(HanaParser.INDEXED)
                pass
            elif token in [177]:
                self.state = 2146
                localctx.idx2 = self.match(HanaParser.INDEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2149
            self.match(HanaParser.BY)
            self.state = 2150
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varray_type_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def OF(self):
            return self.getToken(HanaParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def VARRAY(self):
            return self.getToken(HanaParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(HanaParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(HanaParser.ARRAY, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_varray_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_type_def" ):
                listener.enterVarray_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_type_def" ):
                listener.exitVarray_type_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarray_type_def" ):
                return visitor.visitVarray_type_def(self)
            else:
                return visitor.visitChildren(self)




    def varray_type_def(self):

        localctx = HanaParser.Varray_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_varray_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [432]:
                self.state = 2152
                self.match(HanaParser.VARRAY)
                pass
            elif token in [433]:
                self.state = 2153
                self.match(HanaParser.VARYING)
                self.state = 2154
                self.match(HanaParser.ARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2157
            self.match(HanaParser.LEFT_PAREN)
            self.state = 2158
            self.expression()
            self.state = 2159
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 2160
            self.match(HanaParser.OF)
            self.state = 2161
            self.type_spec()
            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 2162
                self.match(HanaParser.NOT)
                self.state = 2163
                self.match(HanaParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_var_decContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_var_name(self):
            return self.getTypedRuleContext(HanaParser.Table_var_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_table_var_dec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_dec" ):
                listener.enterTable_var_dec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_dec" ):
                listener.exitTable_var_dec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_dec" ):
                return visitor.visitTable_var_dec(self)
            else:
                return visitor.visitChildren(self)




    def table_var_dec(self):

        localctx = HanaParser.Table_var_decContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_table_var_dec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            self.table_var_name()
            self.state = 2167
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Seq_of_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.StatementContext)
            else:
                return self.getTypedRuleContext(HanaParser.StatementContext,i)


        def label_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Label_declarationContext)
            else:
                return self.getTypedRuleContext(HanaParser.Label_declarationContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SEMICOLON)
            else:
                return self.getToken(HanaParser.SEMICOLON, i)

        def EOF(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.EOF)
            else:
                return self.getToken(HanaParser.EOF, i)

        def getRuleIndex(self):
            return HanaParser.RULE_seq_of_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_of_statements" ):
                listener.enterSeq_of_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_of_statements" ):
                listener.exitSeq_of_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq_of_statements" ):
                return visitor.visitSeq_of_statements(self)
            else:
                return visitor.visitChildren(self)




    def seq_of_statements(self):

        localctx = HanaParser.Seq_of_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_seq_of_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2173
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7, 8, 9, 10, 11, 12, 14, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 529, 539, 540, 555, 560]:
                    self.state = 2169
                    self.statement()
                    self.state = 2170
                    _la = self._input.LA(1)
                    if not(_la==-1 or _la==541):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [543]:
                    self.state = 2172
                    self.label_declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2175 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -288881570506776704) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540255919789048193) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4612266990600721475) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344880721913) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961863) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325406703649) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -182405692358263009) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145136810008607) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ltp1 = None # Token

        def LESS_THAN_OP(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LESS_THAN_OP)
            else:
                return self.getToken(HanaParser.LESS_THAN_OP, i)

        def label_name(self):
            return self.getTypedRuleContext(HanaParser.Label_nameContext,0)


        def GREATER_THAN_OP(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.GREATER_THAN_OP)
            else:
                return self.getToken(HanaParser.GREATER_THAN_OP, i)

        def getRuleIndex(self):
            return HanaParser.RULE_label_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_declaration" ):
                listener.enterLabel_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_declaration" ):
                listener.exitLabel_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_declaration" ):
                return visitor.visitLabel_declaration(self)
            else:
                return visitor.visitChildren(self)




    def label_declaration(self):

        localctx = HanaParser.Label_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_label_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            localctx.ltp1 = self.match(HanaParser.LESS_THAN_OP)
            self.state = 2178
            self.match(HanaParser.LESS_THAN_OP)
            self.state = 2179
            self.label_name()
            self.state = 2180
            self.match(HanaParser.GREATER_THAN_OP)
            self.state = 2181
            self.match(HanaParser.GREATER_THAN_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(HanaParser.CREATE, 0)

        def swallow_to_semi(self):
            return self.getTypedRuleContext(HanaParser.Swallow_to_semiContext,0)


        def ALTER(self):
            return self.getToken(HanaParser.ALTER, 0)

        def GRANT(self):
            return self.getToken(HanaParser.GRANT, 0)

        def TRUNCATE(self):
            return self.getToken(HanaParser.TRUNCATE, 0)

        def body(self):
            return self.getTypedRuleContext(HanaParser.BodyContext,0)


        def block(self):
            return self.getTypedRuleContext(HanaParser.BlockContext,0)


        def assignment_statement(self):
            return self.getTypedRuleContext(HanaParser.Assignment_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(HanaParser.Continue_statementContext,0)


        def exit_statement(self):
            return self.getTypedRuleContext(HanaParser.Exit_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(HanaParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(HanaParser.If_statementContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(HanaParser.Loop_statementContext,0)


        def forall_statement(self):
            return self.getTypedRuleContext(HanaParser.Forall_statementContext,0)


        def null_statement(self):
            return self.getTypedRuleContext(HanaParser.Null_statementContext,0)


        def raise_statement(self):
            return self.getTypedRuleContext(HanaParser.Raise_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(HanaParser.Return_statementContext,0)


        def case_statement(self):
            return self.getTypedRuleContext(HanaParser.Case_statementContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(HanaParser.Sql_statementContext,0)


        def function_call(self):
            return self.getTypedRuleContext(HanaParser.Function_callContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HanaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_statement)
        try:
            self.state = 2206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2183
                self.match(HanaParser.CREATE)
                self.state = 2184
                self.swallow_to_semi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2185
                self.match(HanaParser.ALTER)
                self.state = 2186
                self.swallow_to_semi()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2187
                self.match(HanaParser.GRANT)
                self.state = 2188
                self.swallow_to_semi()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2189
                self.match(HanaParser.TRUNCATE)
                self.state = 2190
                self.swallow_to_semi()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2191
                self.body()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2192
                self.block()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2193
                self.assignment_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2194
                self.continue_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2195
                self.exit_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2196
                self.goto_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2197
                self.if_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2198
                self.loop_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2199
                self.forall_statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2200
                self.null_statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2201
                self.raise_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2202
                self.return_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2203
                self.case_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2204
                self.sql_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2205
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN_OP(self):
            return self.getToken(HanaParser.ASSIGN_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def general_element(self):
            return self.getTypedRuleContext(HanaParser.General_elementContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(HanaParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_assignment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_statement" ):
                listener.enterAssignment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_statement" ):
                listener.exitAssignment_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_statement" ):
                return visitor.visitAssignment_statement(self)
            else:
                return visitor.visitChildren(self)




    def assignment_statement(self):

        localctx = HanaParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_assignment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.state = 2208
                self.general_element()
                pass
            elif token in [7, 476, 477, 539, 540]:
                self.state = 2209
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2212
            self.match(HanaParser.ASSIGN_OP)
            self.state = 2213
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(HanaParser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(HanaParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(HanaParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = HanaParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.match(HanaParser.CONTINUE)
            self.state = 2217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 2216
                self.label_name()


            self.state = 2221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==440:
                self.state = 2219
                self.match(HanaParser.WHEN)
                self.state = 2220
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exit_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(HanaParser.EXIT, 0)

        def label_name(self):
            return self.getTypedRuleContext(HanaParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(HanaParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_exit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_statement" ):
                listener.enterExit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_statement" ):
                listener.exitExit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_statement" ):
                return visitor.visitExit_statement(self)
            else:
                return visitor.visitChildren(self)




    def exit_statement(self):

        localctx = HanaParser.Exit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_exit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2223
            self.match(HanaParser.EXIT)
            self.state = 2225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 2224
                self.label_name()


            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==440:
                self.state = 2227
                self.match(HanaParser.WHEN)
                self.state = 2228
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Goto_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(HanaParser.GOTO, 0)

        def label_name(self):
            return self.getTypedRuleContext(HanaParser.Label_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)




    def goto_statement(self):

        localctx = HanaParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_goto_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.match(HanaParser.GOTO)
            self.state = 2232
            self.label_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.IF)
            else:
                return self.getToken(HanaParser.IF, i)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(HanaParser.END, 0)

        def elsif_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Elsif_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Elsif_partContext,i)


        def else_part(self):
            return self.getTypedRuleContext(HanaParser.Else_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = HanaParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2234
            self.match(HanaParser.IF)
            self.state = 2235
            self.condition()
            self.state = 2236
            self.match(HanaParser.THEN)
            self.state = 2237
            self.seq_of_statements()
            self.state = 2241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125:
                self.state = 2238
                self.elsif_part()
                self.state = 2243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 2244
                self.else_part()


            self.state = 2247
            self.match(HanaParser.END)
            self.state = 2248
            self.match(HanaParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elsif_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF(self):
            return self.getToken(HanaParser.ELSIF, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_elsif_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsif_part" ):
                listener.enterElsif_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsif_part" ):
                listener.exitElsif_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElsif_part" ):
                return visitor.visitElsif_part(self)
            else:
                return visitor.visitChildren(self)




    def elsif_part(self):

        localctx = HanaParser.Elsif_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_elsif_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(HanaParser.ELSIF)
            self.state = 2251
            self.condition()
            self.state = 2252
            self.match(HanaParser.THEN)
            self.state = 2253
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(HanaParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_part" ):
                listener.enterElse_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_part" ):
                listener.exitElse_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_part" ):
                return visitor.visitElse_part(self)
            else:
                return visitor.visitChildren(self)




    def else_part(self):

        localctx = HanaParser.Else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self.match(HanaParser.ELSE)
            self.state = 2256
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LOOP)
            else:
                return self.getToken(HanaParser.LOOP, i)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(HanaParser.END, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Label_nameContext,i)


        def WHILE(self):
            return self.getToken(HanaParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def cursor_loop_param(self):
            return self.getTypedRuleContext(HanaParser.Cursor_loop_paramContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_loop_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_statement" ):
                listener.enterLoop_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_statement" ):
                listener.exitLoop_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_statement" ):
                return visitor.visitLoop_statement(self)
            else:
                return visitor.visitChildren(self)




    def loop_statement(self):

        localctx = HanaParser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_loop_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 2258
                self.label_name()


            self.state = 2265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [443]:
                self.state = 2261
                self.match(HanaParser.WHILE)
                self.state = 2262
                self.condition()
                pass
            elif token in [154]:
                self.state = 2263
                self.match(HanaParser.FOR)
                self.state = 2264
                self.cursor_loop_param()
                pass
            elif token in [220]:
                pass
            else:
                pass
            self.state = 2267
            self.match(HanaParser.LOOP)
            self.state = 2268
            self.seq_of_statements()
            self.state = 2269
            self.match(HanaParser.END)
            self.state = 2270
            self.match(HanaParser.LOOP)
            self.state = 2272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 2271
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_loop_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self):
            return self.getTypedRuleContext(HanaParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(HanaParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(HanaParser.Upper_boundContext,0)


        def REVERSE(self):
            return self.getToken(HanaParser.REVERSE, 0)

        def record_name(self):
            return self.getTypedRuleContext(HanaParser.Record_nameContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(HanaParser.Cursor_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_cursor_loop_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_loop_param" ):
                listener.enterCursor_loop_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_loop_param" ):
                listener.exitCursor_loop_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_loop_param" ):
                return visitor.visitCursor_loop_param(self)
            else:
                return visitor.visitChildren(self)




    def cursor_loop_param(self):

        localctx = HanaParser.Cursor_loop_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_cursor_loop_param)
        self._la = 0 # Token type
        try:
            self.state = 2295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2274
                self.index_name()
                self.state = 2275
                self.match(HanaParser.IN)
                self.state = 2277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 2276
                    self.match(HanaParser.REVERSE)


                self.state = 2279
                self.lower_bound()
                self.state = 2280
                self.match(HanaParser.T__3)
                self.state = 2281
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2283
                self.record_name()
                self.state = 2284
                self.match(HanaParser.IN)
                self.state = 2293
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 560]:
                    self.state = 2285
                    self.cursor_name()
                    self.state = 2287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==529:
                        self.state = 2286
                        self.expression_list()


                    pass
                elif token in [529]:
                    self.state = 2289
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 2290
                    self.select_statement()
                    self.state = 2291
                    self.match(HanaParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forall_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(HanaParser.FORALL, 0)

        def index_name(self):
            return self.getTypedRuleContext(HanaParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def bounds_clause(self):
            return self.getTypedRuleContext(HanaParser.Bounds_clauseContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(HanaParser.Sql_statementContext,0)


        def SAVE(self):
            return self.getToken(HanaParser.SAVE, 0)

        def EXCEPTIONS(self):
            return self.getToken(HanaParser.EXCEPTIONS, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_forall_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForall_statement" ):
                listener.enterForall_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForall_statement" ):
                listener.exitForall_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForall_statement" ):
                return visitor.visitForall_statement(self)
            else:
                return visitor.visitChildren(self)




    def forall_statement(self):

        localctx = HanaParser.Forall_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_forall_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2297
            self.match(HanaParser.FORALL)
            self.state = 2298
            self.index_name()
            self.state = 2299
            self.match(HanaParser.IN)
            self.state = 2300
            self.bounds_clause()
            self.state = 2301
            self.sql_statement()
            self.state = 2304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==335:
                self.state = 2302
                self.match(HanaParser.SAVE)
                self.state = 2303
                self.match(HanaParser.EXCEPTIONS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bounds_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_bound(self):
            return self.getTypedRuleContext(HanaParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(HanaParser.Upper_boundContext,0)


        def INDICES(self):
            return self.getToken(HanaParser.INDICES, 0)

        def OF(self):
            return self.getToken(HanaParser.OF, 0)

        def collection_name(self):
            return self.getTypedRuleContext(HanaParser.Collection_nameContext,0)


        def between_bound(self):
            return self.getTypedRuleContext(HanaParser.Between_boundContext,0)


        def VALUES(self):
            return self.getToken(HanaParser.VALUES, 0)

        def index_name(self):
            return self.getTypedRuleContext(HanaParser.Index_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_bounds_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBounds_clause" ):
                listener.enterBounds_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBounds_clause" ):
                listener.exitBounds_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBounds_clause" ):
                return visitor.visitBounds_clause(self)
            else:
                return visitor.visitChildren(self)




    def bounds_clause(self):

        localctx = HanaParser.Bounds_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_bounds_clause)
        self._la = 0 # Token type
        try:
            self.state = 2319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2306
                self.lower_bound()
                self.state = 2307
                self.match(HanaParser.T__3)
                self.state = 2308
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2310
                self.match(HanaParser.INDICES)
                self.state = 2311
                self.match(HanaParser.OF)
                self.state = 2312
                self.collection_name()
                self.state = 2314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 2313
                    self.between_bound()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2316
                self.match(HanaParser.VALUES)
                self.state = 2317
                self.match(HanaParser.OF)
                self.state = 2318
                self.index_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(HanaParser.BETWEEN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(HanaParser.Lower_boundContext,0)


        def AND(self):
            return self.getToken(HanaParser.AND, 0)

        def upper_bound(self):
            return self.getTypedRuleContext(HanaParser.Upper_boundContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_between_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_bound" ):
                listener.enterBetween_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_bound" ):
                listener.exitBetween_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_bound" ):
                return visitor.visitBetween_bound(self)
            else:
                return visitor.visitChildren(self)




    def between_bound(self):

        localctx = HanaParser.Between_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_between_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            self.match(HanaParser.BETWEEN)
            self.state = 2322
            self.lower_bound()
            self.state = 2323
            self.match(HanaParser.AND)
            self.state = 2324
            self.upper_bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lower_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(HanaParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_lower_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_bound" ):
                listener.enterLower_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_bound" ):
                listener.exitLower_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLower_bound" ):
                return visitor.visitLower_bound(self)
            else:
                return visitor.visitChildren(self)




    def lower_bound(self):

        localctx = HanaParser.Lower_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_lower_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upper_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(HanaParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_upper_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_bound" ):
                listener.enterUpper_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_bound" ):
                listener.exitUpper_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpper_bound" ):
                return visitor.visitUpper_bound(self)
            else:
                return visitor.visitChildren(self)




    def upper_bound(self):

        localctx = HanaParser.Upper_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_upper_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_null_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_statement" ):
                listener.enterNull_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_statement" ):
                listener.exitNull_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_statement" ):
                return visitor.visitNull_statement(self)
            else:
                return visitor.visitChildren(self)




    def null_statement(self):

        localctx = HanaParser.Null_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_null_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(HanaParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(HanaParser.RAISE, 0)

        def exception_name(self):
            return self.getTypedRuleContext(HanaParser.Exception_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_statement" ):
                return visitor.visitRaise_statement(self)
            else:
                return visitor.visitChildren(self)




    def raise_statement(self):

        localctx = HanaParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_raise_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            self.match(HanaParser.RAISE)
            self.state = 2334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534874655) != 0):
                self.state = 2333
                self.exception_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cn1 = None # ConditionContext

        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = HanaParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.match(HanaParser.RETURN)
            self.state = 2338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288881574801490048) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3531315238842400897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652101699) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2322263047873029) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866478987870433) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135739419711) != 0):
                self.state = 2337
                localctx.cn1 = self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(HanaParser.Routine_nameContext,0)


        def CALL(self):
            return self.getToken(HanaParser.CALL, 0)

        def function_argument(self):
            return self.getTypedRuleContext(HanaParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = HanaParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 2340
                self.match(HanaParser.CALL)


            self.state = 2343
            self.routine_name()
            self.state = 2345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 2344
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(HanaParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(HanaParser.END, 0)

        def exception_clause(self):
            return self.getTypedRuleContext(HanaParser.Exception_clauseContext,0)


        def label_name(self):
            return self.getTypedRuleContext(HanaParser.Label_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = HanaParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            self.match(HanaParser.BEGIN)
            self.state = 2348
            self.seq_of_statements()
            self.state = 2350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 2349
                self.exception_clause()


            self.state = 2352
            self.match(HanaParser.END)
            self.state = 2354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 2353
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTION(self):
            return self.getToken(HanaParser.EXCEPTION, 0)

        def exception_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Exception_handlerContext)
            else:
                return self.getTypedRuleContext(HanaParser.Exception_handlerContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_exception_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_clause" ):
                listener.enterException_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_clause" ):
                listener.exitException_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_clause" ):
                return visitor.visitException_clause(self)
            else:
                return visitor.visitChildren(self)




    def exception_clause(self):

        localctx = HanaParser.Exception_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_exception_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            self.match(HanaParser.EXCEPTION)
            self.state = 2358 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2357
                self.exception_handler()
                self.state = 2360 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==440):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_handlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(HanaParser.WHEN, 0)

        def exception_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Exception_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Exception_nameContext,i)


        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.OR)
            else:
                return self.getToken(HanaParser.OR, i)

        def getRuleIndex(self):
            return HanaParser.RULE_exception_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_handler" ):
                listener.enterException_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_handler" ):
                listener.exitException_handler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_handler" ):
                return visitor.visitException_handler(self)
            else:
                return visitor.visitChildren(self)




    def exception_handler(self):

        localctx = HanaParser.Exception_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_exception_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2362
            self.match(HanaParser.WHEN)
            self.state = 2363
            self.exception_name()
            self.state = 2368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==274:
                self.state = 2364
                self.match(HanaParser.OR)
                self.state = 2365
                self.exception_name()
                self.state = 2370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2371
            self.match(HanaParser.THEN)
            self.state = 2372
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(HanaParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Declare_specContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_block" ):
                listener.enterTrigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_block" ):
                listener.exitTrigger_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_block" ):
                return visitor.visitTrigger_block(self)
            else:
                return visitor.visitChildren(self)




    def trigger_block(self):

        localctx = HanaParser.Trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326288533225857) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135736201247) != 0):
                self.state = 2375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2374
                    self.match(HanaParser.DECLARE)


                self.state = 2378 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2377
                    self.declare_spec()
                    self.state = 2380 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838289039745) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135736201247) != 0)):
                        break



            self.state = 2384
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(HanaParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Declare_specContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HanaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 2386
                self.match(HanaParser.DECLARE)


            self.state = 2390 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2389
                self.declare_spec()
                self.state = 2392 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501376) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838289039745) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135736201247) != 0)):
                    break

            self.state = 2394
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_immediate(self):
            return self.getTypedRuleContext(HanaParser.Execute_immediateContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(HanaParser.Data_manipulation_language_statementsContext,0)


        def cursor_manipulation_statements(self):
            return self.getTypedRuleContext(HanaParser.Cursor_manipulation_statementsContext,0)


        def transaction_control_statements(self):
            return self.getTypedRuleContext(HanaParser.Transaction_control_statementsContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_sql_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_statement" ):
                listener.enterSql_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_statement" ):
                listener.exitSql_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_statement" ):
                return visitor.visitSql_statement(self)
            else:
                return visitor.visitChildren(self)




    def sql_statement(self):

        localctx = HanaParser.Sql_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_sql_statement)
        try:
            self.state = 2400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2396
                self.execute_immediate()
                pass
            elif token in [103, 110, 142, 185, 214, 227, 346, 420, 444, 529]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2397
                self.data_manipulation_language_statements()
                pass
            elif token in [61, 147, 272]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2398
                self.cursor_manipulation_statements()
                pass
            elif token in [66, 328, 336, 354]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2399
                self.transaction_control_statements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_immediateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(HanaParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(HanaParser.IMMEDIATE, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(HanaParser.Into_clauseContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(HanaParser.Using_clauseContext,0)


        def dynamic_returning_clause(self):
            return self.getTypedRuleContext(HanaParser.Dynamic_returning_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_execute_immediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate" ):
                listener.enterExecute_immediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate" ):
                listener.exitExecute_immediate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_immediate" ):
                return visitor.visitExecute_immediate(self)
            else:
                return visitor.visitChildren(self)




    def execute_immediate(self):

        localctx = HanaParser.Execute_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_execute_immediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.match(HanaParser.EXECUTE)
            self.state = 2403
            self.match(HanaParser.IMMEDIATE)
            self.state = 2404
            self.expression()
            self.state = 2414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 192]:
                self.state = 2405
                self.into_clause()
                self.state = 2407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==425:
                    self.state = 2406
                    self.using_clause()


                pass
            elif token in [425]:
                self.state = 2409
                self.using_clause()
                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==322 or _la==323:
                    self.state = 2410
                    self.dynamic_returning_clause()


                pass
            elif token in [322, 323]:
                self.state = 2413
                self.dynamic_returning_clause()
                pass
            elif token in [-1, 335, 541]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_returning_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_clause(self):
            return self.getTypedRuleContext(HanaParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(HanaParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_dynamic_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_returning_clause" ):
                listener.enterDynamic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_returning_clause" ):
                listener.exitDynamic_returning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamic_returning_clause" ):
                return visitor.visitDynamic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def dynamic_returning_clause(self):

        localctx = HanaParser.Dynamic_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_dynamic_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416
            _la = self._input.LA(1)
            if not(_la==322 or _la==323):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2417
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_manipulation_language_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(HanaParser.Merge_statementContext,0)


        def lock_table_statement(self):
            return self.getTypedRuleContext(HanaParser.Lock_table_statementContext,0)


        def declare_statement(self):
            return self.getTypedRuleContext(HanaParser.Declare_statementContext,0)


        def exception_statement(self):
            return self.getTypedRuleContext(HanaParser.Exception_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(HanaParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(HanaParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(HanaParser.Insert_statementContext,0)


        def explain_statement(self):
            return self.getTypedRuleContext(HanaParser.Explain_statementContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_data_manipulation_language_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_manipulation_language_statements" ):
                listener.enterData_manipulation_language_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_manipulation_language_statements" ):
                listener.exitData_manipulation_language_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_manipulation_language_statements" ):
                return visitor.visitData_manipulation_language_statements(self)
            else:
                return visitor.visitChildren(self)




    def data_manipulation_language_statements(self):

        localctx = HanaParser.Data_manipulation_language_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_data_manipulation_language_statements)
        try:
            self.state = 2428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2419
                self.merge_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2420
                self.lock_table_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2421
                self.declare_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2422
                self.exception_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2423
                self.select_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2424
                self.update_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2425
                self.delete_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2426
                self.insert_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2427
                self.explain_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_manipulation_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def close_statement(self):
            return self.getTypedRuleContext(HanaParser.Close_statementContext,0)


        def open_statement(self):
            return self.getTypedRuleContext(HanaParser.Open_statementContext,0)


        def fetch_statement(self):
            return self.getTypedRuleContext(HanaParser.Fetch_statementContext,0)


        def open_for_statement(self):
            return self.getTypedRuleContext(HanaParser.Open_for_statementContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_cursor_manipulation_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_manipulation_statements" ):
                listener.enterCursor_manipulation_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_manipulation_statements" ):
                listener.exitCursor_manipulation_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_manipulation_statements" ):
                return visitor.visitCursor_manipulation_statements(self)
            else:
                return visitor.visitChildren(self)




    def cursor_manipulation_statements(self):

        localctx = HanaParser.Cursor_manipulation_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_cursor_manipulation_statements)
        try:
            self.state = 2434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2430
                self.close_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2431
                self.open_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2432
                self.fetch_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2433
                self.open_for_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(HanaParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(HanaParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_close_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_statement" ):
                listener.enterClose_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_statement" ):
                listener.exitClose_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClose_statement" ):
                return visitor.visitClose_statement(self)
            else:
                return visitor.visitChildren(self)




    def close_statement(self):

        localctx = HanaParser.Close_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_close_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(HanaParser.CLOSE)
            self.state = 2437
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(HanaParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(HanaParser.Cursor_nameContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_open_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_statement" ):
                listener.enterOpen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_statement" ):
                listener.exitOpen_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_statement" ):
                return visitor.visitOpen_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_statement(self):

        localctx = HanaParser.Open_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_open_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            self.match(HanaParser.OPEN)
            self.state = 2440
            self.cursor_name()
            self.state = 2442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 2441
                self.expression_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.it1 = None # Token

        def FETCH(self):
            return self.getToken(HanaParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(HanaParser.Cursor_nameContext,0)


        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(HanaParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(HanaParser.COLLECT, 0)

        def INTO(self):
            return self.getToken(HanaParser.INTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_fetch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_statement" ):
                listener.enterFetch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_statement" ):
                listener.exitFetch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_statement" ):
                return visitor.visitFetch_statement(self)
            else:
                return visitor.visitChildren(self)




    def fetch_statement(self):

        localctx = HanaParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self.match(HanaParser.FETCH)
            self.state = 2445
            self.cursor_name()
            self.state = 2466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.state = 2446
                localctx.it1 = self.match(HanaParser.INTO)
                self.state = 2447
                self.variable_name()
                self.state = 2452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2448
                    self.match(HanaParser.COMMA)
                    self.state = 2449
                    self.variable_name()
                    self.state = 2454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [45]:
                self.state = 2455
                self.match(HanaParser.BULK)
                self.state = 2456
                self.match(HanaParser.COLLECT)
                self.state = 2457
                self.match(HanaParser.INTO)
                self.state = 2458
                self.variable_name()
                self.state = 2463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2459
                    self.match(HanaParser.COMMA)
                    self.state = 2460
                    self.variable_name()
                    self.state = 2465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_for_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(HanaParser.OPEN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(HanaParser.Variable_nameContext,0)


        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(HanaParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_open_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_for_statement" ):
                listener.enterOpen_for_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_for_statement" ):
                listener.exitOpen_for_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_for_statement" ):
                return visitor.visitOpen_for_statement(self)
            else:
                return visitor.visitChildren(self)




    def open_for_statement(self):

        localctx = HanaParser.Open_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_open_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self.match(HanaParser.OPEN)
            self.state = 2469
            self.variable_name()
            self.state = 2470
            self.match(HanaParser.FOR)
            self.state = 2473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 2471
                self.select_statement()
                pass

            elif la_ == 2:
                self.state = 2472
                self.expression()
                pass


            self.state = 2476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==425:
                self.state = 2475
                self.using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_control_statementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_transaction_command(self):
            return self.getTypedRuleContext(HanaParser.Set_transaction_commandContext,0)


        def set_constraint_command(self):
            return self.getTypedRuleContext(HanaParser.Set_constraint_commandContext,0)


        def commit_statement(self):
            return self.getTypedRuleContext(HanaParser.Commit_statementContext,0)


        def rollback_statement(self):
            return self.getTypedRuleContext(HanaParser.Rollback_statementContext,0)


        def savepoint_statement(self):
            return self.getTypedRuleContext(HanaParser.Savepoint_statementContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_transaction_control_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_control_statements" ):
                listener.enterTransaction_control_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_control_statements" ):
                listener.exitTransaction_control_statements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_control_statements" ):
                return visitor.visitTransaction_control_statements(self)
            else:
                return visitor.visitChildren(self)




    def transaction_control_statements(self):

        localctx = HanaParser.Transaction_control_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_transaction_control_statements)
        try:
            self.state = 2483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2478
                self.set_transaction_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2479
                self.set_constraint_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2480
                self.commit_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2481
                self.rollback_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2482
                self.savepoint_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_transaction_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(HanaParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(HanaParser.READ, 0)

        def ISOLATION(self):
            return self.getToken(HanaParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(HanaParser.LEVEL, 0)

        def USE(self):
            return self.getToken(HanaParser.USE, 0)

        def ROLLBACK(self):
            return self.getToken(HanaParser.ROLLBACK, 0)

        def SEGMENT(self):
            return self.getToken(HanaParser.SEGMENT, 0)

        def rollback_segment_name(self):
            return self.getTypedRuleContext(HanaParser.Rollback_segment_nameContext,0)


        def NAME(self):
            return self.getToken(HanaParser.NAME, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(HanaParser.Quoted_stringContext,0)


        def ONLY(self):
            return self.getToken(HanaParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(HanaParser.WRITE, 0)

        def SERIALIZABLE(self):
            return self.getToken(HanaParser.SERIALIZABLE, 0)

        def COMMITTED(self):
            return self.getToken(HanaParser.COMMITTED, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_set_transaction_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_transaction_command" ):
                listener.enterSet_transaction_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_transaction_command" ):
                listener.exitSet_transaction_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_transaction_command" ):
                return visitor.visitSet_transaction_command(self)
            else:
                return visitor.visitChildren(self)




    def set_transaction_command(self):

        localctx = HanaParser.Set_transaction_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_set_transaction_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self.match(HanaParser.SET)
            self.state = 2486
            self.match(HanaParser.TRANSACTION)
            self.state = 2500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [307]:
                self.state = 2487
                self.match(HanaParser.READ)
                self.state = 2488
                _la = self._input.LA(1)
                if not(_la==271 or _la==447):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [196]:
                self.state = 2489
                self.match(HanaParser.ISOLATION)
                self.state = 2490
                self.match(HanaParser.LEVEL)
                self.state = 2494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [350]:
                    self.state = 2491
                    self.match(HanaParser.SERIALIZABLE)
                    pass
                elif token in [307]:
                    self.state = 2492
                    self.match(HanaParser.READ)
                    self.state = 2493
                    self.match(HanaParser.COMMITTED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [424]:
                self.state = 2496
                self.match(HanaParser.USE)
                self.state = 2497
                self.match(HanaParser.ROLLBACK)
                self.state = 2498
                self.match(HanaParser.SEGMENT)
                self.state = 2499
                self.rollback_segment_name()
                pass
            elif token in [-1, 237, 335, 541]:
                pass
            else:
                pass
            self.state = 2504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==237:
                self.state = 2502
                self.match(HanaParser.NAME)
                self.state = 2503
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_constraint_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def CONSTRAINT(self):
            return self.getToken(HanaParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(HanaParser.CONSTRAINTS, 0)

        def IMMEDIATE(self):
            return self.getToken(HanaParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(HanaParser.DEFERRED, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def constraint_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Constraint_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Constraint_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_set_constraint_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_constraint_command" ):
                listener.enterSet_constraint_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_constraint_command" ):
                listener.exitSet_constraint_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_constraint_command" ):
                return visitor.visitSet_constraint_command(self)
            else:
                return visitor.visitChildren(self)




    def set_constraint_command(self):

        localctx = HanaParser.Set_constraint_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_set_constraint_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            self.match(HanaParser.SET)
            self.state = 2507
            _la = self._input.LA(1)
            if not(_la==74 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 2508
                self.match(HanaParser.ALL)
                pass
            elif token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.state = 2509
                self.constraint_name()
                self.state = 2514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2510
                    self.match(HanaParser.COMMA)
                    self.state = 2511
                    self.constraint_name()
                    self.state = 2516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2519
            _la = self._input.LA(1)
            if not(_la==108 or _la==171):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(HanaParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(HanaParser.WORK, 0)

        def COMMENT(self):
            return self.getToken(HanaParser.COMMENT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def FORCE(self):
            return self.getToken(HanaParser.FORCE, 0)

        def write_clause(self):
            return self.getTypedRuleContext(HanaParser.Write_clauseContext,0)


        def CORRUPT_XID(self):
            return self.getToken(HanaParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(HanaParser.CORRUPT_XID_ALL, 0)

        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_commit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_statement" ):
                listener.enterCommit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_statement" ):
                listener.exitCommit_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit_statement" ):
                return visitor.visitCommit_statement(self)
            else:
                return visitor.visitChildren(self)




    def commit_statement(self):

        localctx = HanaParser.Commit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_commit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2521
            self.match(HanaParser.COMMIT)
            self.state = 2523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 2522
                self.match(HanaParser.WORK)


            self.state = 2538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.state = 2525
                self.match(HanaParser.COMMENT)
                self.state = 2526
                self.expression()
                pass
            elif token in [156]:
                self.state = 2527
                self.match(HanaParser.FORCE)
                self.state = 2536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 2528
                    self.match(HanaParser.CORRUPT_XID)
                    self.state = 2529
                    self.expression()
                    pass

                elif la_ == 2:
                    self.state = 2530
                    self.match(HanaParser.CORRUPT_XID_ALL)
                    pass

                elif la_ == 3:
                    self.state = 2531
                    self.expression()
                    self.state = 2534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==535:
                        self.state = 2532
                        self.match(HanaParser.COMMA)
                        self.state = 2533
                        self.expression()


                    pass


                pass
            elif token in [-1, 335, 447, 541]:
                pass
            else:
                pass
            self.state = 2541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==447:
                self.state = 2540
                self.write_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(HanaParser.WRITE, 0)

        def WAIT(self):
            return self.getToken(HanaParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(HanaParser.NOWAIT, 0)

        def IMMEDIATE(self):
            return self.getToken(HanaParser.IMMEDIATE, 0)

        def BATCH(self):
            return self.getToken(HanaParser.BATCH, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_write_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_clause" ):
                listener.enterWrite_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_clause" ):
                listener.exitWrite_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWrite_clause" ):
                return visitor.visitWrite_clause(self)
            else:
                return visitor.visitChildren(self)




    def write_clause(self):

        localctx = HanaParser.Write_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_write_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2543
            self.match(HanaParser.WRITE)
            self.state = 2545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==259 or _la==437:
                self.state = 2544
                _la = self._input.LA(1)
                if not(_la==259 or _la==437):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or _la==171:
                self.state = 2547
                _la = self._input.LA(1)
                if not(_la==30 or _la==171):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(HanaParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(HanaParser.WORK, 0)

        def TO(self):
            return self.getToken(HanaParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(HanaParser.Savepoint_nameContext,0)


        def FORCE(self):
            return self.getToken(HanaParser.FORCE, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(HanaParser.Quoted_stringContext,0)


        def SAVEPOINT(self):
            return self.getToken(HanaParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_rollback_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_statement" ):
                listener.enterRollback_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_statement" ):
                listener.exitRollback_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_statement" ):
                return visitor.visitRollback_statement(self)
            else:
                return visitor.visitChildren(self)




    def rollback_statement(self):

        localctx = HanaParser.Rollback_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_rollback_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2550
            self.match(HanaParser.ROLLBACK)
            self.state = 2552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 2551
                self.match(HanaParser.WORK)


            self.state = 2561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [403]:
                self.state = 2554
                self.match(HanaParser.TO)
                self.state = 2556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 2555
                    self.match(HanaParser.SAVEPOINT)


                self.state = 2558
                self.savepoint_name()
                pass
            elif token in [156]:
                self.state = 2559
                self.match(HanaParser.FORCE)
                self.state = 2560
                self.quoted_string()
                pass
            elif token in [-1, 335, 541]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(HanaParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(HanaParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_savepoint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_statement" ):
                listener.enterSavepoint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_statement" ):
                listener.exitSavepoint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_statement" ):
                return visitor.visitSavepoint_statement(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_statement(self):

        localctx = HanaParser.Savepoint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_savepoint_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2563
            self.match(HanaParser.SAVEPOINT)
            self.state = 2564
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(HanaParser.EXPLAIN, 0)

        def PLAN(self):
            return self.getToken(HanaParser.PLAN, 0)

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(HanaParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(HanaParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(HanaParser.Insert_statementContext,0)


        def merge_statement(self):
            return self.getTypedRuleContext(HanaParser.Merge_statementContext,0)


        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def STATEMENT_ID(self):
            return self.getToken(HanaParser.STATEMENT_ID, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(HanaParser.Quoted_stringContext,0)


        def INTO(self):
            return self.getToken(HanaParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_explain_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_statement" ):
                listener.enterExplain_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_statement" ):
                listener.exitExplain_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain_statement" ):
                return visitor.visitExplain_statement(self)
            else:
                return visitor.visitChildren(self)




    def explain_statement(self):

        localctx = HanaParser.Explain_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_explain_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self.match(HanaParser.EXPLAIN)
            self.state = 2567
            self.match(HanaParser.PLAN)
            self.state = 2572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==354:
                self.state = 2568
                self.match(HanaParser.SET)
                self.state = 2569
                self.match(HanaParser.STATEMENT_ID)
                self.state = 2570
                self.match(HanaParser.EQUALS_OP)
                self.state = 2571
                self.quoted_string()


            self.state = 2576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 2574
                self.match(HanaParser.INTO)
                self.state = 2575
                self.tableview_name()


            self.state = 2578
            self.match(HanaParser.FOR)
            self.state = 2584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [346, 444, 529]:
                self.state = 2579
                self.select_statement()
                pass
            elif token in [420]:
                self.state = 2580
                self.update_statement()
                pass
            elif token in [110]:
                self.state = 2581
                self.delete_statement()
                pass
            elif token in [185]:
                self.state = 2582
                self.insert_statement()
                pass
            elif token in [227]:
                self.state = 2583
                self.merge_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def subquery_factoring_clause(self):
            return self.getTypedRuleContext(HanaParser.Subquery_factoring_clauseContext,0)


        def for_update_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.For_update_clauseContext)
            else:
                return self.getTypedRuleContext(HanaParser.For_update_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(HanaParser.Order_by_clauseContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = HanaParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==444:
                self.state = 2586
                self.subquery_factoring_clause()


            self.state = 2589
            self.subquery()
            self.state = 2594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==154 or _la==276:
                self.state = 2592
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [154]:
                    self.state = 2590
                    self.for_update_clause()
                    pass
                elif token in [276]:
                    self.state = 2591
                    self.order_by_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_factoring_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HanaParser.WITH, 0)

        def factoring_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Factoring_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Factoring_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_subquery_factoring_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_factoring_clause" ):
                listener.enterSubquery_factoring_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_factoring_clause" ):
                listener.exitSubquery_factoring_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_factoring_clause" ):
                return visitor.visitSubquery_factoring_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_factoring_clause(self):

        localctx = HanaParser.Subquery_factoring_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_subquery_factoring_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.match(HanaParser.WITH)
            self.state = 2598
            self.factoring_element()
            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 2599
                self.match(HanaParser.COMMA)
                self.state = 2600
                self.factoring_element()
                self.state = 2605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factoring_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(HanaParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(HanaParser.Order_by_clauseContext,0)


        def search_clause(self):
            return self.getTypedRuleContext(HanaParser.Search_clauseContext,0)


        def cycle_clause(self):
            return self.getTypedRuleContext(HanaParser.Cycle_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_factoring_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactoring_element" ):
                listener.enterFactoring_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactoring_element" ):
                listener.exitFactoring_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactoring_element" ):
                return visitor.visitFactoring_element(self)
            else:
                return visitor.visitChildren(self)




    def factoring_element(self):

        localctx = HanaParser.Factoring_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_factoring_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.query_name()
            self.state = 2618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 2607
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2608
                self.column_name()
                self.state = 2613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2609
                    self.match(HanaParser.COMMA)
                    self.state = 2610
                    self.column_name()
                    self.state = 2615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2616
                self.match(HanaParser.RIGHT_PAREN)


            self.state = 2620
            self.match(HanaParser.AS)
            self.state = 2621
            self.match(HanaParser.LEFT_PAREN)
            self.state = 2622
            self.subquery()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==276:
                self.state = 2623
                self.order_by_clause()


            self.state = 2626
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 2628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 2627
                self.search_clause()


            self.state = 2631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 2630
                self.cycle_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(HanaParser.SEARCH, 0)

        def FIRST(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.FIRST)
            else:
                return self.getToken(HanaParser.FIRST, i)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def DEPTH(self):
            return self.getToken(HanaParser.DEPTH, 0)

        def BREADTH(self):
            return self.getToken(HanaParser.BREADTH, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.ASC)
            else:
                return self.getToken(HanaParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.DESC)
            else:
                return self.getToken(HanaParser.DESC, i)

        def NULLS(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.NULLS)
            else:
                return self.getToken(HanaParser.NULLS, i)

        def LAST(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LAST)
            else:
                return self.getToken(HanaParser.LAST, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_search_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_clause" ):
                listener.enterSearch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_clause" ):
                listener.exitSearch_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_clause" ):
                return visitor.visitSearch_clause(self)
            else:
                return visitor.visitChildren(self)




    def search_clause(self):

        localctx = HanaParser.Search_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_search_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2633
            self.match(HanaParser.SEARCH)
            self.state = 2634
            _la = self._input.LA(1)
            if not(_la==44 or _la==111):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2635
            self.match(HanaParser.FIRST)
            self.state = 2636
            self.match(HanaParser.BY)
            self.state = 2637
            self.column_name()
            self.state = 2639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 2638
                self.match(HanaParser.ASC)


            self.state = 2642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 2641
                self.match(HanaParser.DESC)


            self.state = 2646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2644
                self.match(HanaParser.NULLS)
                self.state = 2645
                self.match(HanaParser.FIRST)


            self.state = 2650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2648
                self.match(HanaParser.NULLS)
                self.state = 2649
                self.match(HanaParser.LAST)


            self.state = 2670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 2652
                self.match(HanaParser.COMMA)
                self.state = 2653
                self.column_name()
                self.state = 2655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 2654
                    self.match(HanaParser.ASC)


                self.state = 2658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2657
                    self.match(HanaParser.DESC)


                self.state = 2662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2660
                    self.match(HanaParser.NULLS)
                    self.state = 2661
                    self.match(HanaParser.FIRST)


                self.state = 2666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 2664
                    self.match(HanaParser.NULLS)
                    self.state = 2665
                    self.match(HanaParser.LAST)


                self.state = 2672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2673
            self.match(HanaParser.SET)
            self.state = 2674
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cycle_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYCLE(self):
            return self.getToken(HanaParser.CYCLE, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def TO(self):
            return self.getToken(HanaParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def DEFAULT(self):
            return self.getToken(HanaParser.DEFAULT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_cycle_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCycle_clause" ):
                listener.enterCycle_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCycle_clause" ):
                listener.exitCycle_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCycle_clause" ):
                return visitor.visitCycle_clause(self)
            else:
                return visitor.visitChildren(self)




    def cycle_clause(self):

        localctx = HanaParser.Cycle_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_cycle_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2676
            self.match(HanaParser.CYCLE)
            self.state = 2677
            self.column_name()
            self.state = 2682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 2678
                self.match(HanaParser.COMMA)
                self.state = 2679
                self.column_name()
                self.state = 2684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2685
            self.match(HanaParser.SET)
            self.state = 2686
            self.column_name()
            self.state = 2687
            self.match(HanaParser.TO)
            self.state = 2688
            self.expression()
            self.state = 2689
            self.match(HanaParser.DEFAULT)
            self.state = 2690
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery_basic_elements(self):
            return self.getTypedRuleContext(HanaParser.Subquery_basic_elementsContext,0)


        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Subquery_operation_partContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = HanaParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            self.subquery_basic_elements()
            self.state = 2696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2693
                    self.subquery_operation_part() 
                self.state = 2698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_operation_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery_basic_elements(self):
            return self.getTypedRuleContext(HanaParser.Subquery_basic_elementsContext,0)


        def UNION(self):
            return self.getToken(HanaParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(HanaParser.INTERSECT, 0)

        def MINUS(self):
            return self.getToken(HanaParser.MINUS, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_subquery_operation_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_operation_part" ):
                listener.enterSubquery_operation_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_operation_part" ):
                listener.exitSubquery_operation_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_operation_part" ):
                return visitor.visitSubquery_operation_part(self)
            else:
                return visitor.visitChildren(self)




    def subquery_operation_part(self):

        localctx = HanaParser.Subquery_operation_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_subquery_operation_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [415]:
                self.state = 2699
                self.match(HanaParser.UNION)
                self.state = 2701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 2700
                    self.match(HanaParser.ALL)


                pass
            elif token in [190]:
                self.state = 2703
                self.match(HanaParser.INTERSECT)
                pass
            elif token in [228]:
                self.state = 2704
                self.match(HanaParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2707
            self.subquery_basic_elements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_basic_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_block(self):
            return self.getTypedRuleContext(HanaParser.Query_blockContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_subquery_basic_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_basic_elements" ):
                listener.enterSubquery_basic_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_basic_elements" ):
                listener.exitSubquery_basic_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_basic_elements" ):
                return visitor.visitSubquery_basic_elements(self)
            else:
                return visitor.visitChildren(self)




    def subquery_basic_elements(self):

        localctx = HanaParser.Subquery_basic_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_subquery_basic_elements)
        try:
            self.state = 2714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [346]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2709
                self.query_block()
                pass
            elif token in [529]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2710
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2711
                self.subquery()
                self.state = 2712
                self.match(HanaParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(HanaParser.SELECT, 0)

        def from_clause(self):
            return self.getTypedRuleContext(HanaParser.From_clauseContext,0)


        def ASTERISK(self):
            return self.getToken(HanaParser.ASTERISK, 0)

        def selected_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Selected_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Selected_elementContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(HanaParser.Into_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(HanaParser.Where_clauseContext,0)


        def hierarchical_query_clause(self):
            return self.getTypedRuleContext(HanaParser.Hierarchical_query_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(HanaParser.Group_by_clauseContext,0)


        def model_clause(self):
            return self.getTypedRuleContext(HanaParser.Model_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(HanaParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(HanaParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_query_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_block" ):
                listener.enterQuery_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_block" ):
                listener.exitQuery_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_block" ):
                return visitor.visitQuery_block(self)
            else:
                return visitor.visitChildren(self)




    def query_block(self):

        localctx = HanaParser.Query_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_query_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            self.match(HanaParser.SELECT)
            self.state = 2718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 2717
                _la = self._input.LA(1)
                if not(_la==13 or _la==117 or _la==416):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [532]:
                self.state = 2720
                self.match(HanaParser.ASTERISK)
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 529, 533, 534, 539, 540, 555, 560]:
                self.state = 2721
                self.selected_element()
                self.state = 2726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2722
                    self.match(HanaParser.COMMA)
                    self.state = 2723
                    self.selected_element()
                    self.state = 2728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==192:
                self.state = 2731
                self.into_clause()


            self.state = 2734
            self.from_clause()
            self.state = 2736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 2735
                self.where_clause()


            self.state = 2739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.state = 2738
                self.hierarchical_query_clause()


            self.state = 2742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2741
                self.group_by_clause()


            self.state = 2745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2744
                self.model_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elements(self):
            return self.getTypedRuleContext(HanaParser.Select_list_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(HanaParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_selected_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_element" ):
                listener.enterSelected_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_element" ):
                listener.exitSelected_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelected_element" ):
                return visitor.visitSelected_element(self)
            else:
                return visitor.visitChildren(self)




    def selected_element(self):

        localctx = HanaParser.Selected_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_selected_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.select_list_elements()
            self.state = 2749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2748
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HanaParser.FROM, 0)

        def table_ref_list(self):
            return self.getTypedRuleContext(HanaParser.Table_ref_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_clause" ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = HanaParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2751
            self.match(HanaParser.FROM)
            self.state = 2752
            self.table_ref_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def ASTERISK(self):
            return self.getToken(HanaParser.ASTERISK, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_select_list_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elements" ):
                listener.enterSelect_list_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elements" ):
                listener.exitSelect_list_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list_elements" ):
                return visitor.visitSelect_list_elements(self)
            else:
                return visitor.visitChildren(self)




    def select_list_elements(self):

        localctx = HanaParser.Select_list_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_select_list_elements)
        try:
            self.state = 2759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2754
                self.tableview_name()
                self.state = 2755
                self.match(HanaParser.PERIOD)
                self.state = 2756
                self.match(HanaParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2758
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_ref_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Table_refContext)
            else:
                return self.getTypedRuleContext(HanaParser.Table_refContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_table_ref_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_list" ):
                listener.enterTable_ref_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_list" ):
                listener.exitTable_ref_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_list" ):
                return visitor.visitTable_ref_list(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_list(self):

        localctx = HanaParser.Table_ref_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_table_ref_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2761
            self.table_ref()
            self.state = 2766
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2762
                    self.match(HanaParser.COMMA)
                    self.state = 2763
                    self.table_ref() 
                self.state = 2768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref_aux(self):
            return self.getTypedRuleContext(HanaParser.Table_ref_auxContext,0)


        def join_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Join_clauseContext)
            else:
                return self.getTypedRuleContext(HanaParser.Join_clauseContext,i)


        def pivot_clause(self):
            return self.getTypedRuleContext(HanaParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(HanaParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref" ):
                listener.enterTable_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref" ):
                listener.exitTable_ref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref" ):
                return visitor.visitTable_ref(self)
            else:
                return visitor.visitChildren(self)




    def table_ref(self):

        localctx = HanaParser.Table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2769
            self.table_ref_aux()
            self.state = 2773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2770
                    self.join_clause() 
                self.state = 2775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

            self.state = 2778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 2776
                self.pivot_clause()

            elif la_ == 2:
                self.state = 2777
                self.unpivot_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_ref_auxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(HanaParser.Dml_table_expression_clauseContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def table_ref(self):
            return self.getTypedRuleContext(HanaParser.Table_refContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def ONLY(self):
            return self.getToken(HanaParser.ONLY, 0)

        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(HanaParser.Flashback_query_clauseContext,i)


        def table_alias(self):
            return self.getTypedRuleContext(HanaParser.Table_aliasContext,0)


        def pivot_clause(self):
            return self.getTypedRuleContext(HanaParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(HanaParser.Unpivot_clauseContext,0)


        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Subquery_operation_partContext,i)


        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def BINDVAR(self):
            return self.getToken(HanaParser.BINDVAR, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_table_ref_aux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux" ):
                listener.enterTable_ref_aux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux" ):
                listener.exitTable_ref_aux(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_ref_aux" ):
                return visitor.visitTable_ref_aux(self)
            else:
                return visitor.visitChildren(self)




    def table_ref_aux(self):

        localctx = HanaParser.Table_ref_auxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_table_ref_aux)
        self._la = 0 # Token type
        try:
            self.state = 2829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 529, 555, 560]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2780
                    self.dml_table_expression_clause()
                    self.state = 2783
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                    if la_ == 1:
                        self.state = 2781
                        self.pivot_clause()

                    elif la_ == 2:
                        self.state = 2782
                        self.unpivot_clause()


                    pass

                elif la_ == 2:
                    self.state = 2785
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 2786
                    self.table_ref()
                    self.state = 2790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==190 or _la==228 or _la==415:
                        self.state = 2787
                        self.subquery_operation_part()
                        self.state = 2792
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2793
                    self.match(HanaParser.RIGHT_PAREN)
                    self.state = 2796
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                    if la_ == 1:
                        self.state = 2794
                        self.pivot_clause()

                    elif la_ == 2:
                        self.state = 2795
                        self.unpivot_clause()


                    pass

                elif la_ == 3:
                    self.state = 2798
                    self.match(HanaParser.ONLY)
                    self.state = 2799
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 2800
                    self.dml_table_expression_clause()
                    self.state = 2801
                    self.match(HanaParser.RIGHT_PAREN)
                    pass

                elif la_ == 4:
                    self.state = 2803
                    self.dml_table_expression_clause()
                    self.state = 2806
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                    if la_ == 1:
                        self.state = 2804
                        self.pivot_clause()

                    elif la_ == 2:
                        self.state = 2805
                        self.unpivot_clause()


                    pass


                self.state = 2813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2810
                        self.flashback_query_clause() 
                    self.state = 2815
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

                self.state = 2820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2816
                        self.match(HanaParser.AS)


                    self.state = 2819
                    self.table_alias()


                pass
            elif token in [539]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2822
                self.match(HanaParser.BINDVAR)
                self.state = 2827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2823
                        self.match(HanaParser.AS)


                    self.state = 2826
                    self.table_alias()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(HanaParser.JOIN, 0)

        def table_ref_aux(self):
            return self.getTypedRuleContext(HanaParser.Table_ref_auxContext,0)


        def query_partition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Query_partition_clauseContext)
            else:
                return self.getTypedRuleContext(HanaParser.Query_partition_clauseContext,i)


        def INNER(self):
            return self.getToken(HanaParser.INNER, 0)

        def outer_join_type(self):
            return self.getTypedRuleContext(HanaParser.Outer_join_typeContext,0)


        def join_on_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Join_on_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Join_on_partContext,i)


        def join_using_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Join_using_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Join_using_partContext,i)


        def CROSS(self):
            return self.getToken(HanaParser.CROSS, 0)

        def NATURAL(self):
            return self.getToken(HanaParser.NATURAL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = HanaParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==287:
                self.state = 2831
                self.query_partition_clause()


            self.state = 2835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86 or _la==239:
                self.state = 2834
                _la = self._input.LA(1)
                if not(_la==86 or _la==239):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [183]:
                self.state = 2837
                self.match(HanaParser.INNER)
                pass
            elif token in [158, 205, 327]:
                self.state = 2838
                self.outer_join_type()
                pass
            elif token in [199]:
                pass
            else:
                pass
            self.state = 2841
            self.match(HanaParser.JOIN)
            self.state = 2842
            self.table_ref_aux()
            self.state = 2844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2843
                self.query_partition_clause()


            self.state = 2850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2848
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [270]:
                        self.state = 2846
                        self.join_on_part()
                        pass
                    elif token in [425]:
                        self.state = 2847
                        self.join_using_part()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HanaParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_join_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_part" ):
                listener.enterJoin_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_part" ):
                listener.exitJoin_on_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_on_part" ):
                return visitor.visitJoin_on_part(self)
            else:
                return visitor.visitChildren(self)




    def join_on_part(self):

        localctx = HanaParser.Join_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_join_on_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2853
            self.match(HanaParser.ON)
            self.state = 2854
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_using_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(HanaParser.USING, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_join_using_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_using_part" ):
                listener.enterJoin_using_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_using_part" ):
                listener.exitJoin_using_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_using_part" ):
                return visitor.visitJoin_using_part(self)
            else:
                return visitor.visitChildren(self)




    def join_using_part(self):

        localctx = HanaParser.Join_using_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_join_using_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2856
            self.match(HanaParser.USING)
            self.state = 2857
            self.match(HanaParser.LEFT_PAREN)
            self.state = 2858
            self.column_name()
            self.state = 2863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 2859
                self.match(HanaParser.COMMA)
                self.state = 2860
                self.column_name()
                self.state = 2865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2866
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Outer_join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(HanaParser.FULL, 0)

        def LEFT(self):
            return self.getToken(HanaParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(HanaParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(HanaParser.OUTER, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_outer_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_type" ):
                listener.enterOuter_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_type" ):
                listener.exitOuter_join_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuter_join_type" ):
                return visitor.visitOuter_join_type(self)
            else:
                return visitor.visitChildren(self)




    def outer_join_type(self):

        localctx = HanaParser.Outer_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_outer_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2868
            _la = self._input.LA(1)
            if not(_la==158 or _la==205 or _la==327):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==280:
                self.state = 2869
                self.match(HanaParser.OUTER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_partition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HanaParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_query_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_partition_clause" ):
                listener.enterQuery_partition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_partition_clause" ):
                listener.exitQuery_partition_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_partition_clause" ):
                return visitor.visitQuery_partition_clause(self)
            else:
                return visitor.visitChildren(self)




    def query_partition_clause(self):

        localctx = HanaParser.Query_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_query_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2872
            self.match(HanaParser.PARTITION)
            self.state = 2873
            self.match(HanaParser.BY)
            self.state = 2887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2874
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2875
                self.subquery()
                self.state = 2876
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 2878
                self.expression_list()
                pass

            elif la_ == 3:
                self.state = 2879
                self.expression()
                self.state = 2884
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2880
                        self.match(HanaParser.COMMA)
                        self.state = 2881
                        self.expression() 
                    self.state = 2886
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flashback_query_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSIONS(self):
            return self.getToken(HanaParser.VERSIONS, 0)

        def BETWEEN(self):
            return self.getToken(HanaParser.BETWEEN, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def SCN(self):
            return self.getToken(HanaParser.SCN, 0)

        def TIMESTAMP(self):
            return self.getToken(HanaParser.TIMESTAMP, 0)

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def OF(self):
            return self.getToken(HanaParser.OF, 0)

        def SNAPSHOT(self):
            return self.getToken(HanaParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_flashback_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_query_clause" ):
                listener.enterFlashback_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_query_clause" ):
                listener.exitFlashback_query_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlashback_query_clause" ):
                return visitor.visitFlashback_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def flashback_query_clause(self):

        localctx = HanaParser.Flashback_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_flashback_query_clause)
        self._la = 0 # Token type
        try:
            self.state = 2897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [435]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2889
                self.match(HanaParser.VERSIONS)
                self.state = 2890
                self.match(HanaParser.BETWEEN)
                self.state = 2891
                _la = self._input.LA(1)
                if not(_la==339 or _la==394):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2892
                self.expression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2893
                self.match(HanaParser.AS)
                self.state = 2894
                self.match(HanaParser.OF)
                self.state = 2895
                _la = self._input.LA(1)
                if not(((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & 36028797555834881) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2896
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(HanaParser.PIVOT, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def pivot_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Pivot_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Pivot_elementContext,i)


        def pivot_for_clause(self):
            return self.getTypedRuleContext(HanaParser.Pivot_for_clauseContext,0)


        def pivot_in_clause(self):
            return self.getTypedRuleContext(HanaParser.Pivot_in_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def XML(self):
            return self.getToken(HanaParser.XML, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_clause" ):
                return visitor.visitPivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_clause(self):

        localctx = HanaParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_pivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2899
            self.match(HanaParser.PIVOT)
            self.state = 2901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448:
                self.state = 2900
                self.match(HanaParser.XML)


            self.state = 2903
            self.match(HanaParser.LEFT_PAREN)
            self.state = 2904
            self.pivot_element()
            self.state = 2909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 2905
                self.match(HanaParser.COMMA)
                self.state = 2906
                self.pivot_element()
                self.state = 2911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2912
            self.pivot_for_clause()
            self.state = 2913
            self.pivot_in_clause()
            self.state = 2914
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function_name(self):
            return self.getTypedRuleContext(HanaParser.Aggregate_function_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def column_alias(self):
            return self.getTypedRuleContext(HanaParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_pivot_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_element" ):
                listener.enterPivot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_element" ):
                listener.exitPivot_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_element" ):
                return visitor.visitPivot_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_element(self):

        localctx = HanaParser.Pivot_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_pivot_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2916
            self.aggregate_function_name()
            self.state = 2917
            self.match(HanaParser.LEFT_PAREN)
            self.state = 2918
            self.expression()
            self.state = 2919
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 2921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774055452928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                self.state = 2920
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_pivot_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_clause" ):
                listener.enterPivot_for_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_clause" ):
                listener.exitPivot_for_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_for_clause" ):
                return visitor.visitPivot_for_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_for_clause(self):

        localctx = HanaParser.Pivot_for_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_pivot_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            self.match(HanaParser.FOR)
            self.state = 2936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2924
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 2925
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2926
                self.column_name()
                self.state = 2931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2927
                    self.match(HanaParser.COMMA)
                    self.state = 2928
                    self.column_name()
                    self.state = 2933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2934
                self.match(HanaParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.ANY)
            else:
                return self.getToken(HanaParser.ANY, i)

        def pivot_in_clause_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Pivot_in_clause_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Pivot_in_clause_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_pivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause" ):
                listener.enterPivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause" ):
                listener.exitPivot_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause" ):
                return visitor.visitPivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause(self):

        localctx = HanaParser.Pivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_pivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2938
            self.match(HanaParser.IN)
            self.state = 2939
            self.match(HanaParser.LEFT_PAREN)
            self.state = 2957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2940
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 2941
                self.match(HanaParser.ANY)
                self.state = 2946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2942
                    self.match(HanaParser.COMMA)
                    self.state = 2943
                    self.match(HanaParser.ANY)
                    self.state = 2948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2949
                self.pivot_in_clause_element()
                self.state = 2954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2950
                    self.match(HanaParser.COMMA)
                    self.state = 2951
                    self.pivot_in_clause_element()
                    self.state = 2956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2959
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clause_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_in_clause_elements(self):
            return self.getTypedRuleContext(HanaParser.Pivot_in_clause_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(HanaParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_pivot_in_clause_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_element" ):
                listener.enterPivot_in_clause_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_element" ):
                listener.exitPivot_in_clause_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_element" ):
                return visitor.visitPivot_in_clause_element(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_element(self):

        localctx = HanaParser.Pivot_in_clause_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_pivot_in_clause_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2961
            self.pivot_in_clause_elements()
            self.state = 2963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774055452928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                self.state = 2962
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_in_clause_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_pivot_in_clause_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_elements" ):
                listener.enterPivot_in_clause_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_elements" ):
                listener.exitPivot_in_clause_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivot_in_clause_elements" ):
                return visitor.visitPivot_in_clause_elements(self)
            else:
                return visitor.visitChildren(self)




    def pivot_in_clause_elements(self):

        localctx = HanaParser.Pivot_in_clause_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_pivot_in_clause_elements)
        try:
            self.state = 2967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2965
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2966
                self.expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(HanaParser.UNPIVOT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def pivot_for_clause(self):
            return self.getTypedRuleContext(HanaParser.Pivot_for_clauseContext,0)


        def unpivot_in_clause(self):
            return self.getTypedRuleContext(HanaParser.Unpivot_in_clauseContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def NULLS(self):
            return self.getToken(HanaParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(HanaParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(HanaParser.EXCLUDE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_clause" ):
                return visitor.visitUnpivot_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_clause(self):

        localctx = HanaParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_unpivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2969
            self.match(HanaParser.UNPIVOT)
            self.state = 2972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137 or _la==173:
                self.state = 2970
                _la = self._input.LA(1)
                if not(_la==137 or _la==173):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2971
                self.match(HanaParser.NULLS)


            self.state = 2974
            self.match(HanaParser.LEFT_PAREN)
            self.state = 2987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.state = 2975
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 2976
                self.match(HanaParser.LEFT_PAREN)
                self.state = 2977
                self.column_name()
                self.state = 2982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 2978
                    self.match(HanaParser.COMMA)
                    self.state = 2979
                    self.column_name()
                    self.state = 2984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2985
                self.match(HanaParser.RIGHT_PAREN)
                pass


            self.state = 2989
            self.pivot_for_clause()
            self.state = 2990
            self.unpivot_in_clause()
            self.state = 2991
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_in_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def unpivot_in_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Unpivot_in_elementsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Unpivot_in_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_unpivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_clause" ):
                listener.enterUnpivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_clause" ):
                listener.exitUnpivot_in_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_clause" ):
                return visitor.visitUnpivot_in_clause(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_clause(self):

        localctx = HanaParser.Unpivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_unpivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2993
            self.match(HanaParser.IN)
            self.state = 2994
            self.match(HanaParser.LEFT_PAREN)
            self.state = 2995
            self.unpivot_in_elements()
            self.state = 3000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 2996
                self.match(HanaParser.COMMA)
                self.state = 2997
                self.unpivot_in_elements()
                self.state = 3002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3003
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_in_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ConstantContext)
            else:
                return self.getTypedRuleContext(HanaParser.ConstantContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_unpivot_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_elements" ):
                listener.enterUnpivot_in_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_elements" ):
                listener.exitUnpivot_in_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnpivot_in_elements" ):
                return visitor.visitUnpivot_in_elements(self)
            else:
                return visitor.visitChildren(self)




    def unpivot_in_elements(self):

        localctx = HanaParser.Unpivot_in_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_unpivot_in_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.state = 3005
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 3006
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3007
                self.column_name()
                self.state = 3012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 3008
                    self.match(HanaParser.COMMA)
                    self.state = 3009
                    self.column_name()
                    self.state = 3014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3015
                self.match(HanaParser.RIGHT_PAREN)
                pass


            self.state = 3034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 3019
                self.match(HanaParser.AS)
                self.state = 3032
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [95, 98, 106, 146, 191, 224, 230, 260, 353, 394, 410, 518, 523, 524, 525]:
                    self.state = 3020
                    self.constant()
                    pass
                elif token in [529]:
                    self.state = 3021
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 3022
                    self.constant()
                    self.state = 3027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==535:
                        self.state = 3023
                        self.match(HanaParser.COMMA)
                        self.state = 3024
                        self.constant()
                        self.state = 3029
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3030
                    self.match(HanaParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hierarchical_query_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(HanaParser.CONNECT, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def NOCYCLE(self):
            return self.getToken(HanaParser.NOCYCLE, 0)

        def start_part(self):
            return self.getTypedRuleContext(HanaParser.Start_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_hierarchical_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchical_query_clause" ):
                listener.enterHierarchical_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchical_query_clause" ):
                listener.exitHierarchical_query_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHierarchical_query_clause" ):
                return visitor.visitHierarchical_query_clause(self)
            else:
                return visitor.visitChildren(self)




    def hierarchical_query_clause(self):

        localctx = HanaParser.Hierarchical_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_hierarchical_query_clause)
        try:
            self.state = 3053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3036
                self.match(HanaParser.CONNECT)
                self.state = 3037
                self.match(HanaParser.BY)
                self.state = 3039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 3038
                    self.match(HanaParser.NOCYCLE)


                self.state = 3041
                self.condition()
                self.state = 3043
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 3042
                    self.start_part()


                pass
            elif token in [377]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3045
                self.start_part()
                self.state = 3046
                self.match(HanaParser.CONNECT)
                self.state = 3047
                self.match(HanaParser.BY)
                self.state = 3049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 3048
                    self.match(HanaParser.NOCYCLE)


                self.state = 3051
                self.condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(HanaParser.START, 0)

        def WITH(self):
            return self.getToken(HanaParser.WITH, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_start_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_part" ):
                listener.enterStart_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_part" ):
                listener.exitStart_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart_part" ):
                return visitor.visitStart_part(self)
            else:
                return visitor.visitChildren(self)




    def start_part(self):

        localctx = HanaParser.Start_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_start_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3055
            self.match(HanaParser.START)
            self.state = 3056
            self.match(HanaParser.WITH)
            self.state = 3057
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HanaParser.GROUP, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def group_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Group_by_elementsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Group_by_elementsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def having_clause(self):
            return self.getTypedRuleContext(HanaParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = HanaParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_group_by_clause)
        try:
            self.state = 3085
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [162]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3059
                self.match(HanaParser.GROUP)
                self.state = 3060
                self.match(HanaParser.BY)
                self.state = 3061
                self.group_by_elements()
                self.state = 3066
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3062
                        self.match(HanaParser.COMMA)
                        self.state = 3063
                        self.group_by_elements() 
                    self.state = 3068
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

                self.state = 3070
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 3069
                    self.having_clause()


                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3072
                self.having_clause()
                self.state = 3083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 3073
                    self.match(HanaParser.GROUP)
                    self.state = 3074
                    self.match(HanaParser.BY)
                    self.state = 3075
                    self.group_by_elements()
                    self.state = 3080
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3076
                            self.match(HanaParser.COMMA)
                            self.state = 3077
                            self.group_by_elements() 
                        self.state = 3082
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,334,self._ctx)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_clause(self):
            return self.getTypedRuleContext(HanaParser.Grouping_sets_clauseContext,0)


        def rollup_cube_clause(self):
            return self.getTypedRuleContext(HanaParser.Rollup_cube_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_group_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_elements" ):
                listener.enterGroup_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_elements" ):
                listener.exitGroup_by_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_elements" ):
                return visitor.visitGroup_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def group_by_elements(self):

        localctx = HanaParser.Group_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_group_by_elements)
        try:
            self.state = 3090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3087
                self.grouping_sets_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3088
                self.rollup_cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3089
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_cube_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Grouping_sets_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def ROLLUP(self):
            return self.getToken(HanaParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(HanaParser.CUBE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_rollup_cube_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_cube_clause" ):
                listener.enterRollup_cube_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_cube_clause" ):
                listener.exitRollup_cube_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup_cube_clause" ):
                return visitor.visitRollup_cube_clause(self)
            else:
                return visitor.visitChildren(self)




    def rollup_cube_clause(self):

        localctx = HanaParser.Rollup_cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_rollup_cube_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3092
            _la = self._input.LA(1)
            if not(_la==87 or _la==329):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3093
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3094
            self.grouping_sets_elements()
            self.state = 3099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3095
                self.match(HanaParser.COMMA)
                self.state = 3096
                self.grouping_sets_elements()
                self.state = 3101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3102
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(HanaParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(HanaParser.SETS, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Grouping_sets_elementsContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_grouping_sets_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_clause" ):
                listener.enterGrouping_sets_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_clause" ):
                listener.exitGrouping_sets_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_clause" ):
                return visitor.visitGrouping_sets_clause(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_clause(self):

        localctx = HanaParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_grouping_sets_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3104
            self.match(HanaParser.GROUPING)
            self.state = 3105
            self.match(HanaParser.SETS)
            self.state = 3106
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3107
            self.grouping_sets_elements()
            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3108
                self.match(HanaParser.COMMA)
                self.state = 3109
                self.grouping_sets_elements()
                self.state = 3114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3115
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollup_cube_clause(self):
            return self.getTypedRuleContext(HanaParser.Rollup_cube_clauseContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_grouping_sets_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_elements" ):
                listener.enterGrouping_sets_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_elements" ):
                listener.exitGrouping_sets_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_sets_elements" ):
                return visitor.visitGrouping_sets_elements(self)
            else:
                return visitor.visitChildren(self)




    def grouping_sets_elements(self):

        localctx = HanaParser.Grouping_sets_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_grouping_sets_elements)
        try:
            self.state = 3120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3117
                self.rollup_cube_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3118
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3119
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HanaParser.HAVING, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHaving_clause" ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = HanaParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3122
            self.match(HanaParser.HAVING)
            self.state = 3123
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODEL(self):
            return self.getToken(HanaParser.MODEL, 0)

        def main_model(self):
            return self.getTypedRuleContext(HanaParser.Main_modelContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Cell_reference_optionsContext,i)


        def return_rows_clause(self):
            return self.getTypedRuleContext(HanaParser.Return_rows_clauseContext,0)


        def reference_model(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Reference_modelContext)
            else:
                return self.getTypedRuleContext(HanaParser.Reference_modelContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_model_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_clause" ):
                listener.enterModel_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_clause" ):
                listener.exitModel_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_clause" ):
                return visitor.visitModel_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_clause(self):

        localctx = HanaParser.Model_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_model_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3125
            self.match(HanaParser.MODEL)
            self.state = 3129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==170 or _la==200 or _la==416:
                self.state = 3126
                self.cell_reference_options()
                self.state = 3131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322:
                self.state = 3132
                self.return_rows_clause()


            self.state = 3138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==312:
                self.state = 3135
                self.reference_model()
                self.state = 3140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3141
            self.main_model()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cell_reference_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAV(self):
            return self.getToken(HanaParser.NAV, 0)

        def IGNORE(self):
            return self.getToken(HanaParser.IGNORE, 0)

        def KEEP(self):
            return self.getToken(HanaParser.KEEP, 0)

        def UNIQUE(self):
            return self.getToken(HanaParser.UNIQUE, 0)

        def DIMENSION(self):
            return self.getToken(HanaParser.DIMENSION, 0)

        def SINGLE(self):
            return self.getToken(HanaParser.SINGLE, 0)

        def REFERENCE(self):
            return self.getToken(HanaParser.REFERENCE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_cell_reference_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_reference_options" ):
                listener.enterCell_reference_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_reference_options" ):
                listener.exitCell_reference_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_reference_options" ):
                return visitor.visitCell_reference_options(self)
            else:
                return visitor.visitChildren(self)




    def cell_reference_options(self):

        localctx = HanaParser.Cell_reference_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_cell_reference_options)
        self._la = 0 # Token type
        try:
            self.state = 3151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [170, 200]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3143
                _la = self._input.LA(1)
                if not(_la==170 or _la==200):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3144
                self.match(HanaParser.NAV)
                pass
            elif token in [416]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3145
                self.match(HanaParser.UNIQUE)
                self.state = 3149
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [114]:
                    self.state = 3146
                    self.match(HanaParser.DIMENSION)
                    pass
                elif token in [363]:
                    self.state = 3147
                    self.match(HanaParser.SINGLE)
                    self.state = 3148
                    self.match(HanaParser.REFERENCE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_rows_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def ROWS(self):
            return self.getToken(HanaParser.ROWS, 0)

        def UPDATED(self):
            return self.getToken(HanaParser.UPDATED, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_return_rows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_rows_clause" ):
                listener.enterReturn_rows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_rows_clause" ):
                listener.exitReturn_rows_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_rows_clause" ):
                return visitor.visitReturn_rows_clause(self)
            else:
                return visitor.visitChildren(self)




    def return_rows_clause(self):

        localctx = HanaParser.Return_rows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_return_rows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3153
            self.match(HanaParser.RETURN)
            self.state = 3154
            _la = self._input.LA(1)
            if not(_la==13 or _la==421):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3155
            self.match(HanaParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_modelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(HanaParser.REFERENCE, 0)

        def reference_model_name(self):
            return self.getTypedRuleContext(HanaParser.Reference_model_nameContext,0)


        def ON(self):
            return self.getToken(HanaParser.ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def model_column_clauses(self):
            return self.getTypedRuleContext(HanaParser.Model_column_clausesContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_reference_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model" ):
                listener.enterReference_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model" ):
                listener.exitReference_model(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model" ):
                return visitor.visitReference_model(self)
            else:
                return visitor.visitChildren(self)




    def reference_model(self):

        localctx = HanaParser.Reference_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_reference_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3157
            self.match(HanaParser.REFERENCE)
            self.state = 3158
            self.reference_model_name()
            self.state = 3159
            self.match(HanaParser.ON)
            self.state = 3160
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3161
            self.subquery()
            self.state = 3162
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 3163
            self.model_column_clauses()
            self.state = 3167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==170 or _la==200 or _la==416:
                self.state = 3164
                self.cell_reference_options()
                self.state = 3169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_modelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column_clauses(self):
            return self.getTypedRuleContext(HanaParser.Model_column_clausesContext,0)


        def model_rules_clause(self):
            return self.getTypedRuleContext(HanaParser.Model_rules_clauseContext,0)


        def MAIN(self):
            return self.getToken(HanaParser.MAIN, 0)

        def main_model_name(self):
            return self.getTypedRuleContext(HanaParser.Main_model_nameContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_main_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model" ):
                listener.enterMain_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model" ):
                listener.exitMain_model(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model" ):
                return visitor.visitMain_model(self)
            else:
                return visitor.visitChildren(self)




    def main_model(self):

        localctx = HanaParser.Main_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_main_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 3170
                self.match(HanaParser.MAIN)
                self.state = 3171
                self.main_model_name()


            self.state = 3174
            self.model_column_clauses()
            self.state = 3178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==170 or _la==200 or _la==416:
                self.state = 3175
                self.cell_reference_options()
                self.state = 3180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3181
            self.model_rules_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIMENSION(self):
            return self.getToken(HanaParser.DIMENSION, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def model_column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Model_column_listContext)
            else:
                return self.getTypedRuleContext(HanaParser.Model_column_listContext,i)


        def MEASURES(self):
            return self.getToken(HanaParser.MEASURES, 0)

        def model_column_partition_part(self):
            return self.getTypedRuleContext(HanaParser.Model_column_partition_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_model_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_clauses" ):
                listener.enterModel_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_clauses" ):
                listener.exitModel_column_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_clauses" ):
                return visitor.visitModel_column_clauses(self)
            else:
                return visitor.visitChildren(self)




    def model_column_clauses(self):

        localctx = HanaParser.Model_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_model_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==287:
                self.state = 3183
                self.model_column_partition_part()


            self.state = 3186
            self.match(HanaParser.DIMENSION)
            self.state = 3187
            self.match(HanaParser.BY)
            self.state = 3188
            self.model_column_list()
            self.state = 3189
            self.match(HanaParser.MEASURES)
            self.state = 3190
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_partition_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HanaParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def model_column_list(self):
            return self.getTypedRuleContext(HanaParser.Model_column_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_model_column_partition_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_partition_part" ):
                listener.enterModel_column_partition_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_partition_part" ):
                listener.exitModel_column_partition_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_partition_part" ):
                return visitor.visitModel_column_partition_part(self)
            else:
                return visitor.visitChildren(self)




    def model_column_partition_part(self):

        localctx = HanaParser.Model_column_partition_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_model_column_partition_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3192
            self.match(HanaParser.PARTITION)
            self.state = 3193
            self.match(HanaParser.BY)
            self.state = 3194
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def model_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Model_columnContext)
            else:
                return self.getTypedRuleContext(HanaParser.Model_columnContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_model_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_list" ):
                listener.enterModel_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_list" ):
                listener.exitModel_column_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column_list" ):
                return visitor.visitModel_column_list(self)
            else:
                return visitor.visitChildren(self)




    def model_column_list(self):

        localctx = HanaParser.Model_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_model_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3196
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3197
            self.model_column()
            self.state = 3202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3198
                self.match(HanaParser.COMMA)
                self.state = 3199
                self.model_column()
                self.state = 3204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3205
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(HanaParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_model_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column" ):
                listener.enterModel_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column" ):
                listener.exitModel_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_column" ):
                return visitor.visitModel_column(self)
            else:
                return visitor.visitChildren(self)




    def model_column(self):

        localctx = HanaParser.Model_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_model_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3207
            self.expression()
            self.state = 3209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                self.state = 3208
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def model_rules_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Model_rules_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Model_rules_elementContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def model_rules_part(self):
            return self.getTypedRuleContext(HanaParser.Model_rules_partContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_model_rules_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_clause" ):
                listener.enterModel_rules_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_clause" ):
                listener.exitModel_rules_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_clause" ):
                return visitor.visitModel_rules_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_clause(self):

        localctx = HanaParser.Model_rules_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_model_rules_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==333:
                self.state = 3211
                self.model_rules_part()


            self.state = 3214
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3215
            self.model_rules_element()
            self.state = 3220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3216
                self.match(HanaParser.COMMA)
                self.state = 3217
                self.model_rules_element()
                self.state = 3222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3223
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULES(self):
            return self.getToken(HanaParser.RULES, 0)

        def UPDATE(self):
            return self.getToken(HanaParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(HanaParser.UPSERT, 0)

        def ORDER(self):
            return self.getToken(HanaParser.ORDER, 0)

        def model_iterate_clause(self):
            return self.getTypedRuleContext(HanaParser.Model_iterate_clauseContext,0)


        def AUTOMATIC(self):
            return self.getToken(HanaParser.AUTOMATIC, 0)

        def SEQUENTIAL(self):
            return self.getToken(HanaParser.SEQUENTIAL, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_model_rules_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_part" ):
                listener.enterModel_rules_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_part" ):
                listener.exitModel_rules_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_part" ):
                return visitor.visitModel_rules_part(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_part(self):

        localctx = HanaParser.Model_rules_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_model_rules_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3225
            self.match(HanaParser.RULES)
            self.state = 3231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [420]:
                self.state = 3226
                self.match(HanaParser.UPDATE)
                pass
            elif token in [422]:
                self.state = 3227
                self.match(HanaParser.UPSERT)
                self.state = 3229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 3228
                    self.match(HanaParser.ALL)


                pass
            elif token in [28, 197, 349, 529]:
                pass
            else:
                pass
            self.state = 3235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28 or _la==349:
                self.state = 3233
                _la = self._input.LA(1)
                if not(_la==28 or _la==349):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3234
                self.match(HanaParser.ORDER)


            self.state = 3238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==197:
                self.state = 3237
                self.model_iterate_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_rules_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cell_assignment(self):
            return self.getTypedRuleContext(HanaParser.Cell_assignmentContext,0)


        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def UPDATE(self):
            return self.getToken(HanaParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(HanaParser.UPSERT, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(HanaParser.Order_by_clauseContext,0)


        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_model_rules_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_element" ):
                listener.enterModel_rules_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_element" ):
                listener.exitModel_rules_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_rules_element" ):
                return visitor.visitModel_rules_element(self)
            else:
                return visitor.visitChildren(self)




    def model_rules_element(self):

        localctx = HanaParser.Model_rules_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_model_rules_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 3240
                self.match(HanaParser.UPDATE)

            elif la_ == 2:
                self.state = 3241
                self.match(HanaParser.UPSERT)
                self.state = 3243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 3242
                    self.match(HanaParser.ALL)




            self.state = 3247
            self.cell_assignment()
            self.state = 3249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==276:
                self.state = 3248
                self.order_by_clause()


            self.state = 3251
            self.match(HanaParser.EQUALS_OP)
            self.state = 3252
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cell_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(HanaParser.Model_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_cell_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_assignment" ):
                listener.enterCell_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_assignment" ):
                listener.exitCell_assignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCell_assignment" ):
                return visitor.visitCell_assignment(self)
            else:
                return visitor.visitChildren(self)




    def cell_assignment(self):

        localctx = HanaParser.Cell_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_cell_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3254
            self.model_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_iterate_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(HanaParser.ITERATE, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def until_part(self):
            return self.getTypedRuleContext(HanaParser.Until_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_model_iterate_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_iterate_clause" ):
                listener.enterModel_iterate_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_iterate_clause" ):
                listener.exitModel_iterate_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_iterate_clause" ):
                return visitor.visitModel_iterate_clause(self)
            else:
                return visitor.visitChildren(self)




    def model_iterate_clause(self):

        localctx = HanaParser.Model_iterate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_model_iterate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3256
            self.match(HanaParser.ITERATE)
            self.state = 3257
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3258
            self.expression()
            self.state = 3259
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 3261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==419:
                self.state = 3260
                self.until_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Until_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(HanaParser.UNTIL, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_until_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_part" ):
                listener.enterUntil_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_part" ):
                listener.exitUntil_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntil_part" ):
                return visitor.visitUntil_part(self)
            else:
                return visitor.visitChildren(self)




    def until_part(self):

        localctx = HanaParser.Until_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_until_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3263
            self.match(HanaParser.UNTIL)
            self.state = 3264
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3265
            self.condition()
            self.state = 3266
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HanaParser.ORDER, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def order_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Order_by_elementsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Order_by_elementsContext,i)


        def SIBLINGS(self):
            return self.getToken(HanaParser.SIBLINGS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = HanaParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3268
            self.match(HanaParser.ORDER)
            self.state = 3270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==360:
                self.state = 3269
                self.match(HanaParser.SIBLINGS)


            self.state = 3272
            self.match(HanaParser.BY)
            self.state = 3273
            self.order_by_elements()
            self.state = 3278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3274
                self.match(HanaParser.COMMA)
                self.state = 3275
                self.order_by_elements()
                self.state = 3280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(HanaParser.NULLS, 0)

        def ASC(self):
            return self.getToken(HanaParser.ASC, 0)

        def DESC(self):
            return self.getToken(HanaParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HanaParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HanaParser.LAST, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_order_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_elements" ):
                listener.enterOrder_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_elements" ):
                listener.exitOrder_by_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_elements" ):
                return visitor.visitOrder_by_elements(self)
            else:
                return visitor.visitChildren(self)




    def order_by_elements(self):

        localctx = HanaParser.Order_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_order_by_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3281
            self.expression()
            self.state = 3283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==112:
                self.state = 3282
                _la = self._input.LA(1)
                if not(_la==21 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 3285
                self.match(HanaParser.NULLS)
                self.state = 3286
                _la = self._input.LA(1)
                if not(_la==149 or _la==202):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(HanaParser.UPDATE, 0)

        def for_update_of_part(self):
            return self.getTypedRuleContext(HanaParser.For_update_of_partContext,0)


        def for_update_options(self):
            return self.getTypedRuleContext(HanaParser.For_update_optionsContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_for_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_clause" ):
                listener.enterFor_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_clause" ):
                listener.exitFor_update_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_clause" ):
                return visitor.visitFor_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_update_clause(self):

        localctx = HanaParser.For_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_for_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3289
            self.match(HanaParser.FOR)
            self.state = 3290
            self.match(HanaParser.UPDATE)
            self.state = 3292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==266:
                self.state = 3291
                self.for_update_of_part()


            self.state = 3295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==259 or _la==365 or _la==437:
                self.state = 3294
                self.for_update_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_of_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(HanaParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_for_update_of_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_of_part" ):
                listener.enterFor_update_of_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_of_part" ):
                listener.exitFor_update_of_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_of_part" ):
                return visitor.visitFor_update_of_part(self)
            else:
                return visitor.visitChildren(self)




    def for_update_of_part(self):

        localctx = HanaParser.For_update_of_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_for_update_of_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3297
            self.match(HanaParser.OF)
            self.state = 3298
            self.column_name()
            self.state = 3303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3299
                self.match(HanaParser.COMMA)
                self.state = 3300
                self.column_name()
                self.state = 3305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_update_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(HanaParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(HanaParser.LOCKED, 0)

        def NOWAIT(self):
            return self.getToken(HanaParser.NOWAIT, 0)

        def WAIT(self):
            return self.getToken(HanaParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_for_update_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_options" ):
                listener.enterFor_update_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_options" ):
                listener.exitFor_update_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_update_options" ):
                return visitor.visitFor_update_options(self)
            else:
                return visitor.visitChildren(self)




    def for_update_options(self):

        localctx = HanaParser.For_update_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_for_update_options)
        try:
            self.state = 3311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [365]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3306
                self.match(HanaParser.SKIP_)
                self.state = 3307
                self.match(HanaParser.LOCKED)
                pass
            elif token in [259]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3308
                self.match(HanaParser.NOWAIT)
                pass
            elif token in [437]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3309
                self.match(HanaParser.WAIT)
                self.state = 3310
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(HanaParser.UPDATE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(HanaParser.General_table_refContext,0)


        def update_set_clause(self):
            return self.getTypedRuleContext(HanaParser.Update_set_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(HanaParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(HanaParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(HanaParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = HanaParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3313
            self.match(HanaParser.UPDATE)
            self.state = 3314
            self.general_table_ref()
            self.state = 3315
            self.update_set_clause()
            self.state = 3317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==442:
                self.state = 3316
                self.where_clause()


            self.state = 3320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322 or _la==323:
                self.state = 3319
                self.static_returning_clause()


            self.state = 3323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==216:
                self.state = 3322
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_set_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def column_based_update_set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_based_update_set_clauseContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_based_update_set_clauseContext,i)


        def VALUE(self):
            return self.getToken(HanaParser.VALUE, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_set_clause" ):
                listener.enterUpdate_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_set_clause" ):
                listener.exitUpdate_set_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_set_clause" ):
                return visitor.visitUpdate_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def update_set_clause(self):

        localctx = HanaParser.Update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_update_set_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.match(HanaParser.SET)
            self.state = 3341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.state = 3326
                self.column_based_update_set_clause()
                self.state = 3331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 3327
                    self.match(HanaParser.COMMA)
                    self.state = 3328
                    self.column_based_update_set_clause()
                    self.state = 3333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3334
                self.match(HanaParser.VALUE)
                self.state = 3335
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3336
                self.id_()
                self.state = 3337
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 3338
                self.match(HanaParser.EQUALS_OP)
                self.state = 3339
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_based_update_set_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_column_based_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_based_update_set_clause" ):
                listener.enterColumn_based_update_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_based_update_set_clause" ):
                listener.exitColumn_based_update_set_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_based_update_set_clause" ):
                return visitor.visitColumn_based_update_set_clause(self)
            else:
                return visitor.visitChildren(self)




    def column_based_update_set_clause(self):

        localctx = HanaParser.Column_based_update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_column_based_update_set_clause)
        self._la = 0 # Token type
        try:
            self.state = 3360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3343
                self.column_name()
                self.state = 3344
                self.match(HanaParser.EQUALS_OP)
                self.state = 3345
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3347
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3348
                self.column_name()
                self.state = 3353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 3349
                    self.match(HanaParser.COMMA)
                    self.state = 3350
                    self.column_name()
                    self.state = 3355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3356
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 3357
                self.match(HanaParser.EQUALS_OP)
                self.state = 3358
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(HanaParser.DELETE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(HanaParser.General_table_refContext,0)


        def FROM(self):
            return self.getToken(HanaParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(HanaParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(HanaParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(HanaParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = HanaParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3362
            self.match(HanaParser.DELETE)
            self.state = 3364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 3363
                self.match(HanaParser.FROM)


            self.state = 3366
            self.general_table_ref()
            self.state = 3368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==442:
                self.state = 3367
                self.where_clause()


            self.state = 3371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==322 or _la==323:
                self.state = 3370
                self.static_returning_clause()


            self.state = 3374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==216:
                self.state = 3373
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(HanaParser.INSERT, 0)

        def single_table_insert(self):
            return self.getTypedRuleContext(HanaParser.Single_table_insertContext,0)


        def multi_table_insert(self):
            return self.getTypedRuleContext(HanaParser.Multi_table_insertContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = HanaParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_insert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3376
            self.match(HanaParser.INSERT)
            self.state = 3379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.state = 3377
                self.single_table_insert()
                pass
            elif token in [13, 149, 440]:
                self.state = 3378
                self.multi_table_insert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(HanaParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_statement" ):
                return visitor.visitDeclare_statement(self)
            else:
                return visitor.visitChildren(self)




    def declare_statement(self):

        localctx = HanaParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3381
            self.match(HanaParser.DECLARE)
            self.state = 3382
            self.id_()
            self.state = 3384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 3383
                self.type_spec()


            self.state = 3387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==538:
                self.state = 3386
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(HanaParser.DECLARE, 0)

        def EXIT(self):
            return self.getToken(HanaParser.EXIT, 0)

        def HANDLER(self):
            return self.getToken(HanaParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def proc_condition_value(self):
            return self.getTypedRuleContext(HanaParser.Proc_condition_valueContext,0)


        def data_manipulation_language_statements(self):
            return self.getTypedRuleContext(HanaParser.Data_manipulation_language_statementsContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_exception_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_statement" ):
                listener.enterException_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_statement" ):
                listener.exitException_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_statement" ):
                return visitor.visitException_statement(self)
            else:
                return visitor.visitChildren(self)




    def exception_statement(self):

        localctx = HanaParser.Exception_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_exception_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3389
            self.match(HanaParser.DECLARE)
            self.state = 3390
            self.match(HanaParser.EXIT)
            self.state = 3391
            self.match(HanaParser.HANDLER)
            self.state = 3392
            self.match(HanaParser.FOR)
            self.state = 3393
            self.proc_condition_value()
            self.state = 3394
            self.data_manipulation_language_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_condition_value_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQLEXCEPTION(self):
            return self.getToken(HanaParser.SQLEXCEPTION, 0)

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_proc_condition_value_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_condition_value_" ):
                listener.enterProc_condition_value_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_condition_value_" ):
                listener.exitProc_condition_value_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_condition_value_" ):
                return visitor.visitProc_condition_value_(self)
            else:
                return visitor.visitChildren(self)




    def proc_condition_value_(self):

        localctx = HanaParser.Proc_condition_value_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_proc_condition_value_)
        try:
            self.state = 3398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [374]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3396
                self.match(HanaParser.SQLEXCEPTION)
                pass
            elif token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3397
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_table_insertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(HanaParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(HanaParser.Values_clauseContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(HanaParser.Error_logging_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(HanaParser.Static_returning_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_single_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table_insert" ):
                listener.enterSingle_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table_insert" ):
                listener.exitSingle_table_insert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_table_insert" ):
                return visitor.visitSingle_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def single_table_insert(self):

        localctx = HanaParser.Single_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_single_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3400
            self.insert_into_clause()
            self.state = 3406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [428]:
                self.state = 3401
                self.values_clause()
                self.state = 3403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==322 or _la==323:
                    self.state = 3402
                    self.static_returning_clause()


                pass
            elif token in [346, 444, 529]:
                self.state = 3405
                self.select_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==216:
                self.state = 3408
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_table_insertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def conditional_insert_clause(self):
            return self.getTypedRuleContext(HanaParser.Conditional_insert_clauseContext,0)


        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_multi_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_insert" ):
                listener.enterMulti_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_insert" ):
                listener.exitMulti_table_insert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_insert" ):
                return visitor.visitMulti_table_insert(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_insert(self):

        localctx = HanaParser.Multi_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_multi_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.state = 3411
                self.match(HanaParser.ALL)
                self.state = 3413 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3412
                    self.multi_table_element()
                    self.state = 3415 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==192):
                        break

                pass

            elif la_ == 2:
                self.state = 3417
                self.conditional_insert_clause()
                pass


            self.state = 3420
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_table_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(HanaParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(HanaParser.Values_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(HanaParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_multi_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_element" ):
                listener.enterMulti_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_element" ):
                listener.exitMulti_table_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_table_element" ):
                return visitor.visitMulti_table_element(self)
            else:
                return visitor.visitChildren(self)




    def multi_table_element(self):

        localctx = HanaParser.Multi_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_multi_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3422
            self.insert_into_clause()
            self.state = 3424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==428:
                self.state = 3423
                self.values_clause()


            self.state = 3427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==216:
                self.state = 3426
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_insert_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Conditional_insert_when_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Conditional_insert_when_partContext,i)


        def conditional_insert_else_part(self):
            return self.getTypedRuleContext(HanaParser.Conditional_insert_else_partContext,0)


        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def FIRST(self):
            return self.getToken(HanaParser.FIRST, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_conditional_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_clause" ):
                listener.enterConditional_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_clause" ):
                listener.exitConditional_insert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_clause" ):
                return visitor.visitConditional_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_clause(self):

        localctx = HanaParser.Conditional_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_conditional_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==149:
                self.state = 3429
                _la = self._input.LA(1)
                if not(_la==13 or _la==149):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3433 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3432
                self.conditional_insert_when_part()
                self.state = 3435 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==440):
                    break

            self.state = 3438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 3437
                self.conditional_insert_else_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_when_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(HanaParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_conditional_insert_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_when_part" ):
                listener.enterConditional_insert_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_when_part" ):
                listener.exitConditional_insert_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_when_part" ):
                return visitor.visitConditional_insert_when_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_when_part(self):

        localctx = HanaParser.Conditional_insert_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_conditional_insert_when_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3440
            self.match(HanaParser.WHEN)
            self.state = 3441
            self.condition()
            self.state = 3442
            self.match(HanaParser.THEN)
            self.state = 3444 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3443
                self.multi_table_element()
                self.state = 3446 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==192):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_insert_else_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(HanaParser.ELSE, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_conditional_insert_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_else_part" ):
                listener.enterConditional_insert_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_else_part" ):
                listener.exitConditional_insert_else_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional_insert_else_part" ):
                return visitor.visitConditional_insert_else_part(self)
            else:
                return visitor.visitChildren(self)




    def conditional_insert_else_part(self):

        localctx = HanaParser.Conditional_insert_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_conditional_insert_else_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3448
            self.match(HanaParser.ELSE)
            self.state = 3450 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3449
                self.multi_table_element()
                self.state = 3452 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==192):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(HanaParser.INTO, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(HanaParser.General_table_refContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_insert_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_into_clause" ):
                listener.enterInsert_into_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_into_clause" ):
                listener.exitInsert_into_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_into_clause" ):
                return visitor.visitInsert_into_clause(self)
            else:
                return visitor.visitChildren(self)




    def insert_into_clause(self):

        localctx = HanaParser.Insert_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_insert_into_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3454
            self.match(HanaParser.INTO)
            self.state = 3455
            self.general_table_ref()
            self.state = 3467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.state = 3456
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3457
                self.column_name()
                self.state = 3462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 3458
                    self.match(HanaParser.COMMA)
                    self.state = 3459
                    self.column_name()
                    self.state = 3464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3465
                self.match(HanaParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(HanaParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValues_clause" ):
                return visitor.visitValues_clause(self)
            else:
                return visitor.visitChildren(self)




    def values_clause(self):

        localctx = HanaParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_values_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3469
            self.match(HanaParser.VALUES)
            self.state = 3470
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(HanaParser.MERGE, 0)

        def INTO(self):
            return self.getToken(HanaParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def USING(self):
            return self.getToken(HanaParser.USING, 0)

        def selected_tableview(self):
            return self.getTypedRuleContext(HanaParser.Selected_tableviewContext,0)


        def ON(self):
            return self.getToken(HanaParser.ON, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(HanaParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(HanaParser.Table_aliasContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(HanaParser.Merge_update_clauseContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(HanaParser.Merge_insert_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(HanaParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_statement" ):
                return visitor.visitMerge_statement(self)
            else:
                return visitor.visitChildren(self)




    def merge_statement(self):

        localctx = HanaParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3472
            self.match(HanaParser.MERGE)
            self.state = 3473
            self.match(HanaParser.INTO)
            self.state = 3474
            self.tableview_name()
            self.state = 3476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                self.state = 3475
                self.table_alias()


            self.state = 3478
            self.match(HanaParser.USING)
            self.state = 3479
            self.selected_tableview()
            self.state = 3480
            self.match(HanaParser.ON)
            self.state = 3481
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3482
            self.condition()
            self.state = 3483
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 3492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.state = 3484
                self.merge_update_clause()
                self.state = 3486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==440:
                    self.state = 3485
                    self.merge_insert_clause()



            elif la_ == 2:
                self.state = 3488
                self.merge_insert_clause()
                self.state = 3490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==440:
                    self.state = 3489
                    self.merge_update_clause()




            self.state = 3495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==216:
                self.state = 3494
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(HanaParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(HanaParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def UPDATE(self):
            return self.getToken(HanaParser.UPDATE, 0)

        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def merge_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Merge_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Merge_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(HanaParser.Where_clauseContext,0)


        def merge_update_delete_part(self):
            return self.getTypedRuleContext(HanaParser.Merge_update_delete_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_merge_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_clause" ):
                listener.enterMerge_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_clause" ):
                listener.exitMerge_update_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_clause" ):
                return visitor.visitMerge_update_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_clause(self):

        localctx = HanaParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3497
            self.match(HanaParser.WHEN)
            self.state = 3498
            self.match(HanaParser.MATCHED)
            self.state = 3499
            self.match(HanaParser.THEN)
            self.state = 3500
            self.match(HanaParser.UPDATE)
            self.state = 3501
            self.match(HanaParser.SET)
            self.state = 3502
            self.merge_element()
            self.state = 3507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3503
                self.match(HanaParser.COMMA)
                self.state = 3504
                self.merge_element()
                self.state = 3509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==442:
                self.state = 3510
                self.where_clause()


            self.state = 3514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 3513
                self.merge_update_delete_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(HanaParser.Column_nameContext,0)


        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_merge_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_element" ):
                listener.enterMerge_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_element" ):
                listener.exitMerge_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_element" ):
                return visitor.visitMerge_element(self)
            else:
                return visitor.visitChildren(self)




    def merge_element(self):

        localctx = HanaParser.Merge_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_merge_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3516
            self.column_name()
            self.state = 3517
            self.match(HanaParser.EQUALS_OP)
            self.state = 3518
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_delete_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(HanaParser.DELETE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(HanaParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_merge_update_delete_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_delete_part" ):
                listener.enterMerge_update_delete_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_delete_part" ):
                listener.exitMerge_update_delete_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_update_delete_part" ):
                return visitor.visitMerge_update_delete_part(self)
            else:
                return visitor.visitChildren(self)




    def merge_update_delete_part(self):

        localctx = HanaParser.Merge_update_delete_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_merge_update_delete_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3520
            self.match(HanaParser.DELETE)
            self.state = 3521
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_insert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(HanaParser.WHEN, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(HanaParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def INSERT(self):
            return self.getToken(HanaParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(HanaParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def where_clause(self):
            return self.getTypedRuleContext(HanaParser.Where_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_merge_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert_clause" ):
                listener.enterMerge_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert_clause" ):
                listener.exitMerge_insert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_insert_clause" ):
                return visitor.visitMerge_insert_clause(self)
            else:
                return visitor.visitChildren(self)




    def merge_insert_clause(self):

        localctx = HanaParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3523
            self.match(HanaParser.WHEN)
            self.state = 3524
            self.match(HanaParser.NOT)
            self.state = 3525
            self.match(HanaParser.MATCHED)
            self.state = 3526
            self.match(HanaParser.THEN)
            self.state = 3527
            self.match(HanaParser.INSERT)
            self.state = 3539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529:
                self.state = 3528
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3529
                self.column_name()
                self.state = 3534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 3530
                    self.match(HanaParser.COMMA)
                    self.state = 3531
                    self.column_name()
                    self.state = 3536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3537
                self.match(HanaParser.RIGHT_PAREN)


            self.state = 3541
            self.match(HanaParser.VALUES)
            self.state = 3542
            self.expression_list()
            self.state = 3544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==442:
                self.state = 3543
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_tableviewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(HanaParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_selected_tableview

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_tableview" ):
                listener.enterSelected_tableview(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_tableview" ):
                listener.exitSelected_tableview(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelected_tableview" ):
                return visitor.visitSelected_tableview(self)
            else:
                return visitor.visitChildren(self)




    def selected_tableview(self):

        localctx = HanaParser.Selected_tableviewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_selected_tableview)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.state = 3546
                self.tableview_name()
                pass
            elif token in [529]:
                self.state = 3547
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3548
                self.select_statement()
                self.state = 3549
                self.match(HanaParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                self.state = 3553
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_table_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(HanaParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(HanaParser.TABLE, 0)

        def lock_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Lock_table_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Lock_table_elementContext,i)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def lock_mode(self):
            return self.getTypedRuleContext(HanaParser.Lock_modeContext,0)


        def MODE(self):
            return self.getToken(HanaParser.MODE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def wait_nowait_part(self):
            return self.getTypedRuleContext(HanaParser.Wait_nowait_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_lock_table_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_statement" ):
                listener.enterLock_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_statement" ):
                listener.exitLock_table_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_statement" ):
                return visitor.visitLock_table_statement(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_statement(self):

        localctx = HanaParser.Lock_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_lock_table_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3556
            self.match(HanaParser.LOCK)
            self.state = 3557
            self.match(HanaParser.TABLE)
            self.state = 3558
            self.lock_table_element()
            self.state = 3563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3559
                self.match(HanaParser.COMMA)
                self.state = 3560
                self.lock_table_element()
                self.state = 3565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3566
            self.match(HanaParser.IN)
            self.state = 3567
            self.lock_mode()
            self.state = 3568
            self.match(HanaParser.MODE)
            self.state = 3570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==259 or _la==437:
                self.state = 3569
                self.wait_nowait_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_nowait_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(HanaParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def NOWAIT(self):
            return self.getToken(HanaParser.NOWAIT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_wait_nowait_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_nowait_part" ):
                listener.enterWait_nowait_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_nowait_part" ):
                listener.exitWait_nowait_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWait_nowait_part" ):
                return visitor.visitWait_nowait_part(self)
            else:
                return visitor.visitChildren(self)




    def wait_nowait_part(self):

        localctx = HanaParser.Wait_nowait_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_wait_nowait_part)
        try:
            self.state = 3575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [437]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3572
                self.match(HanaParser.WAIT)
                self.state = 3573
                self.expression()
                pass
            elif token in [259]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3574
                self.match(HanaParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_table_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(HanaParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_lock_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_element" ):
                listener.enterLock_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_element" ):
                listener.exitLock_table_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_table_element" ):
                return visitor.visitLock_table_element(self)
            else:
                return visitor.visitChildren(self)




    def lock_table_element(self):

        localctx = HanaParser.Lock_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_lock_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3577
            self.tableview_name()
            self.state = 3579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==287 or _la==385:
                self.state = 3578
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(HanaParser.ROW, 0)

        def SHARE(self):
            return self.getToken(HanaParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(HanaParser.EXCLUSIVE, 0)

        def UPDATE(self):
            return self.getToken(HanaParser.UPDATE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_lock_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_mode" ):
                listener.enterLock_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_mode" ):
                listener.exitLock_mode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLock_mode" ):
                return visitor.visitLock_mode(self)
            else:
                return visitor.visitChildren(self)




    def lock_mode(self):

        localctx = HanaParser.Lock_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_lock_mode)
        self._la = 0 # Token type
        try:
            self.state = 3593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3581
                self.match(HanaParser.ROW)
                self.state = 3582
                self.match(HanaParser.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3583
                self.match(HanaParser.ROW)
                self.state = 3584
                self.match(HanaParser.EXCLUSIVE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3585
                self.match(HanaParser.SHARE)
                self.state = 3587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==420:
                    self.state = 3586
                    self.match(HanaParser.UPDATE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3589
                self.match(HanaParser.SHARE)
                self.state = 3590
                self.match(HanaParser.ROW)
                self.state = 3591
                self.match(HanaParser.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3592
                self.match(HanaParser.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_table_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(HanaParser.Dml_table_expression_clauseContext,0)


        def ONLY(self):
            return self.getToken(HanaParser.ONLY, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def table_alias(self):
            return self.getTypedRuleContext(HanaParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_general_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_table_ref" ):
                listener.enterGeneral_table_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_table_ref" ):
                listener.exitGeneral_table_ref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_table_ref" ):
                return visitor.visitGeneral_table_ref(self)
            else:
                return visitor.visitChildren(self)




    def general_table_ref(self):

        localctx = HanaParser.General_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_general_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.state = 3595
                self.dml_table_expression_clause()
                pass

            elif la_ == 2:
                self.state = 3596
                self.match(HanaParser.ONLY)
                self.state = 3597
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3598
                self.dml_table_expression_clause()
                self.state = 3599
                self.match(HanaParser.RIGHT_PAREN)
                pass


            self.state = 3604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.state = 3603
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_returning_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(HanaParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(HanaParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_static_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_returning_clause" ):
                listener.enterStatic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_returning_clause" ):
                listener.exitStatic_returning_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_returning_clause" ):
                return visitor.visitStatic_returning_clause(self)
            else:
                return visitor.visitChildren(self)




    def static_returning_clause(self):

        localctx = HanaParser.Static_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_static_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3606
            _la = self._input.LA(1)
            if not(_la==322 or _la==323):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3607
            self.expression()
            self.state = 3612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3608
                self.match(HanaParser.COMMA)
                self.state = 3609
                self.expression()
                self.state = 3614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3615
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(HanaParser.LOG, 0)

        def ERRORS(self):
            return self.getToken(HanaParser.ERRORS, 0)

        def error_logging_into_part(self):
            return self.getTypedRuleContext(HanaParser.Error_logging_into_partContext,0)


        def expression_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,0)


        def error_logging_reject_part(self):
            return self.getTypedRuleContext(HanaParser.Error_logging_reject_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_error_logging_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_clause" ):
                listener.enterError_logging_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_clause" ):
                listener.exitError_logging_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_clause" ):
                return visitor.visitError_logging_clause(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_clause(self):

        localctx = HanaParser.Error_logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_error_logging_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3617
            self.match(HanaParser.LOG)
            self.state = 3618
            self.match(HanaParser.ERRORS)
            self.state = 3620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 3619
                self.error_logging_into_part()


            self.state = 3623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 3622
                self.expression_wrapper()


            self.state = 3626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 3625
                self.error_logging_reject_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_into_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(HanaParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_error_logging_into_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_into_part" ):
                listener.enterError_logging_into_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_into_part" ):
                listener.exitError_logging_into_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_into_part" ):
                return visitor.visitError_logging_into_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_into_part(self):

        localctx = HanaParser.Error_logging_into_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_error_logging_into_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3628
            self.match(HanaParser.INTO)
            self.state = 3629
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_logging_reject_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REJECT(self):
            return self.getToken(HanaParser.REJECT, 0)

        def LIMIT(self):
            return self.getToken(HanaParser.LIMIT, 0)

        def UNLIMITED(self):
            return self.getToken(HanaParser.UNLIMITED, 0)

        def expression_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_error_logging_reject_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_reject_part" ):
                listener.enterError_logging_reject_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_reject_part" ):
                listener.exitError_logging_reject_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_logging_reject_part" ):
                return visitor.visitError_logging_reject_part(self)
            else:
                return visitor.visitChildren(self)




    def error_logging_reject_part(self):

        localctx = HanaParser.Error_logging_reject_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_error_logging_reject_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3631
            self.match(HanaParser.REJECT)
            self.state = 3632
            self.match(HanaParser.LIMIT)
            self.state = 3635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.state = 3633
                self.match(HanaParser.UNLIMITED)
                pass

            elif la_ == 2:
                self.state = 3634
                self.expression_wrapper()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_table_expression_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_collection_expression(self):
            return self.getTypedRuleContext(HanaParser.Table_collection_expressionContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(HanaParser.Select_statementContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(HanaParser.Subquery_restriction_clauseContext,0)


        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def sample_clause(self):
            return self.getTypedRuleContext(HanaParser.Sample_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_dml_table_expression_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_table_expression_clause" ):
                listener.enterDml_table_expression_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_table_expression_clause" ):
                listener.exitDml_table_expression_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_table_expression_clause" ):
                return visitor.visitDml_table_expression_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_table_expression_clause(self):

        localctx = HanaParser.Dml_table_expression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_dml_table_expression_clause)
        self._la = 0 # Token type
        try:
            self.state = 3649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [390, 391]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3637
                self.table_collection_expression()
                pass
            elif token in [529]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3638
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3639
                self.select_statement()
                self.state = 3641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==444:
                    self.state = 3640
                    self.subquery_restriction_clause()


                self.state = 3643
                self.match(HanaParser.RIGHT_PAREN)
                pass
            elif token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3645
                self.tableview_name()
                self.state = 3647
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                if la_ == 1:
                    self.state = 3646
                    self.sample_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_collection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(HanaParser.TABLE, 0)

        def THE(self):
            return self.getToken(HanaParser.THE, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def PLUS_SIGN(self):
            return self.getToken(HanaParser.PLUS_SIGN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_table_collection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_collection_expression" ):
                listener.enterTable_collection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_collection_expression" ):
                listener.exitTable_collection_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_collection_expression" ):
                return visitor.visitTable_collection_expression(self)
            else:
                return visitor.visitChildren(self)




    def table_collection_expression(self):

        localctx = HanaParser.Table_collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_table_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3651
            _la = self._input.LA(1)
            if not(_la==390 or _la==391):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 3652
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3653
                self.subquery()
                self.state = 3654
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 3656
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3657
                self.expression()
                self.state = 3658
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 3662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
                if la_ == 1:
                    self.state = 3659
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 3660
                    self.match(HanaParser.PLUS_SIGN)
                    self.state = 3661
                    self.match(HanaParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_restriction_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HanaParser.WITH, 0)

        def READ(self):
            return self.getToken(HanaParser.READ, 0)

        def ONLY(self):
            return self.getToken(HanaParser.ONLY, 0)

        def CHECK(self):
            return self.getToken(HanaParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(HanaParser.OPTION, 0)

        def CONSTRAINT(self):
            return self.getToken(HanaParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(HanaParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_subquery_restriction_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_restriction_clause" ):
                listener.enterSubquery_restriction_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_restriction_clause" ):
                listener.exitSubquery_restriction_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_restriction_clause" ):
                return visitor.visitSubquery_restriction_clause(self)
            else:
                return visitor.visitChildren(self)




    def subquery_restriction_clause(self):

        localctx = HanaParser.Subquery_restriction_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_subquery_restriction_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3666
            self.match(HanaParser.WITH)
            self.state = 3675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [307]:
                self.state = 3667
                self.match(HanaParser.READ)
                self.state = 3668
                self.match(HanaParser.ONLY)
                pass
            elif token in [58]:
                self.state = 3669
                self.match(HanaParser.CHECK)
                self.state = 3670
                self.match(HanaParser.OPTION)
                self.state = 3673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 3671
                    self.match(HanaParser.CONSTRAINT)
                    self.state = 3672
                    self.constraint_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HanaParser.SAMPLE, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def BLOCK(self):
            return self.getToken(HanaParser.BLOCK, 0)

        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def seed_part(self):
            return self.getTypedRuleContext(HanaParser.Seed_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_clause" ):
                return visitor.visitSample_clause(self)
            else:
                return visitor.visitChildren(self)




    def sample_clause(self):

        localctx = HanaParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3677
            self.match(HanaParser.SAMPLE)
            self.state = 3679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 3678
                self.match(HanaParser.BLOCK)


            self.state = 3681
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3682
            self.expression()
            self.state = 3685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==535:
                self.state = 3683
                self.match(HanaParser.COMMA)
                self.state = 3684
                self.expression()


            self.state = 3687
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 3689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.state = 3688
                self.seed_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Seed_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEED(self):
            return self.getToken(HanaParser.SEED, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_seed_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeed_part" ):
                listener.enterSeed_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeed_part" ):
                listener.exitSeed_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeed_part" ):
                return visitor.visitSeed_part(self)
            else:
                return visitor.visitChildren(self)




    def seed_part(self):

        localctx = HanaParser.Seed_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_seed_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3691
            self.match(HanaParser.SEED)
            self.state = 3692
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3693
            self.expression()
            self.state = 3694
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(HanaParser.CURSOR, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_cursor_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_expression" ):
                listener.enterCursor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_expression" ):
                listener.exitCursor_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_expression" ):
                return visitor.visitCursor_expression(self)
            else:
                return visitor.visitChildren(self)




    def cursor_expression(self):

        localctx = HanaParser.Cursor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_cursor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3696
            self.match(HanaParser.CURSOR)
            self.state = 3697
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3698
            self.subquery()
            self.state = 3699
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = HanaParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3701
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288881574801490048) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3531315238842400897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652101699) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2322263047873029) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866478987870433) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135739419711) != 0):
                self.state = 3702
                self.expression()


            self.state = 3709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3705
                self.match(HanaParser.COMMA)
                self.state = 3706
                self.expression()
                self.state = 3711
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3712
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = HanaParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3714
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_wrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_(self):
            return self.getTypedRuleContext(HanaParser.Condition_Context,0)


        def getRuleIndex(self):
            return HanaParser.RULE_condition_wrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_wrapper" ):
                listener.enterCondition_wrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_wrapper" ):
                listener.exitCondition_wrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_wrapper" ):
                return visitor.visitCondition_wrapper(self)
            else:
                return visitor.visitChildren(self)




    def condition_wrapper(self):

        localctx = HanaParser.Condition_wrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_condition_wrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3716
            self.condition_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def condition_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Condition_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Condition_Context,i)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def predicate(self):
            return self.getTypedRuleContext(HanaParser.PredicateContext,0)


        def OR(self):
            return self.getToken(HanaParser.OR, 0)

        def AND(self):
            return self.getToken(HanaParser.AND, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_condition_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_" ):
                listener.enterCondition_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_" ):
                listener.exitCondition_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_" ):
                return visitor.visitCondition_(self)
            else:
                return visitor.visitChildren(self)



    def condition_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HanaParser.Condition_Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 542
        self.enterRecursionRule(localctx, 542, self.RULE_condition_, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.state = 3719
                self.match(HanaParser.NOT)
                self.state = 3720
                self.condition_(3)
                pass

            elif la_ == 2:
                self.state = 3721
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3722
                self.condition_(0)
                self.state = 3723
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.state = 3725
                self.predicate()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3736
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,439,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3734
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                    if la_ == 1:
                        localctx = HanaParser.Condition_Context(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_condition_)
                        self.state = 3728
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3729
                        self.match(HanaParser.OR)
                        self.state = 3730
                        self.condition_(6)
                        pass

                    elif la_ == 2:
                        localctx = HanaParser.Condition_Context(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_condition_)
                        self.state = 3731
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3732
                        self.match(HanaParser.AND)
                        self.state = 3733
                        self.condition_(5)
                        pass

             
                self.state = 3738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,439,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison_predicate(self):
            return self.getTypedRuleContext(HanaParser.Comparison_predicateContext,0)


        def range_predicate(self):
            return self.getTypedRuleContext(HanaParser.Range_predicateContext,0)


        def in_predicate(self):
            return self.getTypedRuleContext(HanaParser.In_predicateContext,0)


        def exist_predicate(self):
            return self.getTypedRuleContext(HanaParser.Exist_predicateContext,0)


        def like_predicate(self):
            return self.getTypedRuleContext(HanaParser.Like_predicateContext,0)


        def null_predicate(self):
            return self.getTypedRuleContext(HanaParser.Null_predicateContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = HanaParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_predicate)
        try:
            self.state = 3745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3739
                self.comparison_predicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3740
                self.range_predicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3741
                self.in_predicate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3742
                self.exist_predicate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3743
                self.like_predicate()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3744
                self.null_predicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_(self):
            return self.getTypedRuleContext(HanaParser.Expression_Context,0)


        def relational_operator(self):
            return self.getTypedRuleContext(HanaParser.Relational_operatorContext,0)


        def expression__list(self):
            return self.getTypedRuleContext(HanaParser.Expression__listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def ANY(self):
            return self.getToken(HanaParser.ANY, 0)

        def SOME(self):
            return self.getToken(HanaParser.SOME, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_comparison_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_predicate" ):
                listener.enterComparison_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_predicate" ):
                listener.exitComparison_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison_predicate" ):
                return visitor.visitComparison_predicate(self)
            else:
                return visitor.visitChildren(self)




    def comparison_predicate(self):

        localctx = HanaParser.Comparison_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_comparison_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3747
            self.expression_(0)
            self.state = 3748
            self.relational_operator()
            self.state = 3750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3749
                _la = self._input.LA(1)
                if not(_la==13 or _la==18 or _la==369):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 3752
                self.expression__list()
                pass

            elif la_ == 2:
                self.state = 3753
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OP, 0)

        def LESS_THAN_OP(self):
            return self.getToken(HanaParser.LESS_THAN_OP, 0)

        def GREATER_THAN_OR_EQUALS_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0)

        def LESS_THAN_OR_EQUALS_OP(self):
            return self.getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_operator" ):
                return visitor.visitRelational_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_operator(self):

        localctx = HanaParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_relational_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3756
            _la = self._input.LA(1)
            if not(_la==5 or _la==6 or ((((_la - 542)) & ~0x3f) == 0 and ((1 << (_la - 542)) & 1159) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_Context,i)


        def BETWEEN(self):
            return self.getToken(HanaParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(HanaParser.AND, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_range_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_predicate" ):
                listener.enterRange_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_predicate" ):
                listener.exitRange_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_predicate" ):
                return visitor.visitRange_predicate(self)
            else:
                return visitor.visitChildren(self)




    def range_predicate(self):

        localctx = HanaParser.Range_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_range_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3758
            self.expression_(0)
            self.state = 3760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 3759
                self.match(HanaParser.NOT)


            self.state = 3762
            self.match(HanaParser.BETWEEN)
            self.state = 3763
            self.expression_(0)
            self.state = 3764
            self.match(HanaParser.AND)
            self.state = 3765
            self.expression_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_(self):
            return self.getTypedRuleContext(HanaParser.Expression_Context,0)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def expression__list(self):
            return self.getTypedRuleContext(HanaParser.Expression__listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_in_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_predicate" ):
                listener.enterIn_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_predicate" ):
                listener.exitIn_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_predicate" ):
                return visitor.visitIn_predicate(self)
            else:
                return visitor.visitChildren(self)




    def in_predicate(self):

        localctx = HanaParser.In_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_in_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3767
            self.expression_(0)
            self.state = 3769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 3768
                self.match(HanaParser.NOT)


            self.state = 3771
            self.match(HanaParser.IN)
            self.state = 3774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.state = 3772
                self.expression__list()
                pass

            elif la_ == 2:
                self.state = 3773
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exist_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(HanaParser.EXISTS, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_exist_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist_predicate" ):
                listener.enterExist_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist_predicate" ):
                listener.exitExist_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExist_predicate" ):
                return visitor.visitExist_predicate(self)
            else:
                return visitor.visitChildren(self)




    def exist_predicate(self):

        localctx = HanaParser.Exist_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_exist_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 3776
                self.match(HanaParser.NOT)


            self.state = 3779
            self.match(HanaParser.EXISTS)
            self.state = 3780
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3781
            self.subquery()
            self.state = 3782
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_Context,i)


        def LIKE(self):
            return self.getToken(HanaParser.LIKE, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def ESCAPE(self):
            return self.getToken(HanaParser.ESCAPE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_like_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_predicate" ):
                listener.enterLike_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_predicate" ):
                listener.exitLike_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_predicate" ):
                return visitor.visitLike_predicate(self)
            else:
                return visitor.visitChildren(self)




    def like_predicate(self):

        localctx = HanaParser.Like_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_like_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3784
            self.expression_(0)
            self.state = 3786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 3785
                self.match(HanaParser.NOT)


            self.state = 3788
            self.match(HanaParser.LIKE)
            self.state = 3789
            self.expression_(0)
            self.state = 3792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.state = 3790
                self.match(HanaParser.ESCAPE)
                self.state = 3791
                self.expression_(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_(self):
            return self.getTypedRuleContext(HanaParser.Expression_Context,0)


        def IS(self):
            return self.getToken(HanaParser.IS, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_null_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_predicate" ):
                listener.enterNull_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_predicate" ):
                listener.exitNull_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_predicate" ):
                return visitor.visitNull_predicate(self)
            else:
                return visitor.visitChildren(self)




    def null_predicate(self):

        localctx = HanaParser.Null_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_null_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3794
            self.expression_(0)
            self.state = 3795
            self.match(HanaParser.IS)
            self.state = 3797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 3796
                self.match(HanaParser.NOT)


            self.state = 3799
            self.match(HanaParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression__listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_expression__list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression__list" ):
                listener.enterExpression__list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression__list" ):
                listener.exitExpression__list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression__list" ):
                return visitor.visitExpression__list(self)
            else:
                return visitor.visitChildren(self)




    def expression__list(self):

        localctx = HanaParser.Expression__listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_expression__list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3801
            self.expression_(0)
            self.state = 3806
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,450,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3802
                    self.match(HanaParser.COMMA)
                    self.state = 3803
                    self.expression_(0) 
                self.state = 3808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,450,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_expression_(self):
            return self.getTypedRuleContext(HanaParser.Case_expression_Context,0)


        def function_expression_(self):
            return self.getTypedRuleContext(HanaParser.Function_expression_Context,0)


        def aggregate_expression_(self):
            return self.getTypedRuleContext(HanaParser.Aggregate_expression_Context,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_Context,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def MINUS_SIGN(self):
            return self.getToken(HanaParser.MINUS_SIGN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(HanaParser.Variable_nameContext,0)


        def constant(self):
            return self.getTypedRuleContext(HanaParser.ConstantContext,0)


        def column_name(self):
            return self.getTypedRuleContext(HanaParser.Column_nameContext,0)


        def correlation_name(self):
            return self.getTypedRuleContext(HanaParser.Correlation_nameContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def operator(self):
            return self.getTypedRuleContext(HanaParser.OperatorContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_expression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_" ):
                listener.enterExpression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_" ):
                listener.exitExpression_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_" ):
                return visitor.visitExpression_(self)
            else:
                return visitor.visitChildren(self)



    def expression_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HanaParser.Expression_Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 562
        self.enterRecursionRule(localctx, 562, self.RULE_expression_, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.state = 3810
                self.case_expression_()
                pass

            elif la_ == 2:
                self.state = 3811
                self.function_expression_()
                pass

            elif la_ == 3:
                self.state = 3812
                self.aggregate_expression_()
                pass

            elif la_ == 4:
                self.state = 3813
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3814
                self.expression_(0)
                self.state = 3815
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                self.state = 3817
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3818
                self.subquery()
                self.state = 3819
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.state = 3821
                self.match(HanaParser.MINUS_SIGN)
                self.state = 3822
                self.expression_(5)
                pass

            elif la_ == 7:
                self.state = 3823
                self.variable_name()
                pass

            elif la_ == 8:
                self.state = 3824
                self.constant()
                pass

            elif la_ == 9:
                self.state = 3828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                if la_ == 1:
                    self.state = 3825
                    self.correlation_name()
                    self.state = 3826
                    self.match(HanaParser.PERIOD)


                self.state = 3830
                self.column_name()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,453,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HanaParser.Expression_Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression_)
                    self.state = 3833
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 3834
                    self.operator()
                    self.state = 3835
                    self.expression_(5) 
                self.state = 3841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,453,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Correlation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_correlation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrelation_name" ):
                listener.enterCorrelation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrelation_name" ):
                listener.exitCorrelation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCorrelation_name" ):
                return visitor.visitCorrelation_name(self)
            else:
                return visitor.visitChildren(self)




    def correlation_name(self):

        localctx = HanaParser.Correlation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_correlation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3842
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_SIGN(self):
            return self.getToken(HanaParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(HanaParser.MINUS_SIGN, 0)

        def ASTERISK(self):
            return self.getToken(HanaParser.ASTERISK, 0)

        def SOLIDUS(self):
            return self.getToken(HanaParser.SOLIDUS, 0)

        def CONCATENATION_OP(self):
            return self.getToken(HanaParser.CONCATENATION_OP, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def LESS_THAN_OP(self):
            return self.getToken(HanaParser.LESS_THAN_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OP, 0)

        def LESS_THAN_OR_EQUALS_OP(self):
            return self.getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0)

        def GREATER_THAN_OR_EQUALS_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0)

        def AND(self):
            return self.getToken(HanaParser.AND, 0)

        def OR(self):
            return self.getToken(HanaParser.OR, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperator" ):
                return visitor.visitOperator(self)
            else:
                return visitor.visitChildren(self)




    def operator(self):

        localctx = HanaParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3844
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 131168) != 0) or _la==274 or ((((_la - 532)) & ~0x3f) == 0 and ((1 << (_la - 532)) & 1448983) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_expression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_case_expression_(self):
            return self.getTypedRuleContext(HanaParser.Simple_case_expression_Context,0)


        def search_case_expression_(self):
            return self.getTypedRuleContext(HanaParser.Search_case_expression_Context,0)


        def getRuleIndex(self):
            return HanaParser.RULE_case_expression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression_" ):
                listener.enterCase_expression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression_" ):
                listener.exitCase_expression_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expression_" ):
                return visitor.visitCase_expression_(self)
            else:
                return visitor.visitChildren(self)




    def case_expression_(self):

        localctx = HanaParser.Case_expression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_case_expression_)
        try:
            self.state = 3848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3846
                self.simple_case_expression_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3847
                self.search_case_expression_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_case_expression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(HanaParser.CASE, 0)

        def expression_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_Context,i)


        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.WHEN)
            else:
                return self.getToken(HanaParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.THEN)
            else:
                return self.getToken(HanaParser.THEN, i)

        def END(self):
            return self.getToken(HanaParser.END, 0)

        def ELSE(self):
            return self.getToken(HanaParser.ELSE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_simple_case_expression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_expression_" ):
                listener.enterSimple_case_expression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_expression_" ):
                listener.exitSimple_case_expression_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_expression_" ):
                return visitor.visitSimple_case_expression_(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_expression_(self):

        localctx = HanaParser.Simple_case_expression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_simple_case_expression_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3850
            self.match(HanaParser.CASE)
            self.state = 3851
            self.expression_(0)
            self.state = 3852
            self.match(HanaParser.WHEN)
            self.state = 3853
            self.expression_(0)
            self.state = 3854
            self.match(HanaParser.THEN)
            self.state = 3855
            self.expression_(0)
            self.state = 3863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==440:
                self.state = 3856
                self.match(HanaParser.WHEN)
                self.state = 3857
                self.expression_(0)
                self.state = 3858
                self.match(HanaParser.THEN)
                self.state = 3859
                self.expression_(0)
                self.state = 3865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 3866
                self.match(HanaParser.ELSE)
                self.state = 3867
                self.expression_(0)


            self.state = 3870
            self.match(HanaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_case_expression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(HanaParser.CASE, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.WHEN)
            else:
                return self.getToken(HanaParser.WHEN, i)

        def condition_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Condition_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Condition_Context,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.THEN)
            else:
                return self.getToken(HanaParser.THEN, i)

        def expression_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_Context,i)


        def END(self):
            return self.getToken(HanaParser.END, 0)

        def ELSE(self):
            return self.getToken(HanaParser.ELSE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_search_case_expression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_case_expression_" ):
                listener.enterSearch_case_expression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_case_expression_" ):
                listener.exitSearch_case_expression_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_case_expression_" ):
                return visitor.visitSearch_case_expression_(self)
            else:
                return visitor.visitChildren(self)




    def search_case_expression_(self):

        localctx = HanaParser.Search_case_expression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_search_case_expression_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3872
            self.match(HanaParser.CASE)
            self.state = 3873
            self.match(HanaParser.WHEN)
            self.state = 3874
            self.condition_(0)
            self.state = 3875
            self.match(HanaParser.THEN)
            self.state = 3876
            self.expression_(0)
            self.state = 3884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==440:
                self.state = 3877
                self.match(HanaParser.WHEN)
                self.state = 3878
                self.condition_(0)
                self.state = 3879
                self.match(HanaParser.THEN)
                self.state = 3880
                self.expression_(0)
                self.state = 3886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 3887
                self.match(HanaParser.ELSE)
                self.state = 3888
                self.expression_(0)


            self.state = 3891
            self.match(HanaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_expression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(HanaParser.Function_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def expression_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_Context)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_Context,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_function_expression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_expression_" ):
                listener.enterFunction_expression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_expression_" ):
                listener.exitFunction_expression_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_expression_" ):
                return visitor.visitFunction_expression_(self)
            else:
                return visitor.visitChildren(self)




    def function_expression_(self):

        localctx = HanaParser.Function_expression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_function_expression_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3893
            self.function_name()
            self.state = 3894
            self.match(HanaParser.LEFT_PAREN)
            self.state = 3895
            self.expression_(0)
            self.state = 3900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 3896
                self.match(HanaParser.COMMA)
                self.state = 3897
                self.expression_(0)
                self.state = 3902
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3903
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_expression_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(HanaParser.COUNT, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def ASTERISK(self):
            return self.getToken(HanaParser.ASTERISK, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def DISTINCT(self):
            return self.getToken(HanaParser.DISTINCT, 0)

        def expression__list(self):
            return self.getTypedRuleContext(HanaParser.Expression__listContext,0)


        def agg_name(self):
            return self.getTypedRuleContext(HanaParser.Agg_nameContext,0)


        def expression_(self):
            return self.getTypedRuleContext(HanaParser.Expression_Context,0)


        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def STRING_AGG(self):
            return self.getToken(HanaParser.STRING_AGG, 0)

        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def delimiter(self):
            return self.getTypedRuleContext(HanaParser.DelimiterContext,0)


        def aggregate_order_by_clause(self):
            return self.getTypedRuleContext(HanaParser.Aggregate_order_by_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_aggregate_expression_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_expression_" ):
                listener.enterAggregate_expression_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_expression_" ):
                listener.exitAggregate_expression_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_expression_" ):
                return visitor.visitAggregate_expression_(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_expression_(self):

        localctx = HanaParser.Aggregate_expression_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_aggregate_expression_)
        self._la = 0 # Token type
        try:
            self.state = 3935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3905
                self.match(HanaParser.COUNT)
                self.state = 3906
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3907
                self.match(HanaParser.ASTERISK)
                self.state = 3908
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3909
                self.match(HanaParser.COUNT)
                self.state = 3910
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3911
                self.match(HanaParser.DISTINCT)
                self.state = 3912
                self.expression__list()
                self.state = 3913
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3915
                self.agg_name()
                self.state = 3916
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
                if la_ == 1:
                    self.state = 3917
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3920
                self.expression_(0)
                self.state = 3921
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3923
                self.match(HanaParser.STRING_AGG)
                self.state = 3924
                self.match(HanaParser.LEFT_PAREN)
                self.state = 3925
                self.expression_(0)
                self.state = 3928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==535:
                    self.state = 3926
                    self.match(HanaParser.COMMA)
                    self.state = 3927
                    self.delimiter()


                self.state = 3931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==276:
                    self.state = 3930
                    self.aggregate_order_by_clause()


                self.state = 3933
                self.match(HanaParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Agg_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CORR(self):
            return self.getToken(HanaParser.CORR, 0)

        def CORR_SPEARMAN(self):
            return self.getToken(HanaParser.CORR_SPEARMAN, 0)

        def COUNT(self):
            return self.getToken(HanaParser.COUNT, 0)

        def MIN(self):
            return self.getToken(HanaParser.MIN, 0)

        def MEDIAN(self):
            return self.getToken(HanaParser.MEDIAN, 0)

        def MAX(self):
            return self.getToken(HanaParser.MAX, 0)

        def SUM(self):
            return self.getToken(HanaParser.SUM, 0)

        def AVG(self):
            return self.getToken(HanaParser.AVG, 0)

        def STDDEV(self):
            return self.getToken(HanaParser.STDDEV, 0)

        def VAR(self):
            return self.getToken(HanaParser.VAR, 0)

        def STDDEV_POP(self):
            return self.getToken(HanaParser.STDDEV_POP, 0)

        def VAR_POP(self):
            return self.getToken(HanaParser.VAR_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(HanaParser.STDDEV_SAMP, 0)

        def VAR_SAMP(self):
            return self.getToken(HanaParser.VAR_SAMP, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_agg_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgg_name" ):
                listener.enterAgg_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgg_name" ):
                listener.exitAgg_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAgg_name" ):
                return visitor.visitAgg_name(self)
            else:
                return visitor.visitChildren(self)




    def agg_name(self):

        localctx = HanaParser.Agg_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_agg_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3937
            _la = self._input.LA(1)
            if not(_la==84 or ((((_la - 483)) & ~0x3f) == 0 and ((1 << (_la - 483)) & 4892131391) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelimiterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_delimiter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelimiter" ):
                listener.enterDelimiter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelimiter" ):
                listener.exitDelimiter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelimiter" ):
                return visitor.visitDelimiter(self)
            else:
                return visitor.visitChildren(self)




    def delimiter(self):

        localctx = HanaParser.DelimiterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_delimiter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3939
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HanaParser.ORDER, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def expression_(self):
            return self.getTypedRuleContext(HanaParser.Expression_Context,0)


        def NULLS(self):
            return self.getToken(HanaParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(HanaParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HanaParser.LAST, 0)

        def ASC(self):
            return self.getToken(HanaParser.ASC, 0)

        def DESC(self):
            return self.getToken(HanaParser.DESC, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_aggregate_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_order_by_clause" ):
                listener.enterAggregate_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_order_by_clause" ):
                listener.exitAggregate_order_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_order_by_clause" ):
                return visitor.visitAggregate_order_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_order_by_clause(self):

        localctx = HanaParser.Aggregate_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_aggregate_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3941
            self.match(HanaParser.ORDER)
            self.state = 3942
            self.match(HanaParser.BY)
            self.state = 3943
            self.expression_(0)
            self.state = 3945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==112:
                self.state = 3944
                _la = self._input.LA(1)
                if not(_la==21 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.state = 3947
                self.match(HanaParser.NULLS)
                self.state = 3948
                self.match(HanaParser.FIRST)

            elif la_ == 2:
                self.state = 3949
                self.match(HanaParser.NULLS)
                self.state = 3950
                self.match(HanaParser.LAST)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cursor_expression(self):
            return self.getTypedRuleContext(HanaParser.Cursor_expressionContext,0)


        def logical_and_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Logical_and_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Logical_and_expressionContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.OR)
            else:
                return self.getToken(HanaParser.OR, i)

        def getRuleIndex(self):
            return HanaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HanaParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_expression)
        try:
            self.state = 3962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3953
                self.cursor_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3954
                self.logical_and_expression()
                self.state = 3959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,466,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3955
                        self.match(HanaParser.OR)
                        self.state = 3956
                        self.logical_and_expression() 
                    self.state = 3961
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,466,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_wrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_expression_wrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_wrapper" ):
                listener.enterExpression_wrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_wrapper" ):
                listener.exitExpression_wrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_wrapper" ):
                return visitor.visitExpression_wrapper(self)
            else:
                return visitor.visitChildren(self)




    def expression_wrapper(self):

        localctx = HanaParser.Expression_wrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_expression_wrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3964
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_and_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def negated_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Negated_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Negated_expressionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.AND)
            else:
                return self.getToken(HanaParser.AND, i)

        def getRuleIndex(self):
            return HanaParser.RULE_logical_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_and_expression" ):
                listener.enterLogical_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_and_expression" ):
                listener.exitLogical_and_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_and_expression" ):
                return visitor.visitLogical_and_expression(self)
            else:
                return visitor.visitChildren(self)




    def logical_and_expression(self):

        localctx = HanaParser.Logical_and_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_logical_and_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3966
            self.negated_expression()
            self.state = 3971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,468,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3967
                    self.match(HanaParser.AND)
                    self.state = 3968
                    self.negated_expression() 
                self.state = 3973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,468,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Negated_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def negated_expression(self):
            return self.getTypedRuleContext(HanaParser.Negated_expressionContext,0)


        def equality_expression(self):
            return self.getTypedRuleContext(HanaParser.Equality_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_negated_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegated_expression" ):
                listener.enterNegated_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegated_expression" ):
                listener.exitNegated_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegated_expression" ):
                return visitor.visitNegated_expression(self)
            else:
                return visitor.visitChildren(self)




    def negated_expression(self):

        localctx = HanaParser.Negated_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_negated_expression)
        try:
            self.state = 3977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [258]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3974
                self.match(HanaParser.NOT)
                self.state = 3975
                self.negated_expression()
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 529, 533, 534, 539, 540, 555, 560]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3976
                self.equality_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equality_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiset_expression(self):
            return self.getTypedRuleContext(HanaParser.Multiset_expressionContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.IS)
            else:
                return self.getToken(HanaParser.IS, i)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.NULL)
            else:
                return self.getToken(HanaParser.NULL, i)

        def NAN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.NAN)
            else:
                return self.getToken(HanaParser.NAN, i)

        def PRESENT(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PRESENT)
            else:
                return self.getToken(HanaParser.PRESENT, i)

        def INFINITE(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.INFINITE)
            else:
                return self.getToken(HanaParser.INFINITE, i)

        def A_LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.A_LETTER)
            else:
                return self.getToken(HanaParser.A_LETTER, i)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SET)
            else:
                return self.getToken(HanaParser.SET, i)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.EMPTY)
            else:
                return self.getToken(HanaParser.EMPTY, i)

        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.OF)
            else:
                return self.getToken(HanaParser.OF, i)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Type_specContext)
            else:
                return self.getTypedRuleContext(HanaParser.Type_specContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.NOT)
            else:
                return self.getToken(HanaParser.NOT, i)

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.TYPE)
            else:
                return self.getToken(HanaParser.TYPE, i)

        def ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.ONLY)
            else:
                return self.getToken(HanaParser.ONLY, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEquality_expression" ):
                return visitor.visitEquality_expression(self)
            else:
                return visitor.visitChildren(self)




    def equality_expression(self):

        localctx = HanaParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3979
            self.multiset_expression()
            self.state = 4013
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,475,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3980
                    self.match(HanaParser.IS)
                    self.state = 3982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==258:
                        self.state = 3981
                        self.match(HanaParser.NOT)


                    self.state = 4009
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [260]:
                        self.state = 3984
                        self.match(HanaParser.NULL)
                        pass
                    elif token in [238]:
                        self.state = 3985
                        self.match(HanaParser.NAN)
                        pass
                    elif token in [301]:
                        self.state = 3986
                        self.match(HanaParser.PRESENT)
                        pass
                    elif token in [181]:
                        self.state = 3987
                        self.match(HanaParser.INFINITE)
                        pass
                    elif token in [8]:
                        self.state = 3988
                        self.match(HanaParser.A_LETTER)
                        self.state = 3989
                        self.match(HanaParser.SET)
                        pass
                    elif token in [126]:
                        self.state = 3990
                        self.match(HanaParser.EMPTY)
                        pass
                    elif token in [266]:
                        self.state = 3991
                        self.match(HanaParser.OF)
                        self.state = 3993
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==412:
                            self.state = 3992
                            self.match(HanaParser.TYPE)


                        self.state = 3995
                        self.match(HanaParser.LEFT_PAREN)
                        self.state = 3997
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                        if la_ == 1:
                            self.state = 3996
                            self.match(HanaParser.ONLY)


                        self.state = 3999
                        self.type_spec()
                        self.state = 4004
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==535:
                            self.state = 4000
                            self.match(HanaParser.COMMA)
                            self.state = 4001
                            self.type_spec()
                            self.state = 4006
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 4007
                        self.match(HanaParser.RIGHT_PAREN)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 4015
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,475,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiset_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self):
            return self.getTypedRuleContext(HanaParser.Relational_expressionContext,0)


        def multiset_type(self):
            return self.getTypedRuleContext(HanaParser.Multiset_typeContext,0)


        def concatenation(self):
            return self.getTypedRuleContext(HanaParser.ConcatenationContext,0)


        def OF(self):
            return self.getToken(HanaParser.OF, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_multiset_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiset_expression" ):
                listener.enterMultiset_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiset_expression" ):
                listener.exitMultiset_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiset_expression" ):
                return visitor.visitMultiset_expression(self)
            else:
                return visitor.visitChildren(self)




    def multiset_expression(self):

        localctx = HanaParser.Multiset_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_multiset_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4016
            self.relational_expression()
            self.state = 4023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.state = 4017
                self.multiset_type()
                self.state = 4019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==266:
                    self.state = 4018
                    self.match(HanaParser.OF)


                self.state = 4021
                self.concatenation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiset_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(HanaParser.MEMBER, 0)

        def SUBMULTISET(self):
            return self.getToken(HanaParser.SUBMULTISET, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_multiset_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiset_type" ):
                listener.enterMultiset_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiset_type" ):
                listener.exitMultiset_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiset_type" ):
                return visitor.visitMultiset_type(self)
            else:
                return visitor.visitChildren(self)




    def multiset_type(self):

        localctx = HanaParser.Multiset_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_multiset_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4025
            _la = self._input.LA(1)
            if not(_la==226 or _la==384):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Compound_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Compound_expressionContext,i)


        def relational_expression_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Relational_expression_operatorContext)
            else:
                return self.getTypedRuleContext(HanaParser.Relational_expression_operatorContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_expression" ):
                return visitor.visitRelational_expression(self)
            else:
                return visitor.visitChildren(self)




    def relational_expression(self):

        localctx = HanaParser.Relational_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_relational_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4027
            self.compound_expression()
            self.state = 4033
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,478,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4028
                    self.relational_expression_operator()
                    self.state = 4029
                    self.compound_expression() 
                self.state = 4035
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,478,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_expression_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def not_equal_op(self):
            return self.getTypedRuleContext(HanaParser.Not_equal_opContext,0)


        def LESS_THAN_OP(self):
            return self.getToken(HanaParser.LESS_THAN_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OP, 0)

        def less_than_or_equals_op(self):
            return self.getTypedRuleContext(HanaParser.Less_than_or_equals_opContext,0)


        def greater_than_or_equals_op(self):
            return self.getTypedRuleContext(HanaParser.Greater_than_or_equals_opContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_relational_expression_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression_operator" ):
                listener.enterRelational_expression_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression_operator" ):
                listener.exitRelational_expression_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_expression_operator" ):
                return visitor.visitRelational_expression_operator(self)
            else:
                return visitor.visitChildren(self)




    def relational_expression_operator(self):

        localctx = HanaParser.Relational_expression_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_relational_expression_operator)
        try:
            self.state = 4042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4036
                self.match(HanaParser.EQUALS_OP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4037
                self.not_equal_op()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4038
                self.match(HanaParser.LESS_THAN_OP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4039
                self.match(HanaParser.GREATER_THAN_OP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4040
                self.less_than_or_equals_op()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4041
                self.greater_than_or_equals_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(HanaParser.ConcatenationContext,i)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def in_elements(self):
            return self.getTypedRuleContext(HanaParser.In_elementsContext,0)


        def BETWEEN(self):
            return self.getToken(HanaParser.BETWEEN, 0)

        def between_elements(self):
            return self.getTypedRuleContext(HanaParser.Between_elementsContext,0)


        def like_type(self):
            return self.getTypedRuleContext(HanaParser.Like_typeContext,0)


        def NOT(self):
            return self.getToken(HanaParser.NOT, 0)

        def like_escape_part(self):
            return self.getTypedRuleContext(HanaParser.Like_escape_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_compound_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_expression" ):
                listener.enterCompound_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_expression" ):
                listener.exitCompound_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_expression" ):
                return visitor.visitCompound_expression(self)
            else:
                return visitor.visitChildren(self)




    def compound_expression(self):

        localctx = HanaParser.Compound_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_compound_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4044
            self.concatenation()
            self.state = 4059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
            if la_ == 1:
                self.state = 4046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 4045
                    self.match(HanaParser.NOT)


                self.state = 4057
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [172]:
                    self.state = 4048
                    self.match(HanaParser.IN)
                    self.state = 4049
                    self.in_elements()
                    pass
                elif token in [33]:
                    self.state = 4050
                    self.match(HanaParser.BETWEEN)
                    self.state = 4051
                    self.between_elements()
                    pass
                elif token in [208, 209, 210, 211]:
                    self.state = 4052
                    self.like_type()
                    self.state = 4053
                    self.concatenation()
                    self.state = 4055
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
                    if la_ == 1:
                        self.state = 4054
                        self.like_escape_part()


                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(HanaParser.LIKE, 0)

        def LIKEC(self):
            return self.getToken(HanaParser.LIKEC, 0)

        def LIKE2(self):
            return self.getToken(HanaParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(HanaParser.LIKE4, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_like_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_type" ):
                listener.enterLike_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_type" ):
                listener.exitLike_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_type" ):
                return visitor.visitLike_type(self)
            else:
                return visitor.visitChildren(self)




    def like_type(self):

        localctx = HanaParser.Like_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_like_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4061
            _la = self._input.LA(1)
            if not(((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_escape_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(HanaParser.ESCAPE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(HanaParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_like_escape_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_escape_part" ):
                listener.enterLike_escape_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_escape_part" ):
                listener.exitLike_escape_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_escape_part" ):
                return visitor.visitLike_escape_part(self)
            else:
                return visitor.visitChildren(self)




    def like_escape_part(self):

        localctx = HanaParser.Like_escape_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_like_escape_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4063
            self.match(HanaParser.ESCAPE)
            self.state = 4064
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def concatenation_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Concatenation_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def constant(self):
            return self.getTypedRuleContext(HanaParser.ConstantContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(HanaParser.Bind_variableContext,0)


        def general_element(self):
            return self.getTypedRuleContext(HanaParser.General_elementContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_elements" ):
                listener.enterIn_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_elements" ):
                listener.exitIn_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_elements" ):
                return visitor.visitIn_elements(self)
            else:
                return visitor.visitChildren(self)




    def in_elements(self):

        localctx = HanaParser.In_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_in_elements)
        self._la = 0 # Token type
        try:
            self.state = 4084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4066
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4067
                self.subquery()
                self.state = 4068
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4070
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4071
                self.concatenation_wrapper()
                self.state = 4076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4072
                    self.match(HanaParser.COMMA)
                    self.state = 4073
                    self.concatenation_wrapper()
                    self.state = 4078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4079
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4081
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4082
                self.bind_variable()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4083
                self.general_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(HanaParser.ConcatenationContext,i)


        def AND(self):
            return self.getToken(HanaParser.AND, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_between_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_elements" ):
                listener.enterBetween_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_elements" ):
                listener.exitBetween_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_elements" ):
                return visitor.visitBetween_elements(self)
            else:
                return visitor.visitChildren(self)




    def between_elements(self):

        localctx = HanaParser.Between_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_between_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4086
            self.concatenation()
            self.state = 4087
            self.match(HanaParser.AND)
            self.state = 4088
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatenationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Additive_expressionContext,i)


        def concatenation_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Concatenation_opContext)
            else:
                return self.getTypedRuleContext(HanaParser.Concatenation_opContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_concatenation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)




    def concatenation(self):

        localctx = HanaParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_concatenation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4090
            self.additive_expression()
            self.state = 4096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,486,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4091
                    self.concatenation_op()
                    self.state = 4092
                    self.additive_expression() 
                self.state = 4098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,486,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concatenation_wrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(HanaParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_concatenation_wrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation_wrapper" ):
                listener.enterConcatenation_wrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation_wrapper" ):
                listener.exitConcatenation_wrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation_wrapper" ):
                return visitor.visitConcatenation_wrapper(self)
            else:
                return visitor.visitChildren(self)




    def concatenation_wrapper(self):

        localctx = HanaParser.Concatenation_wrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_concatenation_wrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4099
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Additive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiply_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Multiply_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Multiply_expressionContext,i)


        def PLUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PLUS_SIGN)
            else:
                return self.getToken(HanaParser.PLUS_SIGN, i)

        def MINUS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.MINUS_SIGN)
            else:
                return self.getToken(HanaParser.MINUS_SIGN, i)

        def getRuleIndex(self):
            return HanaParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditive_expression" ):
                return visitor.visitAdditive_expression(self)
            else:
                return visitor.visitChildren(self)




    def additive_expression(self):

        localctx = HanaParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4101
            self.multiply_expression()
            self.state = 4106
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,487,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4102
                    _la = self._input.LA(1)
                    if not(_la==533 or _la==534):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4103
                    self.multiply_expression() 
                self.state = 4108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,487,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiply_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datetime_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Datetime_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Datetime_expressionContext,i)


        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.ASTERISK)
            else:
                return self.getToken(HanaParser.ASTERISK, i)

        def SOLIDUS(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SOLIDUS)
            else:
                return self.getToken(HanaParser.SOLIDUS, i)

        def getRuleIndex(self):
            return HanaParser.RULE_multiply_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiply_expression" ):
                listener.enterMultiply_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiply_expression" ):
                listener.exitMultiply_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiply_expression" ):
                return visitor.visitMultiply_expression(self)
            else:
                return visitor.visitChildren(self)




    def multiply_expression(self):

        localctx = HanaParser.Multiply_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_multiply_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4109
            self.datetime_expression()
            self.state = 4114
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,488,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4110
                    _la = self._input.LA(1)
                    if not(_la==532 or _la==536):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4111
                    self.datetime_expression() 
                self.state = 4116
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,488,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datetime_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(HanaParser.Model_expressionContext,0)


        def AT(self):
            return self.getToken(HanaParser.AT, 0)

        def interval_expression(self):
            return self.getTypedRuleContext(HanaParser.Interval_expressionContext,0)


        def LOCAL(self):
            return self.getToken(HanaParser.LOCAL, 0)

        def TIME(self):
            return self.getToken(HanaParser.TIME, 0)

        def ZONE(self):
            return self.getToken(HanaParser.ZONE, 0)

        def concatenation_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_datetime_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetime_expression" ):
                listener.enterDatetime_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetime_expression" ):
                listener.exitDatetime_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatetime_expression" ):
                return visitor.visitDatetime_expression(self)
            else:
                return visitor.visitChildren(self)




    def datetime_expression(self):

        localctx = HanaParser.Datetime_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_datetime_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4117
            self.model_expression()
            self.state = 4126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.state = 4118
                self.match(HanaParser.AT)
                self.state = 4123
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [213]:
                    self.state = 4119
                    self.match(HanaParser.LOCAL)
                    pass
                elif token in [393]:
                    self.state = 4120
                    self.match(HanaParser.TIME)
                    self.state = 4121
                    self.match(HanaParser.ZONE)
                    self.state = 4122
                    self.concatenation_wrapper()
                    pass
                else:
                    raise NoViableAltException(self)


            elif la_ == 2:
                self.state = 4125
                self.interval_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(HanaParser.DAY, 0)

        def TO(self):
            return self.getToken(HanaParser.TO, 0)

        def SECOND(self):
            return self.getToken(HanaParser.SECOND, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def concatenation_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Concatenation_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def YEAR(self):
            return self.getToken(HanaParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(HanaParser.MONTH, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_interval_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expression" ):
                listener.enterInterval_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expression" ):
                listener.exitInterval_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval_expression" ):
                return visitor.visitInterval_expression(self)
            else:
                return visitor.visitChildren(self)




    def interval_expression(self):

        localctx = HanaParser.Interval_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_interval_expression)
        self._la = 0 # Token type
        try:
            self.state = 4152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4128
                self.match(HanaParser.DAY)
                self.state = 4133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 4129
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 4130
                    self.concatenation_wrapper()
                    self.state = 4131
                    self.match(HanaParser.RIGHT_PAREN)


                self.state = 4135
                self.match(HanaParser.TO)
                self.state = 4136
                self.match(HanaParser.SECOND)
                self.state = 4141
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
                if la_ == 1:
                    self.state = 4137
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 4138
                    self.concatenation_wrapper()
                    self.state = 4139
                    self.match(HanaParser.RIGHT_PAREN)


                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4143
                self.match(HanaParser.YEAR)
                self.state = 4148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 4144
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 4145
                    self.concatenation_wrapper()
                    self.state = 4146
                    self.match(HanaParser.RIGHT_PAREN)


                self.state = 4150
                self.match(HanaParser.TO)
                self.state = 4151
                self.match(HanaParser.MONTH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(HanaParser.Unary_expressionContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(HanaParser.LEFT_BRACKET, 0)

        def model_expression_element(self):
            return self.getTypedRuleContext(HanaParser.Model_expression_elementContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(HanaParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_model_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression" ):
                listener.enterModel_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression" ):
                listener.exitModel_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression" ):
                return visitor.visitModel_expression(self)
            else:
                return visitor.visitChildren(self)




    def model_expression(self):

        localctx = HanaParser.Model_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_model_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4154
            self.unary_expression()
            self.state = 4159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                self.state = 4155
                self.match(HanaParser.LEFT_BRACKET)
                self.state = 4156
                self.model_expression_element()
                self.state = 4157
                self.match(HanaParser.RIGHT_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Model_expression_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.ANY)
            else:
                return self.getToken(HanaParser.ANY, i)

        def condition_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Condition_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Condition_wrapperContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def single_column_for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Single_column_for_loopContext)
            else:
                return self.getTypedRuleContext(HanaParser.Single_column_for_loopContext,i)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(HanaParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_model_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression_element" ):
                listener.enterModel_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression_element" ):
                listener.exitModel_expression_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModel_expression_element" ):
                return visitor.visitModel_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def model_expression_element(self):

        localctx = HanaParser.Model_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_model_expression_element)
        self._la = 0 # Token type
        try:
            self.state = 4184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
                if la_ == 1:
                    self.state = 4161
                    self.match(HanaParser.ANY)
                    pass

                elif la_ == 2:
                    self.state = 4162
                    self.condition_wrapper()
                    pass


                self.state = 4172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4165
                    self.match(HanaParser.COMMA)
                    self.state = 4168
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
                    if la_ == 1:
                        self.state = 4166
                        self.match(HanaParser.ANY)
                        pass

                    elif la_ == 2:
                        self.state = 4167
                        self.condition_wrapper()
                        pass


                    self.state = 4174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4175
                self.single_column_for_loop()
                self.state = 4180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4176
                    self.match(HanaParser.COMMA)
                    self.state = 4177
                    self.single_column_for_loop()
                    self.state = 4182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4183
                self.multi_column_for_loop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_column_for_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ex1 = None # ExpressionContext
            self.ex2 = None # ExpressionContext
            self.ex3 = None # ExpressionContext

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(HanaParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def FROM(self):
            return self.getToken(HanaParser.FROM, 0)

        def TO(self):
            return self.getToken(HanaParser.TO, 0)

        def for_increment_decrement_type(self):
            return self.getTypedRuleContext(HanaParser.For_increment_decrement_typeContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def for_like_part(self):
            return self.getTypedRuleContext(HanaParser.For_like_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_single_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_column_for_loop" ):
                listener.enterSingle_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_column_for_loop" ):
                listener.exitSingle_column_for_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_column_for_loop" ):
                return visitor.visitSingle_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def single_column_for_loop(self):

        localctx = HanaParser.Single_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_single_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4186
            self.match(HanaParser.FOR)
            self.state = 4187
            self.column_name()
            self.state = 4200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [172]:
                self.state = 4188
                self.match(HanaParser.IN)
                self.state = 4189
                self.expression_list()
                pass
            elif token in [157, 208]:
                self.state = 4191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 4190
                    self.for_like_part()


                self.state = 4193
                self.match(HanaParser.FROM)
                self.state = 4194
                localctx.ex1 = self.expression()
                self.state = 4195
                self.match(HanaParser.TO)
                self.state = 4196
                localctx.ex2 = self.expression()
                self.state = 4197
                self.for_increment_decrement_type()
                self.state = 4198
                localctx.ex3 = self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_like_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(HanaParser.LIKE, 0)

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_for_like_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_like_part" ):
                listener.enterFor_like_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_like_part" ):
                listener.exitFor_like_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_like_part" ):
                return visitor.visitFor_like_part(self)
            else:
                return visitor.visitChildren(self)




    def for_like_part(self):

        localctx = HanaParser.For_like_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_for_like_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4202
            self.match(HanaParser.LIKE)
            self.state = 4203
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_increment_decrement_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(HanaParser.INCREMENT, 0)

        def DECREMENT(self):
            return self.getToken(HanaParser.DECREMENT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_for_increment_decrement_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_increment_decrement_type" ):
                listener.enterFor_increment_decrement_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_increment_decrement_type" ):
                listener.exitFor_increment_decrement_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_increment_decrement_type" ):
                return visitor.visitFor_increment_decrement_type(self)
            else:
                return visitor.visitChildren(self)




    def for_increment_decrement_type(self):

        localctx = HanaParser.For_increment_decrement_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_for_increment_decrement_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4205
            _la = self._input.LA(1)
            if not(_la==105 or _la==175):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multi_column_for_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_nameContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_multi_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_column_for_loop" ):
                listener.enterMulti_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_column_for_loop" ):
                listener.exitMulti_column_for_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulti_column_for_loop" ):
                return visitor.visitMulti_column_for_loop(self)
            else:
                return visitor.visitChildren(self)




    def multi_column_for_loop(self):

        localctx = HanaParser.Multi_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_multi_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4207
            self.match(HanaParser.FOR)
            self.state = 4208
            self.match(HanaParser.LEFT_PAREN)
            self.state = 4209
            self.column_name()
            self.state = 4214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 4210
                self.match(HanaParser.COMMA)
                self.state = 4211
                self.column_name()
                self.state = 4216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4217
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 4218
            self.match(HanaParser.IN)
            self.state = 4219
            self.match(HanaParser.LEFT_PAREN)
            self.state = 4232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.state = 4220
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 4221
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4222
                self.expression_list()
                self.state = 4227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4223
                    self.match(HanaParser.COMMA)
                    self.state = 4224
                    self.expression_list()
                    self.state = 4229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4230
                self.match(HanaParser.RIGHT_PAREN)
                pass


            self.state = 4234
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(HanaParser.MINUS_SIGN, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(HanaParser.Unary_expressionContext,0)


        def PLUS_SIGN(self):
            return self.getToken(HanaParser.PLUS_SIGN, 0)

        def PRIOR(self):
            return self.getToken(HanaParser.PRIOR, 0)

        def CONNECT_BY_ROOT(self):
            return self.getToken(HanaParser.CONNECT_BY_ROOT, 0)

        def NEW(self):
            return self.getToken(HanaParser.NEW, 0)

        def DISTINCT(self):
            return self.getToken(HanaParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def case_statement(self):
            return self.getTypedRuleContext(HanaParser.Case_statementContext,0)


        def quantified_expression(self):
            return self.getTypedRuleContext(HanaParser.Quantified_expressionContext,0)


        def standard_function(self):
            return self.getTypedRuleContext(HanaParser.Standard_functionContext,0)


        def atom(self):
            return self.getTypedRuleContext(HanaParser.AtomContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_expression" ):
                return visitor.visitUnary_expression(self)
            else:
                return visitor.visitChildren(self)




    def unary_expression(self):

        localctx = HanaParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_unary_expression)
        try:
            self.state = 4254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4236
                self.match(HanaParser.MINUS_SIGN)
                self.state = 4237
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4238
                self.match(HanaParser.PLUS_SIGN)
                self.state = 4239
                self.unary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4240
                self.match(HanaParser.PRIOR)
                self.state = 4241
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4242
                self.match(HanaParser.CONNECT_BY_ROOT)
                self.state = 4243
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4244
                self.match(HanaParser.NEW)
                self.state = 4245
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4246
                self.match(HanaParser.DISTINCT)
                self.state = 4247
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4248
                self.match(HanaParser.ALL)
                self.state = 4249
                self.unary_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4250
                self.case_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4251
                self.quantified_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4252
                self.standard_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4253
                self.atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def searched_case_statement(self):
            return self.getTypedRuleContext(HanaParser.Searched_case_statementContext,0)


        def simple_case_statement(self):
            return self.getTypedRuleContext(HanaParser.Simple_case_statementContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_statement" ):
                listener.enterCase_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_statement" ):
                listener.exitCase_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_statement" ):
                return visitor.visitCase_statement(self)
            else:
                return visitor.visitChildren(self)




    def case_statement(self):

        localctx = HanaParser.Case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_case_statement)
        try:
            self.state = 4258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4256
                self.searched_case_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4257
                self.simple_case_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_case_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def atom(self):
            return self.getTypedRuleContext(HanaParser.AtomContext,0)


        def END(self):
            return self.getToken(HanaParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.CASE)
            else:
                return self.getToken(HanaParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Label_nameContext,i)


        def simple_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Simple_case_when_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Simple_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(HanaParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_simple_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_statement" ):
                listener.enterSimple_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_statement" ):
                listener.exitSimple_case_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_statement" ):
                return visitor.visitSimple_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_statement(self):

        localctx = HanaParser.Simple_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_simple_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 4260
                self.label_name()


            self.state = 4263
            localctx.ck1 = self.match(HanaParser.CASE)
            self.state = 4264
            self.atom()
            self.state = 4266 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4265
                self.simple_case_when_part()
                self.state = 4268 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==440):
                    break

            self.state = 4271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 4270
                self.case_else_part()


            self.state = 4273
            self.match(HanaParser.END)
            self.state = 4275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
            if la_ == 1:
                self.state = 4274
                self.match(HanaParser.CASE)


            self.state = 4278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,512,self._ctx)
            if la_ == 1:
                self.state = 4277
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_case_when_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(HanaParser.WHEN, 0)

        def expression_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,i)


        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_simple_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_when_part" ):
                listener.enterSimple_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_when_part" ):
                listener.exitSimple_case_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_case_when_part" ):
                return visitor.visitSimple_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def simple_case_when_part(self):

        localctx = HanaParser.Simple_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_simple_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4280
            self.match(HanaParser.WHEN)
            self.state = 4281
            self.expression_wrapper()
            self.state = 4282
            self.match(HanaParser.THEN)
            self.state = 4285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,513,self._ctx)
            if la_ == 1:
                self.state = 4283
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 4284
                self.expression_wrapper()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def END(self):
            return self.getToken(HanaParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.CASE)
            else:
                return self.getToken(HanaParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Label_nameContext,i)


        def searched_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Searched_case_when_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Searched_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(HanaParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_searched_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_statement" ):
                listener.enterSearched_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_statement" ):
                listener.exitSearched_case_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_statement" ):
                return visitor.visitSearched_case_statement(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_statement(self):

        localctx = HanaParser.Searched_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_searched_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488363551) != 0):
                self.state = 4287
                self.label_name()


            self.state = 4290
            localctx.ck1 = self.match(HanaParser.CASE)
            self.state = 4292 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4291
                self.searched_case_when_part()
                self.state = 4294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==440):
                    break

            self.state = 4297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 4296
                self.case_else_part()


            self.state = 4299
            self.match(HanaParser.END)
            self.state = 4301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.state = 4300
                self.match(HanaParser.CASE)


            self.state = 4304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
            if la_ == 1:
                self.state = 4303
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_when_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(HanaParser.WHEN, 0)

        def condition_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Condition_wrapperContext,0)


        def THEN(self):
            return self.getToken(HanaParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def expression_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_searched_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_when_part" ):
                listener.enterSearched_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_when_part" ):
                listener.exitSearched_case_when_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearched_case_when_part" ):
                return visitor.visitSearched_case_when_part(self)
            else:
                return visitor.visitChildren(self)




    def searched_case_when_part(self):

        localctx = HanaParser.Searched_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_searched_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4306
            self.match(HanaParser.WHEN)
            self.state = 4307
            self.condition_wrapper()
            self.state = 4308
            self.match(HanaParser.THEN)
            self.state = 4311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                self.state = 4309
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 4310
                self.expression_wrapper()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_else_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(HanaParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(HanaParser.Seq_of_statementsContext,0)


        def expression_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_case_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_else_part" ):
                listener.enterCase_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_else_part" ):
                listener.exitCase_else_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_else_part" ):
                return visitor.visitCase_else_part(self)
            else:
                return visitor.visitChildren(self)




    def case_else_part(self):

        localctx = HanaParser.Case_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_case_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4313
            self.match(HanaParser.ELSE)
            self.state = 4316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
            if la_ == 1:
                self.state = 4314
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 4315
                self.expression_wrapper()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_element(self):
            return self.getTypedRuleContext(HanaParser.Table_elementContext,0)


        def outer_join_sign(self):
            return self.getTypedRuleContext(HanaParser.Outer_join_signContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(HanaParser.Bind_variableContext,0)


        def constant(self):
            return self.getTypedRuleContext(HanaParser.ConstantContext,0)


        def general_element(self):
            return self.getTypedRuleContext(HanaParser.General_elementContext,0)


        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def expression_or_vector(self):
            return self.getTypedRuleContext(HanaParser.Expression_or_vectorContext,0)


        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Subquery_operation_partContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = HanaParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_atom)
        try:
            self.state = 4338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4318
                self.table_element()
                self.state = 4319
                self.outer_join_sign()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4321
                self.bind_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4322
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4323
                self.general_element()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4324
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                if la_ == 1:
                    self.state = 4325
                    self.subquery()
                    self.state = 4326
                    self.match(HanaParser.RIGHT_PAREN)
                    self.state = 4330
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,521,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4327
                            self.subquery_operation_part() 
                        self.state = 4332
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,521,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 4333
                    self.expression_or_vector()
                    self.state = 4334
                    self.match(HanaParser.RIGHT_PAREN)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_or_vectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def vector_expr(self):
            return self.getTypedRuleContext(HanaParser.Vector_exprContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_expression_or_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_or_vector" ):
                listener.enterExpression_or_vector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_or_vector" ):
                listener.exitExpression_or_vector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_or_vector" ):
                return visitor.visitExpression_or_vector(self)
            else:
                return visitor.visitChildren(self)




    def expression_or_vector(self):

        localctx = HanaParser.Expression_or_vectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_expression_or_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4340
            self.expression()
            self.state = 4342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==535:
                self.state = 4341
                self.vector_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_vector_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expr" ):
                listener.enterVector_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expr" ):
                listener.exitVector_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVector_expr" ):
                return visitor.visitVector_expr(self)
            else:
                return visitor.visitChildren(self)




    def vector_expr(self):

        localctx = HanaParser.Vector_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_vector_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4344
            self.match(HanaParser.COMMA)
            self.state = 4345
            self.expression()
            self.state = 4350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 4346
                self.match(HanaParser.COMMA)
                self.state = 4347
                self.expression()
                self.state = 4352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quantified_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(HanaParser.SOME, 0)

        def EXISTS(self):
            return self.getToken(HanaParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def ANY(self):
            return self.getToken(HanaParser.ANY, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def expression_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_quantified_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantified_expression" ):
                listener.enterQuantified_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantified_expression" ):
                listener.exitQuantified_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantified_expression" ):
                return visitor.visitQuantified_expression(self)
            else:
                return visitor.visitChildren(self)




    def quantified_expression(self):

        localctx = HanaParser.Quantified_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_quantified_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4353
            _la = self._input.LA(1)
            if not(_la==13 or _la==18 or _la==140 or _la==369):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.state = 4354
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4355
                self.subquery()
                self.state = 4356
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 4358
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4359
                self.expression_wrapper()
                self.state = 4360
                self.match(HanaParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def over_clause_keyword(self):
            return self.getTypedRuleContext(HanaParser.Over_clause_keywordContext,0)


        def function_argument_analytic(self):
            return self.getTypedRuleContext(HanaParser.Function_argument_analyticContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(HanaParser.Over_clauseContext,0)


        def regular_id(self):
            return self.getTypedRuleContext(HanaParser.Regular_idContext,0)


        def function_argument_modeling(self):
            return self.getTypedRuleContext(HanaParser.Function_argument_modelingContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(HanaParser.Using_clauseContext,0)


        def COUNT(self):
            return self.getToken(HanaParser.COUNT, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def ASTERISK(self):
            return self.getToken(HanaParser.ASTERISK, 0)

        def concatenation_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Concatenation_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,i)


        def DISTINCT(self):
            return self.getToken(HanaParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(HanaParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(HanaParser.ALL, 0)

        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def CAST(self):
            return self.getToken(HanaParser.CAST, 0)

        def XMLCAST(self):
            return self.getToken(HanaParser.XMLCAST, 0)

        def MULTISET(self):
            return self.getToken(HanaParser.MULTISET, 0)

        def subquery(self):
            return self.getTypedRuleContext(HanaParser.SubqueryContext,0)


        def CHR(self):
            return self.getToken(HanaParser.CHR, 0)

        def USING(self):
            return self.getToken(HanaParser.USING, 0)

        def NCHAR_CS(self):
            return self.getToken(HanaParser.NCHAR_CS, 0)

        def COLLECT(self):
            return self.getToken(HanaParser.COLLECT, 0)

        def collect_order_by_part(self):
            return self.getTypedRuleContext(HanaParser.Collect_order_by_partContext,0)


        def within_or_over_clause_keyword(self):
            return self.getTypedRuleContext(HanaParser.Within_or_over_clause_keywordContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(HanaParser.Function_argumentContext,0)


        def within_or_over_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Within_or_over_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.Within_or_over_partContext,i)


        def DECOMPOSE(self):
            return self.getToken(HanaParser.DECOMPOSE, 0)

        def CANONICAL(self):
            return self.getToken(HanaParser.CANONICAL, 0)

        def COMPATIBILITY(self):
            return self.getToken(HanaParser.COMPATIBILITY, 0)

        def EXTRACT(self):
            return self.getToken(HanaParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(HanaParser.FROM, 0)

        def FIRST_VALUE(self):
            return self.getToken(HanaParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(HanaParser.LAST_VALUE, 0)

        def respect_or_ignore_nulls(self):
            return self.getTypedRuleContext(HanaParser.Respect_or_ignore_nullsContext,0)


        def standard_prediction_function_keyword(self):
            return self.getTypedRuleContext(HanaParser.Standard_prediction_function_keywordContext,0)


        def expression_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def cost_matrix_clause(self):
            return self.getTypedRuleContext(HanaParser.Cost_matrix_clauseContext,0)


        def TRANSLATE(self):
            return self.getToken(HanaParser.TRANSLATE, 0)

        def CHAR_CS(self):
            return self.getToken(HanaParser.CHAR_CS, 0)

        def TREAT(self):
            return self.getToken(HanaParser.TREAT, 0)

        def REF(self):
            return self.getToken(HanaParser.REF, 0)

        def TRIM(self):
            return self.getToken(HanaParser.TRIM, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(HanaParser.Quoted_stringContext,0)


        def LEADING(self):
            return self.getToken(HanaParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(HanaParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(HanaParser.BOTH, 0)

        def XMLAGG(self):
            return self.getToken(HanaParser.XMLAGG, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(HanaParser.Order_by_clauseContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def general_element_part(self):
            return self.getTypedRuleContext(HanaParser.General_element_partContext,0)


        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Xml_multiuse_expression_elementContext,i)


        def XMLCOLATTVAL(self):
            return self.getToken(HanaParser.XMLCOLATTVAL, 0)

        def XMLFOREST(self):
            return self.getToken(HanaParser.XMLFOREST, 0)

        def XMLELEMENT(self):
            return self.getToken(HanaParser.XMLELEMENT, 0)

        def xml_attributes_clause(self):
            return self.getTypedRuleContext(HanaParser.Xml_attributes_clauseContext,0)


        def ENTITYESCAPING(self):
            return self.getToken(HanaParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(HanaParser.NOENTITYESCAPING, 0)

        def NAME(self):
            return self.getToken(HanaParser.NAME, 0)

        def EVALNAME(self):
            return self.getToken(HanaParser.EVALNAME, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_aliasContext,i)


        def XMLEXISTS(self):
            return self.getToken(HanaParser.XMLEXISTS, 0)

        def xml_passing_clause(self):
            return self.getTypedRuleContext(HanaParser.Xml_passing_clauseContext,0)


        def XMLPARSE(self):
            return self.getToken(HanaParser.XMLPARSE, 0)

        def DOCUMENT(self):
            return self.getToken(HanaParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(HanaParser.CONTENT, 0)

        def WELLFORMED(self):
            return self.getToken(HanaParser.WELLFORMED, 0)

        def XMLPI(self):
            return self.getToken(HanaParser.XMLPI, 0)

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def XMLQUERY(self):
            return self.getToken(HanaParser.XMLQUERY, 0)

        def RETURNING(self):
            return self.getToken(HanaParser.RETURNING, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def ON(self):
            return self.getToken(HanaParser.ON, 0)

        def EMPTY(self):
            return self.getToken(HanaParser.EMPTY, 0)

        def XMLROOT(self):
            return self.getToken(HanaParser.XMLROOT, 0)

        def xmlroot_param_version_part(self):
            return self.getTypedRuleContext(HanaParser.Xmlroot_param_version_partContext,0)


        def xmlroot_param_standalone_part(self):
            return self.getTypedRuleContext(HanaParser.Xmlroot_param_standalone_partContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(HanaParser.XMLSERIALIZE, 0)

        def xmlserialize_param_enconding_part(self):
            return self.getTypedRuleContext(HanaParser.Xmlserialize_param_enconding_partContext,0)


        def xmlserialize_param_version_part(self):
            return self.getTypedRuleContext(HanaParser.Xmlserialize_param_version_partContext,0)


        def xmlserialize_param_ident_part(self):
            return self.getTypedRuleContext(HanaParser.Xmlserialize_param_ident_partContext,0)


        def DEFAULTS(self):
            return self.getToken(HanaParser.DEFAULTS, 0)

        def HIDE(self):
            return self.getToken(HanaParser.HIDE, 0)

        def SHOW(self):
            return self.getToken(HanaParser.SHOW, 0)

        def XMLTABLE(self):
            return self.getToken(HanaParser.XMLTABLE, 0)

        def xml_namespaces_clause(self):
            return self.getTypedRuleContext(HanaParser.Xml_namespaces_clauseContext,0)


        def COLUMNS(self):
            return self.getToken(HanaParser.COLUMNS, 0)

        def xml_table_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Xml_table_columnContext)
            else:
                return self.getTypedRuleContext(HanaParser.Xml_table_columnContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_standard_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_function" ):
                listener.enterStandard_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_function" ):
                listener.exitStandard_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_function" ):
                return visitor.visitStandard_function(self)
            else:
                return visitor.visitChildren(self)




    def standard_function(self):

        localctx = HanaParser.Standard_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_standard_function)
        self._la = 0 # Token type
        try:
            self.state = 4678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,579,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4364
                self.over_clause_keyword()
                self.state = 4365
                self.function_argument_analytic()
                self.state = 4367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
                if la_ == 1:
                    self.state = 4366
                    self.over_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4369
                self.regular_id()
                self.state = 4370
                self.function_argument_modeling()
                self.state = 4372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
                if la_ == 1:
                    self.state = 4371
                    self.using_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4374
                self.match(HanaParser.COUNT)
                self.state = 4375
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4381
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [532]:
                    self.state = 4376
                    self.match(HanaParser.ASTERISK)
                    pass
                elif token in [7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 529, 533, 534, 539, 540, 555, 560]:
                    self.state = 4378
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
                    if la_ == 1:
                        self.state = 4377
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==117 or _la==416):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4380
                    self.concatenation_wrapper()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4383
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                if la_ == 1:
                    self.state = 4384
                    self.over_clause()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4387
                _la = self._input.LA(1)
                if not(_la==54 or _la==451):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4388
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
                if la_ == 1:
                    self.state = 4389
                    self.match(HanaParser.MULTISET)
                    self.state = 4390
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 4391
                    self.subquery()
                    self.state = 4392
                    self.match(HanaParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 4394
                    self.concatenation_wrapper()
                    pass


                self.state = 4397
                self.match(HanaParser.AS)
                self.state = 4398
                self.type_spec()
                self.state = 4399
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4401
                self.match(HanaParser.CHR)
                self.state = 4402
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4403
                self.concatenation_wrapper()
                self.state = 4404
                self.match(HanaParser.USING)
                self.state = 4405
                self.match(HanaParser.NCHAR_CS)
                self.state = 4406
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4408
                self.match(HanaParser.COLLECT)
                self.state = 4409
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
                if la_ == 1:
                    self.state = 4410
                    _la = self._input.LA(1)
                    if not(_la==117 or _la==416):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4413
                self.concatenation_wrapper()
                self.state = 4415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==276:
                    self.state = 4414
                    self.collect_order_by_part()


                self.state = 4417
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4419
                self.within_or_over_clause_keyword()
                self.state = 4420
                self.function_argument()
                self.state = 4422 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4421
                        self.within_or_over_part()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4424 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,535,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4426
                self.match(HanaParser.DECOMPOSE)
                self.state = 4427
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4428
                self.concatenation_wrapper()
                self.state = 4430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==68:
                    self.state = 4429
                    _la = self._input.LA(1)
                    if not(_la==51 or _la==68):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4432
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4434
                self.match(HanaParser.EXTRACT)
                self.state = 4435
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4436
                self.regular_id()
                self.state = 4437
                self.match(HanaParser.FROM)
                self.state = 4438
                self.concatenation_wrapper()
                self.state = 4439
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4441
                _la = self._input.LA(1)
                if not(_la==150 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4442
                self.function_argument_analytic()
                self.state = 4444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170 or _la==318:
                    self.state = 4443
                    self.respect_or_ignore_nulls()


                self.state = 4446
                self.over_clause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4448
                self.standard_prediction_function_keyword()
                self.state = 4449
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4450
                self.expression_wrapper()
                self.state = 4455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4451
                    self.match(HanaParser.COMMA)
                    self.state = 4452
                    self.expression_wrapper()
                    self.state = 4457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 4458
                    self.cost_matrix_clause()


                self.state = 4462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==425:
                    self.state = 4461
                    self.using_clause()


                self.state = 4464
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4466
                self.match(HanaParser.TRANSLATE)
                self.state = 4467
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4468
                self.expression_wrapper()
                self.state = 4471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==425:
                    self.state = 4469
                    self.match(HanaParser.USING)
                    self.state = 4470
                    _la = self._input.LA(1)
                    if not(_la==56 or _la==243):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4473
                    self.match(HanaParser.COMMA)
                    self.state = 4474
                    self.expression_wrapper()
                    self.state = 4479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4480
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4482
                self.match(HanaParser.TREAT)
                self.state = 4483
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4484
                self.expression_wrapper()
                self.state = 4485
                self.match(HanaParser.AS)
                self.state = 4487
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                if la_ == 1:
                    self.state = 4486
                    self.match(HanaParser.REF)


                self.state = 4489
                self.type_spec()
                self.state = 4490
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4492
                self.match(HanaParser.TRIM)
                self.state = 4493
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
                if la_ == 1:
                    self.state = 4495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==43 or _la==204 or _la==404:
                        self.state = 4494
                        _la = self._input.LA(1)
                        if not(_la==43 or _la==204 or _la==404):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==518 or _la==525:
                        self.state = 4497
                        self.quoted_string()


                    self.state = 4500
                    self.match(HanaParser.FROM)


                self.state = 4503
                self.concatenation_wrapper()
                self.state = 4504
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4506
                self.match(HanaParser.XMLAGG)
                self.state = 4507
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4508
                self.expression_wrapper()
                self.state = 4510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==276:
                    self.state = 4509
                    self.order_by_clause()


                self.state = 4512
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
                if la_ == 1:
                    self.state = 4513
                    self.match(HanaParser.PERIOD)
                    self.state = 4514
                    self.general_element_part()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4517
                _la = self._input.LA(1)
                if not(_la==452 or _la==455):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4518
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4519
                self.xml_multiuse_expression_element()
                self.state = 4524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4520
                    self.match(HanaParser.COMMA)
                    self.state = 4521
                    self.xml_multiuse_expression_element()
                    self.state = 4526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4527
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
                if la_ == 1:
                    self.state = 4528
                    self.match(HanaParser.PERIOD)
                    self.state = 4529
                    self.general_element_part()


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4532
                self.match(HanaParser.XMLELEMENT)
                self.state = 4533
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,551,self._ctx)
                if la_ == 1:
                    self.state = 4534
                    _la = self._input.LA(1)
                    if not(_la==130 or _la==252):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
                if la_ == 1:
                    self.state = 4537
                    _la = self._input.LA(1)
                    if not(_la==133 or _la==237):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4540
                self.expression_wrapper()
                self.state = 4543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
                if la_ == 1:
                    self.state = 4541
                    self.match(HanaParser.COMMA)
                    self.state = 4542
                    self.xml_attributes_clause()


                self.state = 4552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4545
                    self.match(HanaParser.COMMA)
                    self.state = 4546
                    self.expression_wrapper()
                    self.state = 4548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774055452928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                        self.state = 4547
                        self.column_alias()


                    self.state = 4554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4555
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
                if la_ == 1:
                    self.state = 4556
                    self.match(HanaParser.PERIOD)
                    self.state = 4557
                    self.general_element_part()


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 4560
                self.match(HanaParser.XMLEXISTS)
                self.state = 4561
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4562
                self.expression_wrapper()
                self.state = 4564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 4563
                    self.xml_passing_clause()


                self.state = 4566
                self.match(HanaParser.RIGHT_PAREN)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 4568
                self.match(HanaParser.XMLPARSE)
                self.state = 4569
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4570
                _la = self._input.LA(1)
                if not(_la==77 or _la==118):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4571
                self.concatenation_wrapper()
                self.state = 4573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==439:
                    self.state = 4572
                    self.match(HanaParser.WELLFORMED)


                self.state = 4575
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
                if la_ == 1:
                    self.state = 4576
                    self.match(HanaParser.PERIOD)
                    self.state = 4577
                    self.general_element_part()


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 4580
                self.match(HanaParser.XMLPI)
                self.state = 4581
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4586
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [237]:
                    self.state = 4582
                    self.match(HanaParser.NAME)
                    self.state = 4583
                    self.id_()
                    pass
                elif token in [133]:
                    self.state = 4584
                    self.match(HanaParser.EVALNAME)
                    self.state = 4585
                    self.concatenation_wrapper()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==535:
                    self.state = 4588
                    self.match(HanaParser.COMMA)
                    self.state = 4589
                    self.concatenation_wrapper()


                self.state = 4592
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,562,self._ctx)
                if la_ == 1:
                    self.state = 4593
                    self.match(HanaParser.PERIOD)
                    self.state = 4594
                    self.general_element_part()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 4597
                self.match(HanaParser.XMLQUERY)
                self.state = 4598
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4599
                self.concatenation_wrapper()
                self.state = 4601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 4600
                    self.xml_passing_clause()


                self.state = 4603
                self.match(HanaParser.RETURNING)
                self.state = 4604
                self.match(HanaParser.CONTENT)
                self.state = 4608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==260:
                    self.state = 4605
                    self.match(HanaParser.NULL)
                    self.state = 4606
                    self.match(HanaParser.ON)
                    self.state = 4607
                    self.match(HanaParser.EMPTY)


                self.state = 4610
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4613
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
                if la_ == 1:
                    self.state = 4611
                    self.match(HanaParser.PERIOD)
                    self.state = 4612
                    self.general_element_part()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 4615
                self.match(HanaParser.XMLROOT)
                self.state = 4616
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4617
                self.concatenation_wrapper()
                self.state = 4620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,566,self._ctx)
                if la_ == 1:
                    self.state = 4618
                    self.match(HanaParser.COMMA)
                    self.state = 4619
                    self.xmlroot_param_version_part()


                self.state = 4624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==535:
                    self.state = 4622
                    self.match(HanaParser.COMMA)
                    self.state = 4623
                    self.xmlroot_param_standalone_part()


                self.state = 4626
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
                if la_ == 1:
                    self.state = 4627
                    self.match(HanaParser.PERIOD)
                    self.state = 4628
                    self.general_element_part()


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 4631
                self.match(HanaParser.XMLSERIALIZE)
                self.state = 4632
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4633
                _la = self._input.LA(1)
                if not(_la==77 or _la==118):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4634
                self.concatenation_wrapper()
                self.state = 4637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4635
                    self.match(HanaParser.AS)
                    self.state = 4636
                    self.type_spec()


                self.state = 4640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 4639
                    self.xmlserialize_param_enconding_part()


                self.state = 4643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==434:
                    self.state = 4642
                    self.xmlserialize_param_version_part()


                self.state = 4646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176 or _la==247:
                    self.state = 4645
                    self.xmlserialize_param_ident_part()


                self.state = 4650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==167 or _la==358:
                    self.state = 4648
                    _la = self._input.LA(1)
                    if not(_la==167 or _la==358):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4649
                    self.match(HanaParser.DEFAULTS)


                self.state = 4652
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
                if la_ == 1:
                    self.state = 4653
                    self.match(HanaParser.PERIOD)
                    self.state = 4654
                    self.general_element_part()


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 4657
                self.match(HanaParser.XMLTABLE)
                self.state = 4658
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,575,self._ctx)
                if la_ == 1:
                    self.state = 4659
                    self.xml_namespaces_clause()


                self.state = 4662
                self.concatenation_wrapper()
                self.state = 4664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==288:
                    self.state = 4663
                    self.xml_passing_clause()


                self.state = 4671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 4666
                    self.match(HanaParser.COLUMNS)
                    self.state = 4667
                    self.xml_table_column()

                    self.state = 4668
                    self.match(HanaParser.COMMA)
                    self.state = 4669
                    self.xml_table_column()


                self.state = 4673
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
                if la_ == 1:
                    self.state = 4674
                    self.match(HanaParser.PERIOD)
                    self.state = 4675
                    self.general_element_part()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clause_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(HanaParser.AVG, 0)

        def CORR(self):
            return self.getToken(HanaParser.CORR, 0)

        def LAG(self):
            return self.getToken(HanaParser.LAG, 0)

        def LEAD(self):
            return self.getToken(HanaParser.LEAD, 0)

        def MAX(self):
            return self.getToken(HanaParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(HanaParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(HanaParser.MIN, 0)

        def NTILE(self):
            return self.getToken(HanaParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(HanaParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(HanaParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(HanaParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(HanaParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(HanaParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(HanaParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(HanaParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(HanaParser.COVAR_, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_keyword" ):
                listener.enterOver_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_keyword" ):
                listener.exitOver_clause_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_keyword" ):
                return visitor.visitOver_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def over_clause_keyword(self):

        localctx = HanaParser.Over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4680
            _la = self._input.LA(1)
            if not(((((_la - 502)) & ~0x3f) == 0 and ((1 << (_la - 502)) & 65535) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_or_over_clause_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUME_DIST(self):
            return self.getToken(HanaParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(HanaParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(HanaParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(HanaParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(HanaParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(HanaParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(HanaParser.RANK, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_within_or_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_clause_keyword" ):
                listener.enterWithin_or_over_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_clause_keyword" ):
                listener.exitWithin_or_over_clause_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_clause_keyword" ):
                return visitor.visitWithin_or_over_clause_keyword(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_clause_keyword(self):

        localctx = HanaParser.Within_or_over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_within_or_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4682
            _la = self._input.LA(1)
            if not(((((_la - 495)) & ~0x3f) == 0 and ((1 << (_la - 495)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Standard_prediction_function_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICTION(self):
            return self.getToken(HanaParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(HanaParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(HanaParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(HanaParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(HanaParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(HanaParser.PREDICTION_SET, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_standard_prediction_function_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_prediction_function_keyword" ):
                listener.enterStandard_prediction_function_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_prediction_function_keyword" ):
                listener.exitStandard_prediction_function_keyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_prediction_function_keyword" ):
                return visitor.visitStandard_prediction_function_keyword(self)
            else:
                return visitor.visitChildren(self)




    def standard_prediction_function_keyword(self):

        localctx = HanaParser.Standard_prediction_function_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_standard_prediction_function_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4684
            _la = self._input.LA(1)
            if not(((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(HanaParser.OVER, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def query_partition_clause(self):
            return self.getTypedRuleContext(HanaParser.Query_partition_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(HanaParser.Order_by_clauseContext,0)


        def windowing_clause(self):
            return self.getTypedRuleContext(HanaParser.Windowing_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = HanaParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4686
            self.match(HanaParser.OVER)
            self.state = 4687
            self.match(HanaParser.LEFT_PAREN)
            self.state = 4689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==287:
                self.state = 4688
                self.query_partition_clause()


            self.state = 4695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==276:
                self.state = 4691
                self.order_by_clause()
                self.state = 4693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==305 or _la==332:
                    self.state = 4692
                    self.windowing_clause()




            self.state = 4697
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowing_type(self):
            return self.getTypedRuleContext(HanaParser.Windowing_typeContext,0)


        def BETWEEN(self):
            return self.getToken(HanaParser.BETWEEN, 0)

        def windowing_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Windowing_elementsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Windowing_elementsContext,i)


        def AND(self):
            return self.getToken(HanaParser.AND, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_windowing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_clause" ):
                listener.enterWindowing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_clause" ):
                listener.exitWindowing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_clause" ):
                return visitor.visitWindowing_clause(self)
            else:
                return visitor.visitChildren(self)




    def windowing_clause(self):

        localctx = HanaParser.Windowing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_windowing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4699
            self.windowing_type()
            self.state = 4706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                self.state = 4700
                self.match(HanaParser.BETWEEN)
                self.state = 4701
                self.windowing_elements()
                self.state = 4702
                self.match(HanaParser.AND)
                self.state = 4703
                self.windowing_elements()
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 529, 533, 534, 539, 540, 555, 560]:
                self.state = 4705
                self.windowing_elements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(HanaParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HanaParser.RANGE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_windowing_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_type" ):
                listener.enterWindowing_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_type" ):
                listener.exitWindowing_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_type" ):
                return visitor.visitWindowing_type(self)
            else:
                return visitor.visitChildren(self)




    def windowing_type(self):

        localctx = HanaParser.Windowing_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_windowing_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4708
            _la = self._input.LA(1)
            if not(_la==305 or _la==332):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Windowing_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(HanaParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HanaParser.PRECEDING, 0)

        def CURRENT(self):
            return self.getToken(HanaParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HanaParser.ROW, 0)

        def concatenation_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,0)


        def FOLLOWING(self):
            return self.getToken(HanaParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_windowing_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_elements" ):
                listener.enterWindowing_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_elements" ):
                listener.exitWindowing_elements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowing_elements" ):
                return visitor.visitWindowing_elements(self)
            else:
                return visitor.visitChildren(self)




    def windowing_elements(self):

        localctx = HanaParser.Windowing_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_windowing_elements)
        self._la = 0 # Token type
        try:
            self.state = 4717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4710
                self.match(HanaParser.UNBOUNDED)
                self.state = 4711
                self.match(HanaParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4712
                self.match(HanaParser.CURRENT)
                self.state = 4713
                self.match(HanaParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4714
                self.concatenation_wrapper()
                self.state = 4715
                _la = self._input.LA(1)
                if not(_la==152 or _la==299):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(HanaParser.USING, 0)

        def ASTERISK(self):
            return self.getToken(HanaParser.ASTERISK, 0)

        def using_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Using_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Using_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_clause" ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_clause" ):
                listener.exitUsing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_clause" ):
                return visitor.visitUsing_clause(self)
            else:
                return visitor.visitChildren(self)




    def using_clause(self):

        localctx = HanaParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_using_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4719
            self.match(HanaParser.USING)
            self.state = 4729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [532]:
                self.state = 4720
                self.match(HanaParser.ASTERISK)
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 529, 533, 534, 539, 540, 555, 560]:
                self.state = 4721
                self.using_element()
                self.state = 4726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,585,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4722
                        self.match(HanaParser.COMMA)
                        self.state = 4723
                        self.using_element() 
                    self.state = 4728
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,585,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elements(self):
            return self.getTypedRuleContext(HanaParser.Select_list_elementsContext,0)


        def IN(self):
            return self.getToken(HanaParser.IN, 0)

        def OUT(self):
            return self.getToken(HanaParser.OUT, 0)

        def column_alias(self):
            return self.getTypedRuleContext(HanaParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_using_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_element" ):
                listener.enterUsing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_element" ):
                listener.exitUsing_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing_element" ):
                return visitor.visitUsing_element(self)
            else:
                return visitor.visitChildren(self)




    def using_element(self):

        localctx = HanaParser.Using_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_using_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
            if la_ == 1:
                self.state = 4731
                self.match(HanaParser.IN)
                self.state = 4733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
                if la_ == 1:
                    self.state = 4732
                    self.match(HanaParser.OUT)



            elif la_ == 2:
                self.state = 4735
                self.match(HanaParser.OUT)


            self.state = 4738
            self.select_list_elements()
            self.state = 4740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,589,self._ctx)
            if la_ == 1:
                self.state = 4739
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_order_by_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HanaParser.ORDER, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def concatenation_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_collect_order_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_order_by_part" ):
                listener.enterCollect_order_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_order_by_part" ):
                listener.exitCollect_order_by_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollect_order_by_part" ):
                return visitor.visitCollect_order_by_part(self)
            else:
                return visitor.visitChildren(self)




    def collect_order_by_part(self):

        localctx = HanaParser.Collect_order_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_collect_order_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4742
            self.match(HanaParser.ORDER)
            self.state = 4743
            self.match(HanaParser.BY)
            self.state = 4744
            self.concatenation_wrapper()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_or_over_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(HanaParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(HanaParser.GROUP, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(HanaParser.Order_by_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def over_clause(self):
            return self.getTypedRuleContext(HanaParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_within_or_over_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_part" ):
                listener.enterWithin_or_over_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_part" ):
                listener.exitWithin_or_over_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithin_or_over_part" ):
                return visitor.visitWithin_or_over_part(self)
            else:
                return visitor.visitChildren(self)




    def within_or_over_part(self):

        localctx = HanaParser.Within_or_over_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_within_or_over_part)
        try:
            self.state = 4753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [445]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4746
                self.match(HanaParser.WITHIN)
                self.state = 4747
                self.match(HanaParser.GROUP)
                self.state = 4748
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4749
                self.order_by_clause()
                self.state = 4750
                self.match(HanaParser.RIGHT_PAREN)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4752
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cost_matrix_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COST(self):
            return self.getToken(HanaParser.COST, 0)

        def MODEL(self):
            return self.getToken(HanaParser.MODEL, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def cost_class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Cost_class_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Cost_class_nameContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def VALUES(self):
            return self.getToken(HanaParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def AUTO(self):
            return self.getToken(HanaParser.AUTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def getRuleIndex(self):
            return HanaParser.RULE_cost_matrix_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_matrix_clause" ):
                listener.enterCost_matrix_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_matrix_clause" ):
                listener.exitCost_matrix_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_matrix_clause" ):
                return visitor.visitCost_matrix_clause(self)
            else:
                return visitor.visitChildren(self)




    def cost_matrix_clause(self):

        localctx = HanaParser.Cost_matrix_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_cost_matrix_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4755
            self.match(HanaParser.COST)
            self.state = 4773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [233]:
                self.state = 4756
                self.match(HanaParser.MODEL)
                self.state = 4758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 4757
                    self.match(HanaParser.AUTO)


                pass
            elif token in [529]:
                self.state = 4760
                self.match(HanaParser.LEFT_PAREN)
                self.state = 4761
                self.cost_class_name()
                self.state = 4766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4762
                    self.match(HanaParser.COMMA)
                    self.state = 4763
                    self.cost_class_name()
                    self.state = 4768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4769
                self.match(HanaParser.RIGHT_PAREN)
                self.state = 4770
                self.match(HanaParser.VALUES)
                self.state = 4771
                self.expression_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_passing_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(HanaParser.PASSING, 0)

        def expression_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,i)


        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def BY(self):
            return self.getToken(HanaParser.BY, 0)

        def VALUE(self):
            return self.getToken(HanaParser.VALUE, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_xml_passing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_passing_clause" ):
                listener.enterXml_passing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_passing_clause" ):
                listener.exitXml_passing_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_passing_clause" ):
                return visitor.visitXml_passing_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_passing_clause(self):

        localctx = HanaParser.Xml_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_xml_passing_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4775
            self.match(HanaParser.PASSING)
            self.state = 4778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 4776
                self.match(HanaParser.BY)
                self.state = 4777
                self.match(HanaParser.VALUE)


            self.state = 4780
            self.expression_wrapper()
            self.state = 4782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774055452928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                self.state = 4781
                self.column_alias()


            self.state = 4784
            self.match(HanaParser.COMMA)
            self.state = 4785
            self.expression_wrapper()
            self.state = 4787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.state = 4786
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attributes_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(HanaParser.XMLATTRIBUTES, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(HanaParser.Xml_multiuse_expression_elementContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def ENTITYESCAPING(self):
            return self.getToken(HanaParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(HanaParser.NOENTITYESCAPING, 0)

        def SCHEMACHECK(self):
            return self.getToken(HanaParser.SCHEMACHECK, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(HanaParser.NOSCHEMACHECK, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_xml_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attributes_clause" ):
                listener.enterXml_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attributes_clause" ):
                listener.exitXml_attributes_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_attributes_clause" ):
                return visitor.visitXml_attributes_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_attributes_clause(self):

        localctx = HanaParser.Xml_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_xml_attributes_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4789
            self.match(HanaParser.XMLATTRIBUTES)
            self.state = 4790
            self.match(HanaParser.LEFT_PAREN)
            self.state = 4792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,597,self._ctx)
            if la_ == 1:
                self.state = 4791
                _la = self._input.LA(1)
                if not(_la==130 or _la==252):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
            if la_ == 1:
                self.state = 4794
                _la = self._input.LA(1)
                if not(_la==257 or _la==338):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4797
            self.xml_multiuse_expression_element()
            self.state = 4802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 4798
                self.match(HanaParser.COMMA)
                self.state = 4799
                self.xml_multiuse_expression_element()
                self.state = 4804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4805
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespaces_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(HanaParser.XMLNAMESPACES, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def concatenation_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Concatenation_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,i)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_aliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def xml_general_default_part(self):
            return self.getTypedRuleContext(HanaParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xml_namespaces_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespaces_clause" ):
                listener.enterXml_namespaces_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespaces_clause" ):
                listener.exitXml_namespaces_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_namespaces_clause" ):
                return visitor.visitXml_namespaces_clause(self)
            else:
                return visitor.visitChildren(self)




    def xml_namespaces_clause(self):

        localctx = HanaParser.Xml_namespaces_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_xml_namespaces_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4807
            self.match(HanaParser.XMLNAMESPACES)
            self.state = 4808
            self.match(HanaParser.LEFT_PAREN)
            self.state = 4812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,600,self._ctx)
            if la_ == 1:
                self.state = 4809
                self.concatenation_wrapper()
                self.state = 4810
                self.column_alias()


            self.state = 4820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 4814
                self.match(HanaParser.COMMA)
                self.state = 4815
                self.concatenation_wrapper()
                self.state = 4816
                self.column_alias()
                self.state = 4822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 4823
                self.xml_general_default_part()


            self.state = 4826
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_table_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_column_name(self):
            return self.getTypedRuleContext(HanaParser.Xml_column_nameContext,0)


        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(HanaParser.ORDINALITY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(HanaParser.Type_specContext,0)


        def PATH(self):
            return self.getToken(HanaParser.PATH, 0)

        def concatenation_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,0)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(HanaParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xml_table_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_table_column" ):
                listener.enterXml_table_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_table_column" ):
                listener.exitXml_table_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_table_column" ):
                return visitor.visitXml_table_column(self)
            else:
                return visitor.visitChildren(self)




    def xml_table_column(self):

        localctx = HanaParser.Xml_table_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_xml_table_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4828
            self.xml_column_name()
            self.state = 4839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154]:
                self.state = 4829
                self.match(HanaParser.FOR)
                self.state = 4830
                self.match(HanaParser.ORDINALITY)
                pass
            elif token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 560]:
                self.state = 4831
                self.type_spec()
                self.state = 4834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==289:
                    self.state = 4832
                    self.match(HanaParser.PATH)
                    self.state = 4833
                    self.concatenation_wrapper()


                self.state = 4837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 4836
                    self.xml_general_default_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_general_default_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(HanaParser.DEFAULT, 0)

        def concatenation_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xml_general_default_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_general_default_part" ):
                listener.enterXml_general_default_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_general_default_part" ):
                listener.exitXml_general_default_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_general_default_part" ):
                return visitor.visitXml_general_default_part(self)
            else:
                return visitor.visitChildren(self)




    def xml_general_default_part(self):

        localctx = HanaParser.Xml_general_default_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_xml_general_default_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4841
            self.match(HanaParser.DEFAULT)
            self.state = 4842
            self.concatenation_wrapper()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_multiuse_expression_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HanaParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def EVALNAME(self):
            return self.getToken(HanaParser.EVALNAME, 0)

        def concatenation(self):
            return self.getTypedRuleContext(HanaParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xml_multiuse_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_multiuse_expression_element" ):
                listener.enterXml_multiuse_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_multiuse_expression_element" ):
                listener.exitXml_multiuse_expression_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_multiuse_expression_element" ):
                return visitor.visitXml_multiuse_expression_element(self)
            else:
                return visitor.visitChildren(self)




    def xml_multiuse_expression_element(self):

        localctx = HanaParser.Xml_multiuse_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_xml_multiuse_expression_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4844
            self.expression()
            self.state = 4851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 4845
                self.match(HanaParser.AS)
                self.state = 4849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
                if la_ == 1:
                    self.state = 4846
                    self.id_expression()
                    pass

                elif la_ == 2:
                    self.state = 4847
                    self.match(HanaParser.EVALNAME)
                    self.state = 4848
                    self.concatenation()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlroot_param_version_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(HanaParser.VERSION, 0)

        def NO(self):
            return self.getToken(HanaParser.NO, 0)

        def VALUE(self):
            return self.getToken(HanaParser.VALUE, 0)

        def expression_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xmlroot_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_version_part" ):
                listener.enterXmlroot_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_version_part" ):
                listener.exitXmlroot_param_version_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_version_part" ):
                return visitor.visitXmlroot_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_version_part(self):

        localctx = HanaParser.Xmlroot_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_xmlroot_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4853
            self.match(HanaParser.VERSION)
            self.state = 4857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
            if la_ == 1:
                self.state = 4854
                self.match(HanaParser.NO)
                self.state = 4855
                self.match(HanaParser.VALUE)
                pass

            elif la_ == 2:
                self.state = 4856
                self.expression_wrapper()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlroot_param_standalone_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(HanaParser.STANDALONE, 0)

        def YES(self):
            return self.getToken(HanaParser.YES, 0)

        def NO(self):
            return self.getToken(HanaParser.NO, 0)

        def VALUE(self):
            return self.getToken(HanaParser.VALUE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_xmlroot_param_standalone_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_standalone_part" ):
                listener.enterXmlroot_param_standalone_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_standalone_part" ):
                listener.exitXmlroot_param_standalone_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlroot_param_standalone_part" ):
                return visitor.visitXmlroot_param_standalone_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlroot_param_standalone_part(self):

        localctx = HanaParser.Xmlroot_param_standalone_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_xmlroot_param_standalone_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4859
            self.match(HanaParser.STANDALONE)
            self.state = 4865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [464]:
                self.state = 4860
                self.match(HanaParser.YES)
                pass
            elif token in [247]:
                self.state = 4861
                self.match(HanaParser.NO)
                self.state = 4863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==427:
                    self.state = 4862
                    self.match(HanaParser.VALUE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_enconding_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODING(self):
            return self.getToken(HanaParser.ENCODING, 0)

        def concatenation_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xmlserialize_param_enconding_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_enconding_part" ):
                listener.enterXmlserialize_param_enconding_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_enconding_part" ):
                listener.exitXmlserialize_param_enconding_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_enconding_part" ):
                return visitor.visitXmlserialize_param_enconding_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_enconding_part(self):

        localctx = HanaParser.Xmlserialize_param_enconding_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_xmlserialize_param_enconding_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4867
            self.match(HanaParser.ENCODING)
            self.state = 4868
            self.concatenation_wrapper()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_version_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(HanaParser.VERSION, 0)

        def concatenation_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xmlserialize_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_version_part" ):
                listener.enterXmlserialize_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_version_part" ):
                listener.exitXmlserialize_param_version_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_version_part" ):
                return visitor.visitXmlserialize_param_version_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_version_part(self):

        localctx = HanaParser.Xmlserialize_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_xmlserialize_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4870
            self.match(HanaParser.VERSION)
            self.state = 4871
            self.concatenation_wrapper()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlserialize_param_ident_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(HanaParser.NO, 0)

        def INDENT(self):
            return self.getToken(HanaParser.INDENT, 0)

        def SIZE(self):
            return self.getToken(HanaParser.SIZE, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def concatenation_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Concatenation_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xmlserialize_param_ident_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_ident_part" ):
                listener.enterXmlserialize_param_ident_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_ident_part" ):
                listener.exitXmlserialize_param_ident_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXmlserialize_param_ident_part" ):
                return visitor.visitXmlserialize_param_ident_part(self)
            else:
                return visitor.visitChildren(self)




    def xmlserialize_param_ident_part(self):

        localctx = HanaParser.Xmlserialize_param_ident_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_xmlserialize_param_ident_part)
        self._la = 0 # Token type
        try:
            self.state = 4881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [247]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4873
                self.match(HanaParser.NO)
                self.state = 4874
                self.match(HanaParser.INDENT)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4875
                self.match(HanaParser.INDENT)
                self.state = 4879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==364:
                    self.state = 4876
                    self.match(HanaParser.SIZE)
                    self.state = 4877
                    self.match(HanaParser.EQUALS_OP)
                    self.state = 4878
                    self.concatenation_wrapper()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_plus_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOLIDUS(self):
            return self.getToken(HanaParser.SOLIDUS, 0)

        def whenever_command(self):
            return self.getTypedRuleContext(HanaParser.Whenever_commandContext,0)


        def exit_command(self):
            return self.getTypedRuleContext(HanaParser.Exit_commandContext,0)


        def prompt_command(self):
            return self.getTypedRuleContext(HanaParser.Prompt_commandContext,0)


        def set_command(self):
            return self.getTypedRuleContext(HanaParser.Set_commandContext,0)


        def SEMICOLON(self):
            return self.getToken(HanaParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_sql_plus_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_plus_command" ):
                listener.enterSql_plus_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_plus_command" ):
                listener.exitSql_plus_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_plus_command" ):
                return visitor.visitSql_plus_command(self)
            else:
                return visitor.visitChildren(self)




    def sql_plus_command(self):

        localctx = HanaParser.Sql_plus_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_sql_plus_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [536]:
                self.state = 4883
                self.match(HanaParser.SOLIDUS)
                pass
            elif token in [441]:
                self.state = 4884
                self.whenever_command()
                pass
            elif token in [141]:
                self.state = 4885
                self.exit_command()
                pass
            elif token in [559]:
                self.state = 4886
                self.prompt_command()
                pass
            elif token in [354]:
                self.state = 4887
                self.set_command()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==541:
                self.state = 4890
                self.match(HanaParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Whenever_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(HanaParser.WHENEVER, 0)

        def SQLERROR(self):
            return self.getToken(HanaParser.SQLERROR, 0)

        def OSERROR(self):
            return self.getToken(HanaParser.OSERROR, 0)

        def EXIT(self):
            return self.getToken(HanaParser.EXIT, 0)

        def CONTINUE(self):
            return self.getToken(HanaParser.CONTINUE, 0)

        def SUCCESS(self):
            return self.getToken(HanaParser.SUCCESS, 0)

        def FAILURE(self):
            return self.getToken(HanaParser.FAILURE, 0)

        def WARNING(self):
            return self.getToken(HanaParser.WARNING, 0)

        def COMMIT(self):
            return self.getToken(HanaParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(HanaParser.ROLLBACK, 0)

        def NONE(self):
            return self.getToken(HanaParser.NONE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_whenever_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenever_command" ):
                listener.enterWhenever_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenever_command" ):
                listener.exitWhenever_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenever_command" ):
                return visitor.visitWhenever_command(self)
            else:
                return visitor.visitChildren(self)




    def whenever_command(self):

        localctx = HanaParser.Whenever_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_whenever_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4893
            self.match(HanaParser.WHENEVER)
            self.state = 4894
            _la = self._input.LA(1)
            if not(_la==278 or _la==373):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.state = 4895
                self.match(HanaParser.EXIT)
                self.state = 4896
                _la = self._input.LA(1)
                if not(_la==145 or _la==388 or _la==438):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4897
                _la = self._input.LA(1)
                if not(_la==66 or _la==328):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [79]:
                self.state = 4898
                self.match(HanaParser.CONTINUE)
                self.state = 4899
                _la = self._input.LA(1)
                if not(_la==66 or _la==255 or _la==328):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(HanaParser.Regular_idContext,i)


        def CHAR_STRING(self):
            return self.getToken(HanaParser.CHAR_STRING, 0)

        def ON(self):
            return self.getToken(HanaParser.ON, 0)

        def OFF(self):
            return self.getToken(HanaParser.OFF, 0)

        def numeric(self):
            return self.getTypedRuleContext(HanaParser.NumericContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_set_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_command" ):
                listener.enterSet_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_command" ):
                listener.exitSet_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_command" ):
                return visitor.visitSet_command(self)
            else:
                return visitor.visitChildren(self)




    def set_command(self):

        localctx = HanaParser.Set_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_set_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4902
            self.match(HanaParser.SET)
            self.state = 4903
            self.regular_id()
            self.state = 4909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,616,self._ctx)
            if la_ == 1:
                self.state = 4904
                self.match(HanaParser.CHAR_STRING)
                pass

            elif la_ == 2:
                self.state = 4905
                self.match(HanaParser.ON)
                pass

            elif la_ == 3:
                self.state = 4906
                self.match(HanaParser.OFF)
                pass

            elif la_ == 4:
                self.state = 4907
                self.numeric()
                pass

            elif la_ == 5:
                self.state = 4908
                self.regular_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exit_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(HanaParser.EXIT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_exit_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_command" ):
                listener.enterExit_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_command" ):
                listener.exitExit_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit_command" ):
                return visitor.visitExit_command(self)
            else:
                return visitor.visitChildren(self)




    def exit_command(self):

        localctx = HanaParser.Exit_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_exit_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4911
            self.match(HanaParser.EXIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prompt_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROMPT(self):
            return self.getToken(HanaParser.PROMPT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_prompt_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_command" ):
                listener.enterPrompt_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_command" ):
                listener.exitPrompt_command(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrompt_command" ):
                return visitor.visitPrompt_command(self)
            else:
                return visitor.visitChildren(self)




    def prompt_command(self):

        localctx = HanaParser.Prompt_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_prompt_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4913
            self.match(HanaParser.PROMPT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_extension_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(HanaParser.Expression_listContext,0)


        def SUBPARTITION(self):
            return self.getToken(HanaParser.SUBPARTITION, 0)

        def PARTITION(self):
            return self.getToken(HanaParser.PARTITION, 0)

        def FOR(self):
            return self.getToken(HanaParser.FOR, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_partition_extension_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_extension_clause" ):
                listener.enterPartition_extension_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_extension_clause" ):
                listener.exitPartition_extension_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_extension_clause" ):
                return visitor.visitPartition_extension_clause(self)
            else:
                return visitor.visitChildren(self)




    def partition_extension_clause(self):

        localctx = HanaParser.Partition_extension_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_partition_extension_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4915
            _la = self._input.LA(1)
            if not(_la==287 or _la==385):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 4916
                self.match(HanaParser.FOR)


            self.state = 4919
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(HanaParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(HanaParser.AS, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = HanaParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.state = 4929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4921
                    self.match(HanaParser.AS)


                self.state = 4926
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                    self.state = 4924
                    self.id_()
                    pass
                elif token in [518, 525]:
                    self.state = 4925
                    self.alias_quoted_string()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4928
                self.match(HanaParser.AS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(HanaParser.Alias_quoted_stringContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = HanaParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4933
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.state = 4931
                self.id_()
                pass
            elif token in [518, 525]:
                self.state = 4932
                self.alias_quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_quoted_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quoted_string(self):
            return self.getTypedRuleContext(HanaParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_alias_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_quoted_string" ):
                listener.enterAlias_quoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_quoted_string" ):
                listener.exitAlias_quoted_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias_quoted_string" ):
                return visitor.visitAlias_quoted_string(self)
            else:
                return visitor.visitChildren(self)




    def alias_quoted_string(self):

        localctx = HanaParser.Alias_quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_alias_quoted_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4935
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HanaParser.WHERE, 0)

        def current_of_clause(self):
            return self.getTypedRuleContext(HanaParser.Current_of_clauseContext,0)


        def condition_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Condition_wrapperContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause" ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = HanaParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4937
            self.match(HanaParser.WHERE)
            self.state = 4940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.state = 4938
                self.current_of_clause()
                pass
            elif token in [7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 529, 533, 534, 539, 540, 555, 560]:
                self.state = 4939
                self.condition_wrapper()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Current_of_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HanaParser.CURRENT, 0)

        def OF(self):
            return self.getToken(HanaParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(HanaParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_current_of_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_of_clause" ):
                listener.enterCurrent_of_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_of_clause" ):
                listener.exitCurrent_of_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrent_of_clause" ):
                return visitor.visitCurrent_of_clause(self)
            else:
                return visitor.visitChildren(self)




    def current_of_clause(self):

        localctx = HanaParser.Current_of_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_current_of_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4942
            self.match(HanaParser.CURRENT)
            self.state = 4943
            self.match(HanaParser.OF)
            self.state = 4944
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(HanaParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(HanaParser.Variable_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def BULK(self):
            return self.getToken(HanaParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(HanaParser.COLLECT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInto_clause" ):
                return visitor.visitInto_clause(self)
            else:
                return visitor.visitChildren(self)




    def into_clause(self):

        localctx = HanaParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_into_clause)
        self._la = 0 # Token type
        try:
            self.state = 4966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4946
                self.match(HanaParser.INTO)
                self.state = 4947
                self.variable_name()
                self.state = 4952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4948
                    self.match(HanaParser.COMMA)
                    self.state = 4949
                    self.variable_name()
                    self.state = 4954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4955
                self.match(HanaParser.BULK)
                self.state = 4956
                self.match(HanaParser.COLLECT)
                self.state = 4957
                self.match(HanaParser.INTO)
                self.state = 4958
                self.variable_name()
                self.state = 4963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 4959
                    self.match(HanaParser.COMMA)
                    self.state = 4960
                    self.variable_name()
                    self.state = 4965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(HanaParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_xml_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_column_name" ):
                listener.enterXml_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_column_name" ):
                listener.exitXml_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_column_name" ):
                return visitor.visitXml_column_name(self)
            else:
                return visitor.visitChildren(self)




    def xml_column_name(self):

        localctx = HanaParser.Xml_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_xml_column_name)
        try:
            self.state = 4970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4968
                self.id_()
                pass
            elif token in [518, 525]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4969
                self.quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cost_class_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_cost_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_class_name" ):
                listener.enterCost_class_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_class_name" ):
                listener.exitCost_class_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCost_class_name" ):
                return visitor.visitCost_class_name(self)
            else:
                return visitor.visitChildren(self)




    def cost_class_name(self):

        localctx = HanaParser.Cost_class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_cost_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4972
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute_name" ):
                return visitor.visitAttribute_name(self)
            else:
                return visitor.visitChildren(self)




    def attribute_name(self):

        localctx = HanaParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4974
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_name" ):
                return visitor.visitSavepoint_name(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_name(self):

        localctx = HanaParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4976
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_segment_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_rollback_segment_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_segment_name" ):
                listener.enterRollback_segment_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_segment_name" ):
                listener.exitRollback_segment_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_segment_name" ):
                return visitor.visitRollback_segment_name(self)
            else:
                return visitor.visitChildren(self)




    def rollback_segment_name(self):

        localctx = HanaParser.Rollback_segment_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_rollback_segment_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4978
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_var_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_table_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_name" ):
                listener.enterTable_var_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_name" ):
                listener.exitTable_var_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_var_name" ):
                return visitor.visitTable_var_name(self)
            else:
                return visitor.visitChildren(self)




    def table_var_name(self):

        localctx = HanaParser.Table_var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_table_var_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4980
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = HanaParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4982
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Routine_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def AT_SIGN(self):
            return self.getToken(HanaParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(HanaParser.Link_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_routine_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_name" ):
                listener.enterRoutine_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_name" ):
                listener.exitRoutine_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutine_name" ):
                return visitor.visitRoutine_name(self)
            else:
                return visitor.visitChildren(self)




    def routine_name(self):

        localctx = HanaParser.Routine_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_routine_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4984
            self.id_()
            self.state = 4989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 4985
                self.match(HanaParser.PERIOD)
                self.state = 4986
                self.id_expression()
                self.state = 4991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==537:
                self.state = 4992
                self.match(HanaParser.AT_SIGN)
                self.state = 4993
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_package_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_name" ):
                listener.enterPackage_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_name" ):
                listener.exitPackage_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackage_name" ):
                return visitor.visitPackage_name(self)
            else:
                return visitor.visitChildren(self)




    def package_name(self):

        localctx = HanaParser.Package_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_package_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4996
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implementation_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_implementation_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementation_type_name" ):
                listener.enterImplementation_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementation_type_name" ):
                listener.exitImplementation_type_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplementation_type_name" ):
                return visitor.visitImplementation_type_name(self)
            else:
                return visitor.visitChildren(self)




    def implementation_type_name(self):

        localctx = HanaParser.Implementation_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_implementation_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4998
            self.id_()
            self.state = 5001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==522:
                self.state = 4999
                self.match(HanaParser.PERIOD)
                self.state = 5000
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_model_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_reference_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model_name" ):
                listener.enterReference_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model_name" ):
                listener.exitReference_model_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_model_name" ):
                return visitor.visitReference_model_name(self)
            else:
                return visitor.visitChildren(self)




    def reference_model_name(self):

        localctx = HanaParser.Reference_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_reference_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5003
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_model_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_main_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model_name" ):
                listener.enterMain_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model_name" ):
                listener.exitMain_model_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_model_name" ):
                return visitor.visitMain_model_name(self)
            else:
                return visitor.visitChildren(self)




    def main_model_name(self):

        localctx = HanaParser.Main_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_main_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5005
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_aggregate_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_name" ):
                listener.enterAggregate_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_name" ):
                listener.exitAggregate_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_function_name" ):
                return visitor.visitAggregate_function_name(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_function_name(self):

        localctx = HanaParser.Aggregate_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_aggregate_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5007
            self.id_()
            self.state = 5012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 5008
                self.match(HanaParser.PERIOD)
                self.state = 5009
                self.id_expression()
                self.state = 5014
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_query_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_name" ):
                listener.enterQuery_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_name" ):
                listener.exitQuery_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_name" ):
                return visitor.visitQuery_name(self)
            else:
                return visitor.visitChildren(self)




    def query_name(self):

        localctx = HanaParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5015
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def AT_SIGN(self):
            return self.getToken(HanaParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(HanaParser.Link_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_name" ):
                listener.enterConstraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_name" ):
                listener.exitConstraint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_name" ):
                return visitor.visitConstraint_name(self)
            else:
                return visitor.visitChildren(self)




    def constraint_name(self):

        localctx = HanaParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_constraint_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5017
            self.id_()
            self.state = 5022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 5018
                self.match(HanaParser.PERIOD)
                self.state = 5019
                self.id_expression()
                self.state = 5024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==537:
                self.state = 5025
                self.match(HanaParser.AT_SIGN)
                self.state = 5026
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_name" ):
                return visitor.visitLabel_name(self)
            else:
                return visitor.visitChildren(self)




    def label_name(self):

        localctx = HanaParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5029
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def getRuleIndex(self):
            return HanaParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = HanaParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5031
            self.id_expression()
            self.state = 5036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 5032
                self.match(HanaParser.PERIOD)
                self.state = 5033
                self.id_expression()
                self.state = 5038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def getRuleIndex(self):
            return HanaParser.RULE_sequence_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_name" ):
                listener.enterSequence_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_name" ):
                listener.exitSequence_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_name" ):
                return visitor.visitSequence_name(self)
            else:
                return visitor.visitChildren(self)




    def sequence_name(self):

        localctx = HanaParser.Sequence_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_sequence_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5039
            self.id_expression()
            self.state = 5044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 5040
                self.match(HanaParser.PERIOD)
                self.state = 5041
                self.id_expression()
                self.state = 5046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_exception_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_name" ):
                listener.enterException_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_name" ):
                listener.exitException_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_name" ):
                return visitor.visitException_name(self)
            else:
                return visitor.visitChildren(self)




    def exception_name(self):

        localctx = HanaParser.Exception_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_exception_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5047
            self.id_()
            self.state = 5052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 5048
                self.match(HanaParser.PERIOD)
                self.state = 5049
                self.id_expression()
                self.state = 5054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = HanaParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5055
            self.id_()
            self.state = 5058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==522:
                self.state = 5056
                self.match(HanaParser.PERIOD)
                self.state = 5057
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proc_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(HanaParser.Schema_nameContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_proc_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_name" ):
                listener.enterProc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_name" ):
                listener.exitProc_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProc_name" ):
                return visitor.visitProc_name(self)
            else:
                return visitor.visitChildren(self)




    def proc_name(self):

        localctx = HanaParser.Proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_proc_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
            if la_ == 1:
                self.state = 5060
                self.schema_name()
                self.state = 5061
                self.match(HanaParser.PERIOD)


            self.state = 5065
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_name" ):
                return visitor.visitTrigger_name(self)
            else:
                return visitor.visitChildren(self)




    def trigger_name(self):

        localctx = HanaParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_trigger_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5067
            self.id_()
            self.state = 5070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==522:
                self.state = 5068
                self.match(HanaParser.PERIOD)
                self.state = 5069
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_name_oldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(HanaParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(HanaParser.Char_set_nameContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def bind_variable(self):
            return self.getTypedRuleContext(HanaParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_variable_name_old

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name_old" ):
                listener.enterVariable_name_old(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name_old" ):
                listener.exitVariable_name_old(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_name_old" ):
                return visitor.visitVariable_name_old(self)
            else:
                return visitor.visitChildren(self)




    def variable_name_old(self):

        localctx = HanaParser.Variable_name_oldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_variable_name_old)
        self._la = 0 # Token type
        try:
            self.state = 5082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==555:
                    self.state = 5072
                    self.match(HanaParser.INTRODUCER)
                    self.state = 5073
                    self.char_set_name()


                self.state = 5076
                self.id_expression()
                self.state = 5079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==522:
                    self.state = 5077
                    self.match(HanaParser.PERIOD)
                    self.state = 5078
                    self.id_expression()


                pass
            elif token in [7, 476, 477, 539, 540]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5081
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = HanaParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5084
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_name_oldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(HanaParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_cursor_name_old

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name_old" ):
                listener.enterCursor_name_old(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name_old" ):
                listener.exitCursor_name_old(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name_old" ):
                return visitor.visitCursor_name_old(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name_old(self):

        localctx = HanaParser.Cursor_name_oldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_cursor_name_old)
        try:
            self.state = 5088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5086
                self.id_()
                pass
            elif token in [7, 476, 477, 539, 540]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5087
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Record_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(HanaParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_record_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_name" ):
                listener.enterRecord_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_name" ):
                listener.exitRecord_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord_name" ):
                return visitor.visitRecord_name(self)
            else:
                return visitor.visitChildren(self)




    def record_name(self):

        localctx = HanaParser.Record_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_record_name)
        try:
            self.state = 5092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5090
                self.id_()
                pass
            elif token in [7, 476, 477, 539, 540]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5091
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_collection_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_name" ):
                listener.enterCollection_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_name" ):
                listener.exitCollection_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollection_name" ):
                return visitor.visitCollection_name(self)
            else:
                return visitor.visitChildren(self)




    def collection_name(self):

        localctx = HanaParser.Collection_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_collection_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5094
            self.id_()
            self.state = 5097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==522:
                self.state = 5095
                self.match(HanaParser.PERIOD)
                self.state = 5096
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Link_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_link_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLink_name" ):
                listener.enterLink_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLink_name" ):
                listener.exitLink_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLink_name" ):
                return visitor.visitLink_name(self)
            else:
                return visitor.visitChildren(self)




    def link_name(self):

        localctx = HanaParser.Link_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_link_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5099
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_oldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_column_name_old

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_old" ):
                listener.enterColumn_name_old(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_old" ):
                listener.exitColumn_name_old(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_old" ):
                return visitor.visitColumn_name_old(self)
            else:
                return visitor.visitChildren(self)




    def column_name_old(self):

        localctx = HanaParser.Column_name_oldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_column_name_old)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5101
            self.id_()
            self.state = 5106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 5102
                self.match(HanaParser.PERIOD)
                self.state = 5103
                self.id_expression()
                self.state = 5108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tableview_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def AT_SIGN(self):
            return self.getToken(HanaParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(HanaParser.Link_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(HanaParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_tableview_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableview_name" ):
                listener.enterTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableview_name" ):
                listener.exitTableview_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableview_name" ):
                return visitor.visitTableview_name(self)
            else:
                return visitor.visitChildren(self)




    def tableview_name(self):

        localctx = HanaParser.Tableview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_tableview_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5109
            self.id_()
            self.state = 5112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
            if la_ == 1:
                self.state = 5110
                self.match(HanaParser.PERIOD)
                self.state = 5111
                self.id_expression()


            self.state = 5117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
            if la_ == 1:
                self.state = 5114
                self.match(HanaParser.AT_SIGN)
                self.state = 5115
                self.link_name()

            elif la_ == 2:
                self.state = 5116
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_set_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def getRuleIndex(self):
            return HanaParser.RULE_char_set_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_set_name" ):
                listener.enterChar_set_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_set_name" ):
                listener.exitChar_set_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChar_set_name" ):
                return visitor.visitChar_set_name(self)
            else:
                return visitor.visitChildren(self)




    def char_set_name(self):

        localctx = HanaParser.Char_set_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_char_set_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5119
            self.id_expression()
            self.state = 5124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 5120
                self.match(HanaParser.PERIOD)
                self.state = 5121
                self.id_expression()
                self.state = 5126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keep_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(HanaParser.KEEP, 0)

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def DENSE_RANK(self):
            return self.getToken(HanaParser.DENSE_RANK, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(HanaParser.Order_by_clauseContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def FIRST(self):
            return self.getToken(HanaParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HanaParser.LAST, 0)

        def over_clause(self):
            return self.getTypedRuleContext(HanaParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_keep_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeep_clause" ):
                listener.enterKeep_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeep_clause" ):
                listener.exitKeep_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeep_clause" ):
                return visitor.visitKeep_clause(self)
            else:
                return visitor.visitChildren(self)




    def keep_clause(self):

        localctx = HanaParser.Keep_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_keep_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5127
            self.match(HanaParser.KEEP)
            self.state = 5128
            self.match(HanaParser.LEFT_PAREN)
            self.state = 5129
            self.match(HanaParser.DENSE_RANK)
            self.state = 5130
            _la = self._input.LA(1)
            if not(_la==149 or _la==202):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5131
            self.order_by_clause()
            self.state = 5132
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 5134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
            if la_ == 1:
                self.state = 5133
                self.over_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(HanaParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(HanaParser.Keep_clauseContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument" ):
                return visitor.visitFunction_argument(self)
            else:
                return visitor.visitChildren(self)




    def function_argument(self):

        localctx = HanaParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5136
            self.match(HanaParser.LEFT_PAREN)
            self.state = 5138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288881574801490048) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3531315238842400897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652101699) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2322263047873029) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866478987870433) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135739419711) != 0):
                self.state = 5137
                self.argument()


            self.state = 5144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 5140
                self.match(HanaParser.COMMA)
                self.state = 5141
                self.argument()
                self.state = 5146
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5147
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 5149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                self.state = 5148
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argument_analyticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(HanaParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(HanaParser.Keep_clauseContext,0)


        def respect_or_ignore_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Respect_or_ignore_nullsContext)
            else:
                return self.getTypedRuleContext(HanaParser.Respect_or_ignore_nullsContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_function_argument_analytic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_analytic" ):
                listener.enterFunction_argument_analytic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_analytic" ):
                listener.exitFunction_argument_analytic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_analytic" ):
                return visitor.visitFunction_argument_analytic(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_analytic(self):

        localctx = HanaParser.Function_argument_analyticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_function_argument_analytic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5151
            self.match(HanaParser.LEFT_PAREN)
            self.state = 5156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288881574801490048) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3531315238842400897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652101699) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2322263047873029) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866478987870433) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099108712449) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135739419711) != 0):
                self.state = 5152
                self.argument()
                self.state = 5154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170 or _la==318:
                    self.state = 5153
                    self.respect_or_ignore_nulls()




            self.state = 5165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==535:
                self.state = 5158
                self.match(HanaParser.COMMA)
                self.state = 5159
                self.argument()
                self.state = 5161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170 or _la==318:
                    self.state = 5160
                    self.respect_or_ignore_nulls()


                self.state = 5167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5168
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 5170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.state = 5169
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_argument_modelingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def column_name(self):
            return self.getTypedRuleContext(HanaParser.Column_nameContext,0)


        def USING(self):
            return self.getToken(HanaParser.USING, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(HanaParser.Tableview_nameContext,0)


        def PERIOD(self):
            return self.getToken(HanaParser.PERIOD, 0)

        def ASTERISK(self):
            return self.getToken(HanaParser.ASTERISK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COMMA)
            else:
                return self.getToken(HanaParser.COMMA, i)

        def keep_clause(self):
            return self.getTypedRuleContext(HanaParser.Keep_clauseContext,0)


        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.NumericContext)
            else:
                return self.getTypedRuleContext(HanaParser.NumericContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.NULL)
            else:
                return self.getToken(HanaParser.NULL, i)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(HanaParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return HanaParser.RULE_function_argument_modeling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_modeling" ):
                listener.enterFunction_argument_modeling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_modeling" ):
                listener.exitFunction_argument_modeling(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_argument_modeling" ):
                return visitor.visitFunction_argument_modeling(self)
            else:
                return visitor.visitChildren(self)




    def function_argument_modeling(self):

        localctx = HanaParser.Function_argument_modelingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_function_argument_modeling)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5172
            self.match(HanaParser.LEFT_PAREN)
            self.state = 5173
            self.column_name()
            self.state = 5186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==535:
                self.state = 5174
                self.match(HanaParser.COMMA)
                self.state = 5177
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [523, 524]:
                    self.state = 5175
                    self.numeric()
                    pass
                elif token in [260]:
                    self.state = 5176
                    self.match(HanaParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==535:
                    self.state = 5179
                    self.match(HanaParser.COMMA)
                    self.state = 5182
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [523, 524]:
                        self.state = 5180
                        self.numeric()
                        pass
                    elif token in [260]:
                        self.state = 5181
                        self.match(HanaParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 5188
            self.match(HanaParser.USING)
            self.state = 5208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,665,self._ctx)
            if la_ == 1:
                self.state = 5189
                self.tableview_name()
                self.state = 5190
                self.match(HanaParser.PERIOD)
                self.state = 5191
                self.match(HanaParser.ASTERISK)
                pass

            elif la_ == 2:
                self.state = 5193
                self.match(HanaParser.ASTERISK)
                pass

            elif la_ == 3:
                self.state = 5194
                self.expression()
                self.state = 5196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774055452928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                    self.state = 5195
                    self.column_alias()


                self.state = 5205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==535:
                    self.state = 5198
                    self.match(HanaParser.COMMA)
                    self.state = 5199
                    self.expression()
                    self.state = 5201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774055452928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 145135534878783) != 0):
                        self.state = 5200
                        self.column_alias()


                    self.state = 5207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 5210
            self.match(HanaParser.RIGHT_PAREN)
            self.state = 5212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,666,self._ctx)
            if la_ == 1:
                self.state = 5211
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Respect_or_ignore_nullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(HanaParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(HanaParser.RESPECT, 0)

        def IGNORE(self):
            return self.getToken(HanaParser.IGNORE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_respect_or_ignore_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRespect_or_ignore_nulls" ):
                listener.enterRespect_or_ignore_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRespect_or_ignore_nulls" ):
                listener.exitRespect_or_ignore_nulls(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRespect_or_ignore_nulls" ):
                return visitor.visitRespect_or_ignore_nulls(self)
            else:
                return visitor.visitChildren(self)




    def respect_or_ignore_nulls(self):

        localctx = HanaParser.Respect_or_ignore_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_respect_or_ignore_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5214
            _la = self._input.LA(1)
            if not(_la==170 or _la==318):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5215
            self.match(HanaParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_wrapper(self):
            return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,0)


        def id_(self):
            return self.getTypedRuleContext(HanaParser.IdContext,0)


        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OP, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = HanaParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.state = 5217
                self.id_()
                self.state = 5218
                self.match(HanaParser.EQUALS_OP)
                self.state = 5219
                self.match(HanaParser.GREATER_THAN_OP)


            self.state = 5223
            self.expression_wrapper()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(HanaParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(HanaParser.Type_nameContext,0)


        def REF(self):
            return self.getToken(HanaParser.REF, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(HanaParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(HanaParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_spec" ):
                listener.enterType_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_spec" ):
                listener.exitType_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_spec" ):
                return visitor.visitType_spec(self)
            else:
                return visitor.visitChildren(self)




    def type_spec(self):

        localctx = HanaParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.state = 5233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,670,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5225
                self.datatype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
                if la_ == 1:
                    self.state = 5226
                    self.match(HanaParser.REF)


                self.state = 5229
                self.type_name()
                self.state = 5231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==291:
                    self.state = 5230
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==291):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_datatype_element(self):
            return self.getTypedRuleContext(HanaParser.Native_datatype_elementContext,0)


        def precision_part(self):
            return self.getTypedRuleContext(HanaParser.Precision_partContext,0)


        def WITH(self):
            return self.getToken(HanaParser.WITH, 0)

        def TIME(self):
            return self.getToken(HanaParser.TIME, 0)

        def ZONE(self):
            return self.getToken(HanaParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(HanaParser.LOCAL, 0)

        def INTERVAL(self):
            return self.getToken(HanaParser.INTERVAL, 0)

        def TO(self):
            return self.getToken(HanaParser.TO, 0)

        def YEAR(self):
            return self.getToken(HanaParser.YEAR, 0)

        def DAY(self):
            return self.getToken(HanaParser.DAY, 0)

        def MONTH(self):
            return self.getToken(HanaParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(HanaParser.SECOND, 0)

        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def expression_wrapper(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Expression_wrapperContext)
            else:
                return self.getTypedRuleContext(HanaParser.Expression_wrapperContext,i)


        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def getRuleIndex(self):
            return HanaParser.RULE_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype" ):
                listener.enterDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype" ):
                listener.exitDatatype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatatype" ):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)




    def datatype(self):

        localctx = HanaParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_datatype)
        self._la = 0 # Token type
        try:
            self.state = 5263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 35, 36, 37, 38, 39, 42, 55, 57, 60, 95, 96, 101, 102, 119, 121, 151, 168, 188, 189, 219, 229, 231, 235, 239, 240, 242, 244, 262, 263, 264, 295, 296, 297, 306, 309, 331, 341, 342, 361, 362, 366, 383, 394, 395, 396, 397, 398, 399, 400, 401, 423, 429, 430, 463, 465]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5235
                self.native_datatype_element()
                self.state = 5237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
                if la_ == 1:
                    self.state = 5236
                    self.precision_part()


                self.state = 5245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
                if la_ == 1:
                    self.state = 5239
                    self.match(HanaParser.WITH)
                    self.state = 5241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==213:
                        self.state = 5240
                        self.match(HanaParser.LOCAL)


                    self.state = 5243
                    self.match(HanaParser.TIME)
                    self.state = 5244
                    self.match(HanaParser.ZONE)


                pass
            elif token in [191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5247
                self.match(HanaParser.INTERVAL)
                self.state = 5248
                _la = self._input.LA(1)
                if not(_la==96 or _la==463):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==529:
                    self.state = 5249
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 5250
                    self.expression_wrapper()
                    self.state = 5251
                    self.match(HanaParser.RIGHT_PAREN)


                self.state = 5255
                self.match(HanaParser.TO)
                self.state = 5256
                _la = self._input.LA(1)
                if not(_la==235 or _la==341):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,675,self._ctx)
                if la_ == 1:
                    self.state = 5257
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 5258
                    self.expression_wrapper()
                    self.state = 5259
                    self.match(HanaParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precision_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.NumericContext)
            else:
                return self.getTypedRuleContext(HanaParser.NumericContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def CHAR(self):
            return self.getToken(HanaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(HanaParser.BYTE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_precision_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision_part" ):
                listener.enterPrecision_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision_part" ):
                listener.exitPrecision_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecision_part" ):
                return visitor.visitPrecision_part(self)
            else:
                return visitor.visitChildren(self)




    def precision_part(self):

        localctx = HanaParser.Precision_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_precision_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5265
            self.match(HanaParser.LEFT_PAREN)
            self.state = 5266
            self.numeric()
            self.state = 5269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==535:
                self.state = 5267
                self.match(HanaParser.COMMA)
                self.state = 5268
                self.numeric()


            self.state = 5272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47 or _la==55:
                self.state = 5271
                _la = self._input.LA(1)
                if not(_la==47 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5274
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Native_datatype_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_INTEGER(self):
            return self.getToken(HanaParser.BINARY_INTEGER, 0)

        def PLS_INTEGER(self):
            return self.getToken(HanaParser.PLS_INTEGER, 0)

        def NATURAL(self):
            return self.getToken(HanaParser.NATURAL, 0)

        def BINARY_FLOAT(self):
            return self.getToken(HanaParser.BINARY_FLOAT, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(HanaParser.BINARY_DOUBLE, 0)

        def BIGINT(self):
            return self.getToken(HanaParser.BIGINT, 0)

        def NATURALN(self):
            return self.getToken(HanaParser.NATURALN, 0)

        def POSITIVE(self):
            return self.getToken(HanaParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(HanaParser.POSITIVEN, 0)

        def SECONDDATE(self):
            return self.getToken(HanaParser.SECONDDATE, 0)

        def SIGNTYPE(self):
            return self.getToken(HanaParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(HanaParser.SIMPLE_INTEGER, 0)

        def NVARCHAR(self):
            return self.getToken(HanaParser.NVARCHAR, 0)

        def DEC(self):
            return self.getToken(HanaParser.DEC, 0)

        def INTEGER(self):
            return self.getToken(HanaParser.INTEGER, 0)

        def INT(self):
            return self.getToken(HanaParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(HanaParser.NUMERIC, 0)

        def SMALLINT(self):
            return self.getToken(HanaParser.SMALLINT, 0)

        def NUMBER(self):
            return self.getToken(HanaParser.NUMBER, 0)

        def DECIMAL(self):
            return self.getToken(HanaParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(HanaParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(HanaParser.PRECISION, 0)

        def FLOAT(self):
            return self.getToken(HanaParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(HanaParser.REAL, 0)

        def NCHAR(self):
            return self.getToken(HanaParser.NCHAR, 0)

        def LONG(self):
            return self.getToken(HanaParser.LONG, 0)

        def RAW(self):
            return self.getToken(HanaParser.RAW, 0)

        def CHAR(self):
            return self.getToken(HanaParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(HanaParser.CHARACTER, 0)

        def VARCHAR2(self):
            return self.getToken(HanaParser.VARCHAR2, 0)

        def VARCHAR(self):
            return self.getToken(HanaParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(HanaParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(HanaParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(HanaParser.DATE, 0)

        def ROWID(self):
            return self.getToken(HanaParser.ROWID, 0)

        def UROWID(self):
            return self.getToken(HanaParser.UROWID, 0)

        def YEAR(self):
            return self.getToken(HanaParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(HanaParser.MONTH, 0)

        def DAY(self):
            return self.getToken(HanaParser.DAY, 0)

        def HOUR(self):
            return self.getToken(HanaParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(HanaParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(HanaParser.SECOND, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(HanaParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(HanaParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(HanaParser.TIMEZONE_REGION, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(HanaParser.TIMEZONE_ABBR, 0)

        def TIMESTAMP(self):
            return self.getToken(HanaParser.TIMESTAMP, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(HanaParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(HanaParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(HanaParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(HanaParser.YMINTERVAL_UNCONSTRAINED, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(HanaParser.DSINTERVAL_UNCONSTRAINED, 0)

        def BFILE(self):
            return self.getToken(HanaParser.BFILE, 0)

        def BLOB(self):
            return self.getToken(HanaParser.BLOB, 0)

        def CLOB(self):
            return self.getToken(HanaParser.CLOB, 0)

        def NCLOB(self):
            return self.getToken(HanaParser.NCLOB, 0)

        def MLSLABEL(self):
            return self.getToken(HanaParser.MLSLABEL, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_native_datatype_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_datatype_element" ):
                listener.enterNative_datatype_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_datatype_element" ):
                listener.exitNative_datatype_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNative_datatype_element" ):
                return visitor.visitNative_datatype_element(self)
            else:
                return visitor.visitChildren(self)




    def native_datatype_element(self):

        localctx = HanaParser.Native_datatype_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_native_datatype_element)
        self._la = 0 # Token type
        try:
            self.state = 5338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5276
                self.match(HanaParser.BINARY_INTEGER)
                pass
            elif token in [295]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5277
                self.match(HanaParser.PLS_INTEGER)
                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5278
                self.match(HanaParser.NATURAL)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5279
                self.match(HanaParser.BINARY_FLOAT)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5280
                self.match(HanaParser.BINARY_DOUBLE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5281
                self.match(HanaParser.BIGINT)
                pass
            elif token in [240]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5282
                self.match(HanaParser.NATURALN)
                pass
            elif token in [296]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5283
                self.match(HanaParser.POSITIVE)
                pass
            elif token in [297]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5284
                self.match(HanaParser.POSITIVEN)
                pass
            elif token in [342]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5285
                self.match(HanaParser.SECONDDATE)
                pass
            elif token in [361]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5286
                self.match(HanaParser.SIGNTYPE)
                pass
            elif token in [362]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5287
                self.match(HanaParser.SIMPLE_INTEGER)
                pass
            elif token in [264]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5288
                self.match(HanaParser.NVARCHAR)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 14)
                self.state = 5289
                self.match(HanaParser.DEC)
                pass
            elif token in [189]:
                self.enterOuterAlt(localctx, 15)
                self.state = 5290
                self.match(HanaParser.INTEGER)
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 16)
                self.state = 5291
                self.match(HanaParser.INT)
                pass
            elif token in [263]:
                self.enterOuterAlt(localctx, 17)
                self.state = 5292
                self.match(HanaParser.NUMERIC)
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 18)
                self.state = 5293
                self.match(HanaParser.SMALLINT)
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 19)
                self.state = 5294
                self.match(HanaParser.NUMBER)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 20)
                self.state = 5295
                self.match(HanaParser.DECIMAL)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 21)
                self.state = 5296
                self.match(HanaParser.DOUBLE)
                self.state = 5298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 5297
                    self.match(HanaParser.PRECISION)


                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 22)
                self.state = 5300
                self.match(HanaParser.FLOAT)
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 23)
                self.state = 5301
                self.match(HanaParser.REAL)
                pass
            elif token in [242]:
                self.enterOuterAlt(localctx, 24)
                self.state = 5302
                self.match(HanaParser.NCHAR)
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 25)
                self.state = 5303
                self.match(HanaParser.LONG)
                self.state = 5305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 5304
                    self.match(HanaParser.RAW)


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 26)
                self.state = 5307
                self.match(HanaParser.CHAR)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 27)
                self.state = 5308
                self.match(HanaParser.CHARACTER)
                pass
            elif token in [430]:
                self.enterOuterAlt(localctx, 28)
                self.state = 5309
                self.match(HanaParser.VARCHAR2)
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 29)
                self.state = 5310
                self.match(HanaParser.VARCHAR)
                pass
            elif token in [383]:
                self.enterOuterAlt(localctx, 30)
                self.state = 5311
                self.match(HanaParser.STRING)
                pass
            elif token in [306]:
                self.enterOuterAlt(localctx, 31)
                self.state = 5312
                self.match(HanaParser.RAW)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 32)
                self.state = 5313
                self.match(HanaParser.BOOLEAN)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 33)
                self.state = 5314
                self.match(HanaParser.DATE)
                pass
            elif token in [331]:
                self.enterOuterAlt(localctx, 34)
                self.state = 5315
                self.match(HanaParser.ROWID)
                pass
            elif token in [423]:
                self.enterOuterAlt(localctx, 35)
                self.state = 5316
                self.match(HanaParser.UROWID)
                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 36)
                self.state = 5317
                self.match(HanaParser.YEAR)
                pass
            elif token in [235]:
                self.enterOuterAlt(localctx, 37)
                self.state = 5318
                self.match(HanaParser.MONTH)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 38)
                self.state = 5319
                self.match(HanaParser.DAY)
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 39)
                self.state = 5320
                self.match(HanaParser.HOUR)
                pass
            elif token in [229]:
                self.enterOuterAlt(localctx, 40)
                self.state = 5321
                self.match(HanaParser.MINUTE)
                pass
            elif token in [341]:
                self.enterOuterAlt(localctx, 41)
                self.state = 5322
                self.match(HanaParser.SECOND)
                pass
            elif token in [399]:
                self.enterOuterAlt(localctx, 42)
                self.state = 5323
                self.match(HanaParser.TIMEZONE_HOUR)
                pass
            elif token in [400]:
                self.enterOuterAlt(localctx, 43)
                self.state = 5324
                self.match(HanaParser.TIMEZONE_MINUTE)
                pass
            elif token in [401]:
                self.enterOuterAlt(localctx, 44)
                self.state = 5325
                self.match(HanaParser.TIMEZONE_REGION)
                pass
            elif token in [398]:
                self.enterOuterAlt(localctx, 45)
                self.state = 5326
                self.match(HanaParser.TIMEZONE_ABBR)
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 46)
                self.state = 5327
                self.match(HanaParser.TIMESTAMP)
                pass
            elif token in [397]:
                self.enterOuterAlt(localctx, 47)
                self.state = 5328
                self.match(HanaParser.TIMESTAMP_UNCONSTRAINED)
                pass
            elif token in [396]:
                self.enterOuterAlt(localctx, 48)
                self.state = 5329
                self.match(HanaParser.TIMESTAMP_TZ_UNCONSTRAINED)
                pass
            elif token in [395]:
                self.enterOuterAlt(localctx, 49)
                self.state = 5330
                self.match(HanaParser.TIMESTAMP_LTZ_UNCONSTRAINED)
                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 50)
                self.state = 5331
                self.match(HanaParser.YMINTERVAL_UNCONSTRAINED)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 51)
                self.state = 5332
                self.match(HanaParser.DSINTERVAL_UNCONSTRAINED)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 52)
                self.state = 5333
                self.match(HanaParser.BFILE)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 53)
                self.state = 5334
                self.match(HanaParser.BLOB)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 54)
                self.state = 5335
                self.match(HanaParser.CLOB)
                pass
            elif token in [244]:
                self.enterOuterAlt(localctx, 55)
                self.state = 5336
                self.match(HanaParser.NCLOB)
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 56)
                self.state = 5337
                self.match(HanaParser.MLSLABEL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bind_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINDVAR(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.BINDVAR)
            else:
                return self.getToken(HanaParser.BINDVAR, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.COLON)
            else:
                return self.getToken(HanaParser.COLON, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(HanaParser.UNSIGNED_INTEGER, i)

        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def general_element_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.General_element_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.General_element_partContext,i)


        def INDICATOR(self):
            return self.getToken(HanaParser.INDICATOR, 0)

        def bind_sql_error_code(self):
            return self.getTypedRuleContext(HanaParser.Bind_sql_error_codeContext,0)


        def const_sql_error_code(self):
            return self.getTypedRuleContext(HanaParser.Const_sql_error_codeContext,0)


        def bind_sql_error_message(self):
            return self.getTypedRuleContext(HanaParser.Bind_sql_error_messageContext,0)


        def const_sql_error_message(self):
            return self.getTypedRuleContext(HanaParser.Const_sql_error_messageContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_bind_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_variable" ):
                listener.enterBind_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_variable" ):
                listener.exitBind_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBind_variable" ):
                return visitor.visitBind_variable(self)
            else:
                return visitor.visitChildren(self)




    def bind_variable(self):

        localctx = HanaParser.Bind_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_bind_variable)
        self._la = 0 # Token type
        try:
            self.state = 5366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,687,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5343
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [539]:
                    self.state = 5340
                    self.match(HanaParser.BINDVAR)
                    pass
                elif token in [540]:
                    self.state = 5341
                    self.match(HanaParser.COLON)
                    self.state = 5342
                    self.match(HanaParser.UNSIGNED_INTEGER)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,685,self._ctx)
                if la_ == 1:
                    self.state = 5346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==179:
                        self.state = 5345
                        self.match(HanaParser.INDICATOR)


                    self.state = 5351
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [539]:
                        self.state = 5348
                        self.match(HanaParser.BINDVAR)
                        pass
                    elif token in [540]:
                        self.state = 5349
                        self.match(HanaParser.COLON)
                        self.state = 5350
                        self.match(HanaParser.UNSIGNED_INTEGER)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 5359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,686,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5355
                        self.match(HanaParser.PERIOD)
                        self.state = 5356
                        self.general_element_part() 
                    self.state = 5361
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,686,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5362
                self.bind_sql_error_code()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5363
                self.const_sql_error_code()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5364
                self.bind_sql_error_message()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5365
                self.const_sql_error_message()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bind_sql_error_codeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_ERROR_CODE(self):
            return self.getToken(HanaParser.SQL_ERROR_CODE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_bind_sql_error_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_sql_error_code" ):
                listener.enterBind_sql_error_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_sql_error_code" ):
                listener.exitBind_sql_error_code(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBind_sql_error_code" ):
                return visitor.visitBind_sql_error_code(self)
            else:
                return visitor.visitChildren(self)




    def bind_sql_error_code(self):

        localctx = HanaParser.Bind_sql_error_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_bind_sql_error_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5368
            self.match(HanaParser.T__6)
            self.state = 5369
            self.match(HanaParser.SQL_ERROR_CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_sql_error_codeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_ERROR_CODE(self):
            return self.getToken(HanaParser.SQL_ERROR_CODE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_const_sql_error_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_sql_error_code" ):
                listener.enterConst_sql_error_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_sql_error_code" ):
                listener.exitConst_sql_error_code(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst_sql_error_code" ):
                return visitor.visitConst_sql_error_code(self)
            else:
                return visitor.visitChildren(self)




    def const_sql_error_code(self):

        localctx = HanaParser.Const_sql_error_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_const_sql_error_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5371
            self.match(HanaParser.SQL_ERROR_CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bind_sql_error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_ERROR_MESSAGE(self):
            return self.getToken(HanaParser.SQL_ERROR_MESSAGE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_bind_sql_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_sql_error_message" ):
                listener.enterBind_sql_error_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_sql_error_message" ):
                listener.exitBind_sql_error_message(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBind_sql_error_message" ):
                return visitor.visitBind_sql_error_message(self)
            else:
                return visitor.visitChildren(self)




    def bind_sql_error_message(self):

        localctx = HanaParser.Bind_sql_error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_bind_sql_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5373
            self.match(HanaParser.T__6)
            self.state = 5374
            self.match(HanaParser.SQL_ERROR_MESSAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_sql_error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_ERROR_MESSAGE(self):
            return self.getToken(HanaParser.SQL_ERROR_MESSAGE, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_const_sql_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_sql_error_message" ):
                listener.enterConst_sql_error_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_sql_error_message" ):
                listener.exitConst_sql_error_message(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst_sql_error_message" ):
                return visitor.visitConst_sql_error_message(self)
            else:
                return visitor.visitChildren(self)




    def const_sql_error_message(self):

        localctx = HanaParser.Const_sql_error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_const_sql_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5376
            self.match(HanaParser.SQL_ERROR_MESSAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_element_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.General_element_partContext)
            else:
                return self.getTypedRuleContext(HanaParser.General_element_partContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def getRuleIndex(self):
            return HanaParser.RULE_general_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_element" ):
                listener.enterGeneral_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_element" ):
                listener.exitGeneral_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_element" ):
                return visitor.visitGeneral_element(self)
            else:
                return visitor.visitChildren(self)




    def general_element(self):

        localctx = HanaParser.General_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_general_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5378
            self.general_element_part()
            self.state = 5383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,688,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5379
                    self.match(HanaParser.PERIOD)
                    self.state = 5380
                    self.general_element_part() 
                self.state = 5385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,688,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_element_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(HanaParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(HanaParser.Char_set_nameContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def function_argument(self):
            return self.getTypedRuleContext(HanaParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_general_element_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_element_part" ):
                listener.enterGeneral_element_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_element_part" ):
                listener.exitGeneral_element_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_element_part" ):
                return visitor.visitGeneral_element_part(self)
            else:
                return visitor.visitChildren(self)




    def general_element_part(self):

        localctx = HanaParser.General_element_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_general_element_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==555:
                self.state = 5386
                self.match(HanaParser.INTRODUCER)
                self.state = 5387
                self.char_set_name()


            self.state = 5390
            self.id_expression()
            self.state = 5395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,690,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5391
                    self.match(HanaParser.PERIOD)
                    self.state = 5392
                    self.id_expression() 
                self.state = 5397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,690,self._ctx)

            self.state = 5399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,691,self._ctx)
            if la_ == 1:
                self.state = 5398
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(HanaParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(HanaParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(HanaParser.Char_set_nameContext,0)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.PERIOD)
            else:
                return self.getToken(HanaParser.PERIOD, i)

        def getRuleIndex(self):
            return HanaParser.RULE_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_element" ):
                listener.enterTable_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_element" ):
                listener.exitTable_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_element" ):
                return visitor.visitTable_element(self)
            else:
                return visitor.visitChildren(self)




    def table_element(self):

        localctx = HanaParser.Table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==555:
                self.state = 5401
                self.match(HanaParser.INTRODUCER)
                self.state = 5402
                self.char_set_name()


            self.state = 5405
            self.id_expression()
            self.state = 5410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==522:
                self.state = 5406
                self.match(HanaParser.PERIOD)
                self.state = 5407
                self.id_expression()
                self.state = 5412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(HanaParser.TIMESTAMP, 0)

        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(HanaParser.Quoted_stringContext,i)


        def bind_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HanaParser.Bind_variableContext)
            else:
                return self.getTypedRuleContext(HanaParser.Bind_variableContext,i)


        def AT(self):
            return self.getToken(HanaParser.AT, 0)

        def TIME(self):
            return self.getToken(HanaParser.TIME, 0)

        def ZONE(self):
            return self.getToken(HanaParser.ZONE, 0)

        def INTERVAL(self):
            return self.getToken(HanaParser.INTERVAL, 0)

        def DAY(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.DAY)
            else:
                return self.getToken(HanaParser.DAY, i)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.HOUR)
            else:
                return self.getToken(HanaParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.MINUTE)
            else:
                return self.getToken(HanaParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.SECOND)
            else:
                return self.getToken(HanaParser.SECOND, i)

        def general_element_part(self):
            return self.getTypedRuleContext(HanaParser.General_element_partContext,0)


        def LEFT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.LEFT_PAREN)
            else:
                return self.getToken(HanaParser.LEFT_PAREN, i)

        def RIGHT_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.RIGHT_PAREN)
            else:
                return self.getToken(HanaParser.RIGHT_PAREN, i)

        def TO(self):
            return self.getToken(HanaParser.TO, 0)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(HanaParser.UNSIGNED_INTEGER, i)

        def COMMA(self):
            return self.getToken(HanaParser.COMMA, 0)

        def numeric(self):
            return self.getTypedRuleContext(HanaParser.NumericContext,0)


        def DATE(self):
            return self.getToken(HanaParser.DATE, 0)

        def NULL(self):
            return self.getToken(HanaParser.NULL, 0)

        def TRUE(self):
            return self.getToken(HanaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(HanaParser.FALSE, 0)

        def DBTIMEZONE(self):
            return self.getToken(HanaParser.DBTIMEZONE, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(HanaParser.SESSIONTIMEZONE, 0)

        def MINVALUE(self):
            return self.getToken(HanaParser.MINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(HanaParser.MAXVALUE, 0)

        def DEFAULT(self):
            return self.getToken(HanaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = HanaParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [394]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5413
                self.match(HanaParser.TIMESTAMP)
                self.state = 5416
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [518, 525]:
                    self.state = 5414
                    self.quoted_string()
                    pass
                elif token in [7, 476, 477, 539, 540]:
                    self.state = 5415
                    self.bind_variable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,695,self._ctx)
                if la_ == 1:
                    self.state = 5418
                    self.match(HanaParser.AT)
                    self.state = 5419
                    self.match(HanaParser.TIME)
                    self.state = 5420
                    self.match(HanaParser.ZONE)
                    self.state = 5421
                    self.quoted_string()


                pass
            elif token in [191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5424
                self.match(HanaParser.INTERVAL)
                self.state = 5428
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [518, 525]:
                    self.state = 5425
                    self.quoted_string()
                    pass
                elif token in [7, 476, 477, 539, 540]:
                    self.state = 5426
                    self.bind_variable()
                    pass
                elif token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 526, 555, 560]:
                    self.state = 5427
                    self.general_element_part()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5430
                _la = self._input.LA(1)
                if not(_la==96 or _la==168 or _la==229 or _la==341):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
                if la_ == 1:
                    self.state = 5431
                    self.match(HanaParser.LEFT_PAREN)
                    self.state = 5434
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [523]:
                        self.state = 5432
                        self.match(HanaParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [7, 476, 477, 539, 540]:
                        self.state = 5433
                        self.bind_variable()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==535:
                        self.state = 5436
                        self.match(HanaParser.COMMA)
                        self.state = 5439
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [523]:
                            self.state = 5437
                            self.match(HanaParser.UNSIGNED_INTEGER)
                            pass
                        elif token in [7, 476, 477, 539, 540]:
                            self.state = 5438
                            self.bind_variable()
                            pass
                        else:
                            raise NoViableAltException(self)



                    self.state = 5443
                    self.match(HanaParser.RIGHT_PAREN)


                self.state = 5461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
                if la_ == 1:
                    self.state = 5446
                    self.match(HanaParser.TO)
                    self.state = 5459
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [96]:
                        self.state = 5447
                        self.match(HanaParser.DAY)
                        pass
                    elif token in [168]:
                        self.state = 5448
                        self.match(HanaParser.HOUR)
                        pass
                    elif token in [229]:
                        self.state = 5449
                        self.match(HanaParser.MINUTE)
                        pass
                    elif token in [341]:
                        self.state = 5450
                        self.match(HanaParser.SECOND)
                        self.state = 5457
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,702,self._ctx)
                        if la_ == 1:
                            self.state = 5451
                            self.match(HanaParser.LEFT_PAREN)
                            self.state = 5454
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [523]:
                                self.state = 5452
                                self.match(HanaParser.UNSIGNED_INTEGER)
                                pass
                            elif token in [7, 476, 477, 539, 540]:
                                self.state = 5453
                                self.bind_variable()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 5456
                            self.match(HanaParser.RIGHT_PAREN)


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [523, 524]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5463
                self.numeric()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5464
                self.match(HanaParser.DATE)
                self.state = 5465
                self.quoted_string()
                pass
            elif token in [518, 525]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5466
                self.quoted_string()
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5467
                self.match(HanaParser.NULL)
                pass
            elif token in [410]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5468
                self.match(HanaParser.TRUE)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5469
                self.match(HanaParser.FALSE)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5470
                self.match(HanaParser.DBTIMEZONE)
                pass
            elif token in [353]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5471
                self.match(HanaParser.SESSIONTIMEZONE)
                pass
            elif token in [230]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5472
                self.match(HanaParser.MINVALUE)
                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5473
                self.match(HanaParser.MAXVALUE)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5474
                self.match(HanaParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(HanaParser.UNSIGNED_INTEGER, 0)

        def APPROXIMATE_NUM_LIT(self):
            return self.getToken(HanaParser.APPROXIMATE_NUM_LIT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric" ):
                return visitor.visitNumeric(self)
            else:
                return visitor.visitChildren(self)




    def numeric(self):

        localctx = HanaParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5477
            _la = self._input.LA(1)
            if not(_la==523 or _la==524):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_negativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(HanaParser.MINUS_SIGN, 0)

        def numeric(self):
            return self.getTypedRuleContext(HanaParser.NumericContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_numeric_negative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_negative" ):
                listener.enterNumeric_negative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_negative" ):
                listener.exitNumeric_negative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_negative" ):
                return visitor.visitNumeric_negative(self)
            else:
                return visitor.visitChildren(self)




    def numeric_negative(self):

        localctx = HanaParser.Numeric_negativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_numeric_negative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5479
            self.match(HanaParser.MINUS_SIGN)
            self.state = 5480
            self.numeric()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quoted_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(HanaParser.CHAR_STRING, 0)

        def NATIONAL_CHAR_STRING_LIT(self):
            return self.getToken(HanaParser.NATIONAL_CHAR_STRING_LIT, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuoted_string" ):
                listener.enterQuoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuoted_string" ):
                listener.exitQuoted_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuoted_string" ):
                return visitor.visitQuoted_string(self)
            else:
                return visitor.visitChildren(self)




    def quoted_string(self):

        localctx = HanaParser.Quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_quoted_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5482
            _la = self._input.LA(1)
            if not(_la==518 or _la==525):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(HanaParser.Id_expressionContext,0)


        def INTRODUCER(self):
            return self.getToken(HanaParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(HanaParser.Char_set_nameContext,0)


        def getRuleIndex(self):
            return HanaParser.RULE_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId" ):
                listener.enterId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId" ):
                listener.exitId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitId" ):
                return visitor.visitId(self)
            else:
                return visitor.visitChildren(self)




    def id_(self):

        localctx = HanaParser.IdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==555:
                self.state = 5484
                self.match(HanaParser.INTRODUCER)
                self.state = 5485
                self.char_set_name()


            self.state = 5488
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(HanaParser.Regular_idContext,0)


        def DELIMITED_ID(self):
            return self.getToken(HanaParser.DELIMITED_ID, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_id_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expression" ):
                listener.enterId_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expression" ):
                listener.exitId_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitId_expression" ):
                return visitor.visitId_expression(self)
            else:
                return visitor.visitChildren(self)




    def id_expression(self):

        localctx = HanaParser.Id_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_id_expression)
        try:
            self.state = 5492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 10, 11, 12, 16, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 167, 168, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 560]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5490
                self.regular_id()
                pass
            elif token in [526]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5491
                self.match(HanaParser.DELIMITED_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_equal_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL_OP(self):
            return self.getToken(HanaParser.NOT_EQUAL_OP, 0)

        def LESS_THAN_OP(self):
            return self.getToken(HanaParser.LESS_THAN_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OP, 0)

        def EXCLAMATION_OPERATOR_PART(self):
            return self.getToken(HanaParser.EXCLAMATION_OPERATOR_PART, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def CARRET_OPERATOR_PART(self):
            return self.getToken(HanaParser.CARRET_OPERATOR_PART, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_not_equal_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_equal_op" ):
                listener.enterNot_equal_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_equal_op" ):
                listener.exitNot_equal_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_equal_op" ):
                return visitor.visitNot_equal_op(self)
            else:
                return visitor.visitChildren(self)




    def not_equal_op(self):

        localctx = HanaParser.Not_equal_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_not_equal_op)
        try:
            self.state = 5501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [545]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5494
                self.match(HanaParser.NOT_EQUAL_OP)
                pass
            elif token in [543]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5495
                self.match(HanaParser.LESS_THAN_OP)
                self.state = 5496
                self.match(HanaParser.GREATER_THAN_OP)
                pass
            elif token in [548]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5497
                self.match(HanaParser.EXCLAMATION_OPERATOR_PART)
                self.state = 5498
                self.match(HanaParser.EQUALS_OP)
                pass
            elif token in [546]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5499
                self.match(HanaParser.CARRET_OPERATOR_PART)
                self.state = 5500
                self.match(HanaParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Greater_than_or_equals_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN_OR_EQUALS_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0)

        def GREATER_THAN_OP(self):
            return self.getToken(HanaParser.GREATER_THAN_OP, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_greater_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater_than_or_equals_op" ):
                listener.enterGreater_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater_than_or_equals_op" ):
                listener.exitGreater_than_or_equals_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater_than_or_equals_op" ):
                return visitor.visitGreater_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def greater_than_or_equals_op(self):

        localctx = HanaParser.Greater_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_greater_than_or_equals_op)
        try:
            self.state = 5506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [544]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5503
                self.match(HanaParser.GREATER_THAN_OR_EQUALS_OP)
                pass
            elif token in [549]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5504
                self.match(HanaParser.GREATER_THAN_OP)
                self.state = 5505
                self.match(HanaParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Less_than_or_equals_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN_OR_EQUALS_OP(self):
            return self.getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0)

        def LESS_THAN_OP(self):
            return self.getToken(HanaParser.LESS_THAN_OP, 0)

        def EQUALS_OP(self):
            return self.getToken(HanaParser.EQUALS_OP, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_less_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess_than_or_equals_op" ):
                listener.enterLess_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess_than_or_equals_op" ):
                listener.exitLess_than_or_equals_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess_than_or_equals_op" ):
                return visitor.visitLess_than_or_equals_op(self)
            else:
                return visitor.visitChildren(self)




    def less_than_or_equals_op(self):

        localctx = HanaParser.Less_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_less_than_or_equals_op)
        try:
            self.state = 5511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [542]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5508
                self.match(HanaParser.LESS_THAN_OR_EQUALS_OP)
                pass
            elif token in [543]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5509
                self.match(HanaParser.LESS_THAN_OP)
                self.state = 5510
                self.match(HanaParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concatenation_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCATENATION_OP(self):
            return self.getToken(HanaParser.CONCATENATION_OP, 0)

        def VERTICAL_BAR(self, i:int=None):
            if i is None:
                return self.getTokens(HanaParser.VERTICAL_BAR)
            else:
                return self.getToken(HanaParser.VERTICAL_BAR, i)

        def getRuleIndex(self):
            return HanaParser.RULE_concatenation_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation_op" ):
                listener.enterConcatenation_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation_op" ):
                listener.exitConcatenation_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation_op" ):
                return visitor.visitConcatenation_op(self)
            else:
                return visitor.visitChildren(self)




    def concatenation_op(self):

        localctx = HanaParser.Concatenation_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_concatenation_op)
        try:
            self.state = 5516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [550]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5513
                self.match(HanaParser.CONCATENATION_OP)
                pass
            elif token in [551]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5514
                self.match(HanaParser.VERTICAL_BAR)
                self.state = 5515
                self.match(HanaParser.VERTICAL_BAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Outer_join_signContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(HanaParser.LEFT_PAREN, 0)

        def PLUS_SIGN(self):
            return self.getToken(HanaParser.PLUS_SIGN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(HanaParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_outer_join_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_sign" ):
                listener.enterOuter_join_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_sign" ):
                listener.exitOuter_join_sign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuter_join_sign" ):
                return visitor.visitOuter_join_sign(self)
            else:
                return visitor.visitChildren(self)




    def outer_join_sign(self):

        localctx = HanaParser.Outer_join_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_outer_join_sign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5518
            self.match(HanaParser.LEFT_PAREN)
            self.state = 5519
            self.match(HanaParser.PLUS_SIGN)
            self.state = 5520
            self.match(HanaParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_ID(self):
            return self.getToken(HanaParser.REGULAR_ID, 0)

        def A_LETTER(self):
            return self.getToken(HanaParser.A_LETTER, 0)

        def ADD(self):
            return self.getToken(HanaParser.ADD, 0)

        def AFTER(self):
            return self.getToken(HanaParser.AFTER, 0)

        def AGENT(self):
            return self.getToken(HanaParser.AGENT, 0)

        def AGGREGATE(self):
            return self.getToken(HanaParser.AGGREGATE, 0)

        def ANALYZE(self):
            return self.getToken(HanaParser.ANALYZE, 0)

        def ARRAY(self):
            return self.getToken(HanaParser.ARRAY, 0)

        def ASSOCIATE(self):
            return self.getToken(HanaParser.ASSOCIATE, 0)

        def AT(self):
            return self.getToken(HanaParser.AT, 0)

        def ATTRIBUTE(self):
            return self.getToken(HanaParser.ATTRIBUTE, 0)

        def AUDIT(self):
            return self.getToken(HanaParser.AUDIT, 0)

        def AUTHID(self):
            return self.getToken(HanaParser.AUTHID, 0)

        def AUTO(self):
            return self.getToken(HanaParser.AUTO, 0)

        def AUTOMATIC(self):
            return self.getToken(HanaParser.AUTOMATIC, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(HanaParser.AUTONOMOUS_TRANSACTION, 0)

        def BATCH(self):
            return self.getToken(HanaParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(HanaParser.BEFORE, 0)

        def BFILE(self):
            return self.getToken(HanaParser.BFILE, 0)

        def BINARY_DOUBLE(self):
            return self.getToken(HanaParser.BINARY_DOUBLE, 0)

        def BINARY_FLOAT(self):
            return self.getToken(HanaParser.BINARY_FLOAT, 0)

        def BINARY_INTEGER(self):
            return self.getToken(HanaParser.BINARY_INTEGER, 0)

        def BLOB(self):
            return self.getToken(HanaParser.BLOB, 0)

        def BLOCK(self):
            return self.getToken(HanaParser.BLOCK, 0)

        def BODY(self):
            return self.getToken(HanaParser.BODY, 0)

        def BOOLEAN(self):
            return self.getToken(HanaParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(HanaParser.BOTH, 0)

        def BULK(self):
            return self.getToken(HanaParser.BULK, 0)

        def BYTE(self):
            return self.getToken(HanaParser.BYTE, 0)

        def C_LETTER(self):
            return self.getToken(HanaParser.C_LETTER, 0)

        def CALL(self):
            return self.getToken(HanaParser.CALL, 0)

        def CANONICAL(self):
            return self.getToken(HanaParser.CANONICAL, 0)

        def CASCADE(self):
            return self.getToken(HanaParser.CASCADE, 0)

        def CAST(self):
            return self.getToken(HanaParser.CAST, 0)

        def CHAR(self):
            return self.getToken(HanaParser.CHAR, 0)

        def CHAR_CS(self):
            return self.getToken(HanaParser.CHAR_CS, 0)

        def CHARACTER(self):
            return self.getToken(HanaParser.CHARACTER, 0)

        def CHR(self):
            return self.getToken(HanaParser.CHR, 0)

        def CLOB(self):
            return self.getToken(HanaParser.CLOB, 0)

        def CLOSE(self):
            return self.getToken(HanaParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(HanaParser.CLUSTER, 0)

        def COLLECT(self):
            return self.getToken(HanaParser.COLLECT, 0)

        def COLUMNS(self):
            return self.getToken(HanaParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(HanaParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(HanaParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(HanaParser.COMMITTED, 0)

        def COMPATIBILITY(self):
            return self.getToken(HanaParser.COMPATIBILITY, 0)

        def COMPILE(self):
            return self.getToken(HanaParser.COMPILE, 0)

        def COMPOUND(self):
            return self.getToken(HanaParser.COMPOUND, 0)

        def CONSTANT(self):
            return self.getToken(HanaParser.CONSTANT, 0)

        def CONSTRAINT(self):
            return self.getToken(HanaParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(HanaParser.CONSTRAINTS, 0)

        def CONSTRUCTOR(self):
            return self.getToken(HanaParser.CONSTRUCTOR, 0)

        def CONTENT(self):
            return self.getToken(HanaParser.CONTENT, 0)

        def CONTEXT(self):
            return self.getToken(HanaParser.CONTEXT, 0)

        def CONTINUE(self):
            return self.getToken(HanaParser.CONTINUE, 0)

        def CONVERT(self):
            return self.getToken(HanaParser.CONVERT, 0)

        def CORRUPT_XID(self):
            return self.getToken(HanaParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(HanaParser.CORRUPT_XID_ALL, 0)

        def COST(self):
            return self.getToken(HanaParser.COST, 0)

        def COUNT(self):
            return self.getToken(HanaParser.COUNT, 0)

        def CROSS(self):
            return self.getToken(HanaParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HanaParser.CUBE, 0)

        def CURRENT_USER(self):
            return self.getToken(HanaParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(HanaParser.CURSOR, 0)

        def CUSTOMDATUM(self):
            return self.getToken(HanaParser.CUSTOMDATUM, 0)

        def CYCLE(self):
            return self.getToken(HanaParser.CYCLE, 0)

        def DATA(self):
            return self.getToken(HanaParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(HanaParser.DATABASE, 0)

        def DAY(self):
            return self.getToken(HanaParser.DAY, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(HanaParser.DB_ROLE_CHANGE, 0)

        def DBTIMEZONE(self):
            return self.getToken(HanaParser.DBTIMEZONE, 0)

        def DDL(self):
            return self.getToken(HanaParser.DDL, 0)

        def DEBUG(self):
            return self.getToken(HanaParser.DEBUG, 0)

        def DEC(self):
            return self.getToken(HanaParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(HanaParser.DECIMAL, 0)

        def DECOMPOSE(self):
            return self.getToken(HanaParser.DECOMPOSE, 0)

        def DECREMENT(self):
            return self.getToken(HanaParser.DECREMENT, 0)

        def DEFAULTS(self):
            return self.getToken(HanaParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(HanaParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(HanaParser.DEFINER, 0)

        def DETERMINISTIC(self):
            return self.getToken(HanaParser.DETERMINISTIC, 0)

        def DIMENSION(self):
            return self.getToken(HanaParser.DIMENSION, 0)

        def DISABLE(self):
            return self.getToken(HanaParser.DISABLE, 0)

        def DISASSOCIATE(self):
            return self.getToken(HanaParser.DISASSOCIATE, 0)

        def DOCUMENT(self):
            return self.getToken(HanaParser.DOCUMENT, 0)

        def DOUBLE(self):
            return self.getToken(HanaParser.DOUBLE, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(HanaParser.DSINTERVAL_UNCONSTRAINED, 0)

        def EACH(self):
            return self.getToken(HanaParser.EACH, 0)

        def ELEMENT(self):
            return self.getToken(HanaParser.ELEMENT, 0)

        def EMPTY(self):
            return self.getToken(HanaParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(HanaParser.ENABLE, 0)

        def ENCODING(self):
            return self.getToken(HanaParser.ENCODING, 0)

        def ENTITYESCAPING(self):
            return self.getToken(HanaParser.ENTITYESCAPING, 0)

        def ERRORS(self):
            return self.getToken(HanaParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(HanaParser.ESCAPE, 0)

        def EVALNAME(self):
            return self.getToken(HanaParser.EVALNAME, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(HanaParser.EXCEPTION_INIT, 0)

        def EXCEPTIONS(self):
            return self.getToken(HanaParser.EXCEPTIONS, 0)

        def EXCLUDE(self):
            return self.getToken(HanaParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(HanaParser.EXECUTE, 0)

        def EXIT(self):
            return self.getToken(HanaParser.EXIT, 0)

        def EXPLAIN(self):
            return self.getToken(HanaParser.EXPLAIN, 0)

        def EXTERNAL(self):
            return self.getToken(HanaParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(HanaParser.EXTRACT, 0)

        def FAILURE(self):
            return self.getToken(HanaParser.FAILURE, 0)

        def FINAL(self):
            return self.getToken(HanaParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HanaParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(HanaParser.FIRST_VALUE, 0)

        def FLOAT(self):
            return self.getToken(HanaParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(HanaParser.FOLLOWING, 0)

        def FOLLOWS(self):
            return self.getToken(HanaParser.FOLLOWS, 0)

        def FORALL(self):
            return self.getToken(HanaParser.FORALL, 0)

        def FORCE(self):
            return self.getToken(HanaParser.FORCE, 0)

        def FULL(self):
            return self.getToken(HanaParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(HanaParser.FUNCTION, 0)

        def GROUPING(self):
            return self.getToken(HanaParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(HanaParser.HASH, 0)

        def HIDE(self):
            return self.getToken(HanaParser.HIDE, 0)

        def HOUR(self):
            return self.getToken(HanaParser.HOUR, 0)

        def IGNORE(self):
            return self.getToken(HanaParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(HanaParser.IMMEDIATE, 0)

        def INCLUDE(self):
            return self.getToken(HanaParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(HanaParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(HanaParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(HanaParser.INDENT, 0)

        def INDEXED(self):
            return self.getToken(HanaParser.INDEXED, 0)

        def INDICATOR(self):
            return self.getToken(HanaParser.INDICATOR, 0)

        def INDICES(self):
            return self.getToken(HanaParser.INDICES, 0)

        def INFINITE(self):
            return self.getToken(HanaParser.INFINITE, 0)

        def INLINE(self):
            return self.getToken(HanaParser.INLINE, 0)

        def INNER(self):
            return self.getToken(HanaParser.INNER, 0)

        def INOUT(self):
            return self.getToken(HanaParser.INOUT, 0)

        def INSTANTIABLE(self):
            return self.getToken(HanaParser.INSTANTIABLE, 0)

        def INSTEAD(self):
            return self.getToken(HanaParser.INSTEAD, 0)

        def INT(self):
            return self.getToken(HanaParser.INT, 0)

        def INTEGER(self):
            return self.getToken(HanaParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(HanaParser.INTERVAL, 0)

        def INVALIDATE(self):
            return self.getToken(HanaParser.INVALIDATE, 0)

        def ISOLATION(self):
            return self.getToken(HanaParser.ISOLATION, 0)

        def ITERATE(self):
            return self.getToken(HanaParser.ITERATE, 0)

        def JAVA(self):
            return self.getToken(HanaParser.JAVA, 0)

        def JOIN(self):
            return self.getToken(HanaParser.JOIN, 0)

        def KEEP(self):
            return self.getToken(HanaParser.KEEP, 0)

        def LANGUAGE(self):
            return self.getToken(HanaParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(HanaParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(HanaParser.LAST_VALUE, 0)

        def LEADING(self):
            return self.getToken(HanaParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HanaParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(HanaParser.LEVEL, 0)

        def LIBRARY(self):
            return self.getToken(HanaParser.LIBRARY, 0)

        def LIKE2(self):
            return self.getToken(HanaParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(HanaParser.LIKE4, 0)

        def LIKEC(self):
            return self.getToken(HanaParser.LIKEC, 0)

        def LIMIT(self):
            return self.getToken(HanaParser.LIMIT, 0)

        def LOCAL(self):
            return self.getToken(HanaParser.LOCAL, 0)

        def LOCKED(self):
            return self.getToken(HanaParser.LOCKED, 0)

        def LOG(self):
            return self.getToken(HanaParser.LOG, 0)

        def LOGOFF(self):
            return self.getToken(HanaParser.LOGOFF, 0)

        def LOGON(self):
            return self.getToken(HanaParser.LOGON, 0)

        def LONG(self):
            return self.getToken(HanaParser.LONG, 0)

        def LOOP(self):
            return self.getToken(HanaParser.LOOP, 0)

        def MAIN(self):
            return self.getToken(HanaParser.MAIN, 0)

        def MAP(self):
            return self.getToken(HanaParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(HanaParser.MATCHED, 0)

        def MAXVALUE(self):
            return self.getToken(HanaParser.MAXVALUE, 0)

        def MEASURES(self):
            return self.getToken(HanaParser.MEASURES, 0)

        def MEMBER(self):
            return self.getToken(HanaParser.MEMBER, 0)

        def MERGE(self):
            return self.getToken(HanaParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(HanaParser.MINUTE, 0)

        def MINVALUE(self):
            return self.getToken(HanaParser.MINVALUE, 0)

        def MLSLABEL(self):
            return self.getToken(HanaParser.MLSLABEL, 0)

        def MODEL(self):
            return self.getToken(HanaParser.MODEL, 0)

        def MODIFY(self):
            return self.getToken(HanaParser.MODIFY, 0)

        def MONTH(self):
            return self.getToken(HanaParser.MONTH, 0)

        def MULTISET(self):
            return self.getToken(HanaParser.MULTISET, 0)

        def NAME(self):
            return self.getToken(HanaParser.NAME, 0)

        def NAN(self):
            return self.getToken(HanaParser.NAN, 0)

        def NATURAL(self):
            return self.getToken(HanaParser.NATURAL, 0)

        def NATURALN(self):
            return self.getToken(HanaParser.NATURALN, 0)

        def NAV(self):
            return self.getToken(HanaParser.NAV, 0)

        def NCHAR(self):
            return self.getToken(HanaParser.NCHAR, 0)

        def NCHAR_CS(self):
            return self.getToken(HanaParser.NCHAR_CS, 0)

        def NCLOB(self):
            return self.getToken(HanaParser.NCLOB, 0)

        def NESTED(self):
            return self.getToken(HanaParser.NESTED, 0)

        def NEW(self):
            return self.getToken(HanaParser.NEW, 0)

        def NO(self):
            return self.getToken(HanaParser.NO, 0)

        def NOAUDIT(self):
            return self.getToken(HanaParser.NOAUDIT, 0)

        def NOCOPY(self):
            return self.getToken(HanaParser.NOCOPY, 0)

        def NOCYCLE(self):
            return self.getToken(HanaParser.NOCYCLE, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(HanaParser.NOENTITYESCAPING, 0)

        def NONE(self):
            return self.getToken(HanaParser.NONE, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(HanaParser.NOSCHEMACHECK, 0)

        def NULLS(self):
            return self.getToken(HanaParser.NULLS, 0)

        def NUMBER(self):
            return self.getToken(HanaParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(HanaParser.NUMERIC, 0)

        def NVARCHAR(self):
            return self.getToken(HanaParser.NVARCHAR, 0)

        def OBJECT(self):
            return self.getToken(HanaParser.OBJECT, 0)

        def OFF(self):
            return self.getToken(HanaParser.OFF, 0)

        def OID(self):
            return self.getToken(HanaParser.OID, 0)

        def OLD(self):
            return self.getToken(HanaParser.OLD, 0)

        def ONLY(self):
            return self.getToken(HanaParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(HanaParser.OPEN, 0)

        def ORADATA(self):
            return self.getToken(HanaParser.ORADATA, 0)

        def ORDINALITY(self):
            return self.getToken(HanaParser.ORDINALITY, 0)

        def OSERROR(self):
            return self.getToken(HanaParser.OSERROR, 0)

        def OUT(self):
            return self.getToken(HanaParser.OUT, 0)

        def OUTER(self):
            return self.getToken(HanaParser.OUTER, 0)

        def OVER(self):
            return self.getToken(HanaParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(HanaParser.OVERRIDING, 0)

        def PACKAGE(self):
            return self.getToken(HanaParser.PACKAGE, 0)

        def PARALLEL_ENABLE(self):
            return self.getToken(HanaParser.PARALLEL_ENABLE, 0)

        def PARAMETERS(self):
            return self.getToken(HanaParser.PARAMETERS, 0)

        def PARENT(self):
            return self.getToken(HanaParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(HanaParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(HanaParser.PASSING, 0)

        def PATH(self):
            return self.getToken(HanaParser.PATH, 0)

        def PIPELINED(self):
            return self.getToken(HanaParser.PIPELINED, 0)

        def PLAN(self):
            return self.getToken(HanaParser.PLAN, 0)

        def PLS_INTEGER(self):
            return self.getToken(HanaParser.PLS_INTEGER, 0)

        def POSITIVE(self):
            return self.getToken(HanaParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(HanaParser.POSITIVEN, 0)

        def PRAGMA(self):
            return self.getToken(HanaParser.PRAGMA, 0)

        def PRECEDING(self):
            return self.getToken(HanaParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(HanaParser.PRECISION, 0)

        def PRESENT(self):
            return self.getToken(HanaParser.PRESENT, 0)

        def RAISE(self):
            return self.getToken(HanaParser.RAISE, 0)

        def RANGE(self):
            return self.getToken(HanaParser.RANGE, 0)

        def RAW(self):
            return self.getToken(HanaParser.RAW, 0)

        def READ(self):
            return self.getToken(HanaParser.READ, 0)

        def REAL(self):
            return self.getToken(HanaParser.REAL, 0)

        def RECORD(self):
            return self.getToken(HanaParser.RECORD, 0)

        def REF(self):
            return self.getToken(HanaParser.REF, 0)

        def REFERENCE(self):
            return self.getToken(HanaParser.REFERENCE, 0)

        def REFERENCING(self):
            return self.getToken(HanaParser.REFERENCING, 0)

        def REJECT(self):
            return self.getToken(HanaParser.REJECT, 0)

        def RELIES_ON(self):
            return self.getToken(HanaParser.RELIES_ON, 0)

        def RENAME(self):
            return self.getToken(HanaParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(HanaParser.REPLACE, 0)

        def RESPECT(self):
            return self.getToken(HanaParser.RESPECT, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(HanaParser.RESTRICT_REFERENCES, 0)

        def RESULT(self):
            return self.getToken(HanaParser.RESULT, 0)

        def RESULT_CACHE(self):
            return self.getToken(HanaParser.RESULT_CACHE, 0)

        def RETURN(self):
            return self.getToken(HanaParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(HanaParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(HanaParser.REUSE, 0)

        def REVERSE(self):
            return self.getToken(HanaParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(HanaParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(HanaParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(HanaParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HanaParser.ROW, 0)

        def ROWID(self):
            return self.getToken(HanaParser.ROWID, 0)

        def ROWS(self):
            return self.getToken(HanaParser.ROWS, 0)

        def RULES(self):
            return self.getToken(HanaParser.RULES, 0)

        def SAMPLE(self):
            return self.getToken(HanaParser.SAMPLE, 0)

        def SAVE(self):
            return self.getToken(HanaParser.SAVE, 0)

        def SAVEPOINT(self):
            return self.getToken(HanaParser.SAVEPOINT, 0)

        def SCHEMA(self):
            return self.getToken(HanaParser.SCHEMA, 0)

        def SCHEMACHECK(self):
            return self.getToken(HanaParser.SCHEMACHECK, 0)

        def SCN(self):
            return self.getToken(HanaParser.SCN, 0)

        def SECOND(self):
            return self.getToken(HanaParser.SECOND, 0)

        def SEED(self):
            return self.getToken(HanaParser.SEED, 0)

        def SEGMENT(self):
            return self.getToken(HanaParser.SEGMENT, 0)

        def SELF(self):
            return self.getToken(HanaParser.SELF, 0)

        def SEQUENTIAL(self):
            return self.getToken(HanaParser.SEQUENTIAL, 0)

        def SERIALIZABLE(self):
            return self.getToken(HanaParser.SERIALIZABLE, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(HanaParser.SERIALLY_REUSABLE, 0)

        def SERVERERROR(self):
            return self.getToken(HanaParser.SERVERERROR, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(HanaParser.SESSIONTIMEZONE, 0)

        def SET(self):
            return self.getToken(HanaParser.SET, 0)

        def SETS(self):
            return self.getToken(HanaParser.SETS, 0)

        def SETTINGS(self):
            return self.getToken(HanaParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(HanaParser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(HanaParser.SHUTDOWN, 0)

        def SIBLINGS(self):
            return self.getToken(HanaParser.SIBLINGS, 0)

        def SIGNTYPE(self):
            return self.getToken(HanaParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(HanaParser.SIMPLE_INTEGER, 0)

        def SINGLE(self):
            return self.getToken(HanaParser.SINGLE, 0)

        def SKIP_(self):
            return self.getToken(HanaParser.SKIP_, 0)

        def SMALLINT(self):
            return self.getToken(HanaParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(HanaParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(HanaParser.SOME, 0)

        def SPECIFICATION(self):
            return self.getToken(HanaParser.SPECIFICATION, 0)

        def SQLDATA(self):
            return self.getToken(HanaParser.SQLDATA, 0)

        def SQLERROR(self):
            return self.getToken(HanaParser.SQLERROR, 0)

        def STANDALONE(self):
            return self.getToken(HanaParser.STANDALONE, 0)

        def STARTUP(self):
            return self.getToken(HanaParser.STARTUP, 0)

        def STATEMENT(self):
            return self.getToken(HanaParser.STATEMENT, 0)

        def STATEMENT_ID(self):
            return self.getToken(HanaParser.STATEMENT_ID, 0)

        def STATIC(self):
            return self.getToken(HanaParser.STATIC, 0)

        def STATISTICS(self):
            return self.getToken(HanaParser.STATISTICS, 0)

        def STRING(self):
            return self.getToken(HanaParser.STRING, 0)

        def SUBMULTISET(self):
            return self.getToken(HanaParser.SUBMULTISET, 0)

        def SUBPARTITION(self):
            return self.getToken(HanaParser.SUBPARTITION, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(HanaParser.SUBSTITUTABLE, 0)

        def SUBTYPE(self):
            return self.getToken(HanaParser.SUBTYPE, 0)

        def SUCCESS(self):
            return self.getToken(HanaParser.SUCCESS, 0)

        def SUSPEND(self):
            return self.getToken(HanaParser.SUSPEND, 0)

        def TIME(self):
            return self.getToken(HanaParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(HanaParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(HanaParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(HanaParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(HanaParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(HanaParser.TIMEZONE_ABBR, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(HanaParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(HanaParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(HanaParser.TIMEZONE_REGION, 0)

        def TRAILING(self):
            return self.getToken(HanaParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(HanaParser.TRANSACTION, 0)

        def TRANSLATE(self):
            return self.getToken(HanaParser.TRANSLATE, 0)

        def TREAT(self):
            return self.getToken(HanaParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(HanaParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(HanaParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HanaParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(HanaParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(HanaParser.UNBOUNDED, 0)

        def UNDER(self):
            return self.getToken(HanaParser.UNDER, 0)

        def UNLIMITED(self):
            return self.getToken(HanaParser.UNLIMITED, 0)

        def UNTIL(self):
            return self.getToken(HanaParser.UNTIL, 0)

        def UPDATED(self):
            return self.getToken(HanaParser.UPDATED, 0)

        def UPSERT(self):
            return self.getToken(HanaParser.UPSERT, 0)

        def UROWID(self):
            return self.getToken(HanaParser.UROWID, 0)

        def USE(self):
            return self.getToken(HanaParser.USE, 0)

        def VALIDATE(self):
            return self.getToken(HanaParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(HanaParser.VALUE, 0)

        def VARCHAR(self):
            return self.getToken(HanaParser.VARCHAR, 0)

        def VARCHAR2(self):
            return self.getToken(HanaParser.VARCHAR2, 0)

        def VARIABLE(self):
            return self.getToken(HanaParser.VARIABLE, 0)

        def VARRAY(self):
            return self.getToken(HanaParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(HanaParser.VARYING, 0)

        def VERSION(self):
            return self.getToken(HanaParser.VERSION, 0)

        def VERSIONS(self):
            return self.getToken(HanaParser.VERSIONS, 0)

        def WAIT(self):
            return self.getToken(HanaParser.WAIT, 0)

        def WARNING(self):
            return self.getToken(HanaParser.WARNING, 0)

        def WELLFORMED(self):
            return self.getToken(HanaParser.WELLFORMED, 0)

        def WHENEVER(self):
            return self.getToken(HanaParser.WHENEVER, 0)

        def WHILE(self):
            return self.getToken(HanaParser.WHILE, 0)

        def WITHIN(self):
            return self.getToken(HanaParser.WITHIN, 0)

        def WORK(self):
            return self.getToken(HanaParser.WORK, 0)

        def WRITE(self):
            return self.getToken(HanaParser.WRITE, 0)

        def XML(self):
            return self.getToken(HanaParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(HanaParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(HanaParser.XMLATTRIBUTES, 0)

        def XMLCAST(self):
            return self.getToken(HanaParser.XMLCAST, 0)

        def XMLCOLATTVAL(self):
            return self.getToken(HanaParser.XMLCOLATTVAL, 0)

        def XMLELEMENT(self):
            return self.getToken(HanaParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(HanaParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(HanaParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(HanaParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(HanaParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(HanaParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(HanaParser.XMLQUERY, 0)

        def XMLROOT(self):
            return self.getToken(HanaParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(HanaParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(HanaParser.XMLTABLE, 0)

        def YEAR(self):
            return self.getToken(HanaParser.YEAR, 0)

        def YES(self):
            return self.getToken(HanaParser.YES, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(HanaParser.YMINTERVAL_UNCONSTRAINED, 0)

        def ZONE(self):
            return self.getToken(HanaParser.ZONE, 0)

        def PREDICTION(self):
            return self.getToken(HanaParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(HanaParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(HanaParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(HanaParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(HanaParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(HanaParser.PREDICTION_SET, 0)

        def CUME_DIST(self):
            return self.getToken(HanaParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(HanaParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(HanaParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(HanaParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(HanaParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(HanaParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(HanaParser.RANK, 0)

        def AVG(self):
            return self.getToken(HanaParser.AVG, 0)

        def CORR(self):
            return self.getToken(HanaParser.CORR, 0)

        def LAG(self):
            return self.getToken(HanaParser.LAG, 0)

        def LEAD(self):
            return self.getToken(HanaParser.LEAD, 0)

        def MAX(self):
            return self.getToken(HanaParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(HanaParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(HanaParser.MIN, 0)

        def NTILE(self):
            return self.getToken(HanaParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(HanaParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(HanaParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(HanaParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(HanaParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(HanaParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(HanaParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(HanaParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(HanaParser.COVAR_, 0)

        def getRuleIndex(self):
            return HanaParser.RULE_regular_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_id" ):
                listener.enterRegular_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_id" ):
                listener.exitRegular_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegular_id" ):
                return visitor.visitRegular_id(self)
            else:
                return visitor.visitChildren(self)




    def regular_id(self):

        localctx = HanaParser.Regular_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_regular_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5522
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -297888774056501504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3540326838291136897) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4756384390652367939) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 5692549344878624761) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -2357447419961871) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -100284325440258081) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -758866479021424865) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -1099511365633) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 140737488355359) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[271] = self.condition__sempred
        self._predicates[281] = self.expression__sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def condition__sempred(self, localctx:Condition_Context, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def expression__sempred(self, localctx:Expression_Context, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         




